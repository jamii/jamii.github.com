<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Scattered Thoughts]]></title>
  <link href="http://scattered-thoughts.net/atom.xml" rel="self"/>
  <link href="http://scattered-thoughts.net/"/>
  <updated>2014-11-15T14:22:52-08:00</updated>
  <id>http://scattered-thoughts.net/</id>
  <author>
    <name><![CDATA[Jamie Brandon]]></name>
    <email><![CDATA[jamie@scattered-thoughts.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Humans should learn maths]]></title>
    <link href="http://scattered-thoughts.net/blog/2014/11/15/humans-should-learn-maths/"/>
    <updated>2014-11-15T14:19:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2014/11/15/humans-should-learn-maths</id>
    <content type="html"><![CDATA[<p>In the history of humanity there have been three major inventions that have enabled people to think in entirely new ways. They allow us to learn more, think bigger thoughts and solve harder problems. They are:</p>

<ul>
<li>Writing: a means to store knowledge in a brain-independent form that can be easily replicated, transmitted and preserved</li>
<li>Mathematics: a methodology for constructing abstract systems, reasoning about them precisely and finding connections between them</li>
<li>Science: a methodology for finding abstract systems which map closely to the real world</li>
</ul>


<p>The reason why we teach these in schools to everyone everywhere is that they are part of your cultural inheritance as a human. It is your right to have these tools. Over the last few hundred years they have empowered us to eradicate diseases, light the dark and explore the stars.</p>

<!--more-->


<p>Recently there has been a fourth major tool added to the list:</p>

<ul>
<li>Computing: a way to arrange inanimate systems to simulate arbitrary abstract systems</li>
</ul>


<p>Take a step back and think about what a remarkable idea it is a universal computer is even possible. We can take this inanimate system and arrange it so that it&rsquo;s behaviour gives us information about another, completely unrelated system. We sit down and press buttons for a while and the machine churns and the screen glows and suddenly we know whether or not it will rain tomorrow. We discovered that the same system can be implemented using digital circuits or vacuum tubes or the atmosphere of a planet. Somehow the physical substrate doesn&rsquo;t matter &ndash; the system has a life independent of it&rsquo;s physical existence.</p>

<p>This idea of <a href="http://yudkowsky.net/rational/the-simple-truth">entangling</a> unrelated systems so that the heap of silicon you hold can tell you what the weather will be tomorrow or what just happened on the other side of the world is impossibly and wonderfully strange and yet hardly even noticed.</p>

<p>The process of entangling one of these miraculous devices is called programming. At some point the internet collectively decided to have a civilised debate about whether or not programming is maths. The implied subtext wavers between &ldquo;if you don&rsquo;t know category theory you are a bad programmer and should feel bad&rdquo; and &ldquo;maths ought to stay up in its ivory tower where it belongs and stop getting in the way of good honest engineering&rdquo;.</p>

<p>Aside from being nonsensical, the question is missing the point. For a start, it&rsquo;s not clear that either side of the argument agrees on what math even is. Tragically, most people&rsquo;s exposure to mathematics consists solely of memorising algorithms to solve numerical problems expressed in arcane syntax without reference to anything that they might ever care about. <a href="https://www.maa.org/external_archive/devlin/LockhartsLament.pdf">Lockhart</a> has more and better to say on this topic than I can manage. Suffice to say that most of what you endured in school is the math equivalent of making you compile java into binary in your head for six years without ever showing you a computer or explaining why you might want to write a program in the first place.</p>

<p>But if you can get past the childhood trauma, the poor presentation and the awful syntax there is a whole world of important and beautiful ideas to explore. Mathematics is not about calculation and memorisation, but about building and studying different abstract systems and the connections between them.</p>

<p>Mathematics is:</p>

<ul>
<li>A set of methods for thinking correctly and precisely about abstract systems</li>
<li>A body of knowledge generated by those methods</li>
<li>A collection of conventions, notations and terminology for talking about that knowledge</li>
</ul>


<p><a href="http://worrydream.com/oatmeal/changing-minds.jpg">&ldquo;An average ninth-grade mathematics student plus a particular inscription system yields a material intelligence that surpasses Galileo&rsquo;s intelligence&rdquo;</a></p>

<p>Andy diSessa notes that Galileo&rsquo;s proofs of the laws of uniform motion cover page after page to establish complicated relationships that young students today can express and remember simply as &rsquo;d=vt&#8217;. Notation matters. Not the little details of what particular symbols we use or the arrangement of characters but the frameworks within which we hang our ideas. Galileo was one of the greatest minds of his century but his seminal work could today be performed trivially by anyone with a passing knowledge of algebra. This represents a massive increase in humanities collective intelligence.</p>

<p>If you are an experienced programmer, you have likely already developed a natural talent for proof and abstraction. But talent alone has limited use. Knowledge is leverage. For hundreds of years mathematicians have been creating tools for understanding the world; tools that are applicable to almost every human endeavour. Those tools belong to you.</p>

<h1>How to learn</h1>

<p>To gain access to these tools, you must first perform several rituals. These rituals don&rsquo;t just give you access to the body of knowledge accumulated over hundreds of years, they also give you the tools to build your own. Even if the problem you are working on has never been studied before, you can approach it with a huge collection of tools and techniques as well as the experience and confidence to apply them correctly.</p>

<ul>
<li>Ritual 1: Learn to read and write proofs</li>
</ul>


<p>A proof is just an argument which is sufficiently detailed to convince the listener. In most cases the listener is just a more suspicious and pessimistic version of yourself &ndash; suspicious because they have learned that humans are not good at reasoning precisely about abstract structures. As a programmer, you spend a great deal of time forming informal proofs about your code and the systems it interacts with. After all, you have to convince yourself that the code you have written actually does what you want it to do, all the time, on every input. Many of the established practices for writing good code &ndash; separation of concerns, clean interfaces, isolation of effects &ndash; boil down to making reasoning easier by reducing the amount of complexity you have to handle at once.</p>

<p>Anyone who was forced to study mathematics at a university level probably has unpleasant memories of being asked to prove some simple obvious fact in tedious detail. Every pedantic little mistake or ambiguity is picked out and criticised. For many people the whole experience is frustrating and seems pointless.</p>

<p>The goal of this exercise is to debug your thought process. It is surprising how many things are totally obvious and yet not true. How many times have you been convinced that a program is absolutely definitely correct this time only for blatant bugs to emerge within minutes? By becoming conscious of the reasoning process itself and by correcting it&rsquo;s mistakes you can learn to reason correctly and precisely. These skills are initially practiced on the solid ground of trivial theorems so that they are second nature by the time you reach less sure footing.</p>

<p>As your skills develop you can return to more fast-and-loose reasoning most of the time. As <a href="http://terrytao.wordpress.com/career-advice/there%E2%80%99s-more-to-mathematics-than-rigour-and-proofs/">Terence Tao explains</a>, the purpose of rigour is to develop and guide intuition. The working mathematician proceeds in rapid leaps and bounds when on familiar ground, only resorting to careful tiptoeing proofs when in unfamiliar territory. Through practice they develop a good sense of when a detailed proof is needed to catch mistakes and when they can get away with just a sketch and a wave, in the same way that a good programmer knows which code can be churned out in a moment and which needs careful thought, review and testing.</p>

<p>Intuition also guides proof. A student unfamiliar with a particular subject will stumble around trying to construct a proof by brute force but an experienced practitioner will find the correct proof just emerges fully formed in their head as if by magic. To paraphrase <a href="http://www.infoq.com/presentations/Simple-Made-Easy">Rich Hickey</a>: proofs are guard rails &ndash; they are essential for safety but you don&rsquo;t drive by bouncing back and forth off the guard rails. Somehow the image of mathematics has become one of drudgery and endless formality when the reality is a balance between the intuitive leaps of understanding and the pillars of proof that prop them up afterwards.</p>

<ul>
<li>Ritual 2: Learn the language</li>
</ul>


<p>You need at least a passing familiarity with numbers, functions, sets, relations, vectors, matrices, graphs and predicates as well as the syntax used to describe them, their basic properties and how they relate to each other. The amount of knowledge may seem intimidating, but your average math undergraduate learns all this in their first year whilst mostly drunk. You are smarter than them and possibly more sober.</p>

<p>One of the huge benefits of the second ritual is that the knowledge starts to link together. Each fact slots into a huge web with many connections so that you have multiple pathways to remember and understand it. The more different ways you have to look at a subject, the more likely it is that one of them will click and make sense. Theorems and definitions are no longer handed down from on high to be memorized, but seem intuitive and natural because you understand <em>why</em> they are true.</p>

<ul>
<li>Ritual 3: Practice</li>
</ul>


<p>Mathematical theories are tools and only by applying them repeatedly in different contexts will you learn to wield them properly. Like any other skill, mathematical thinking becomes truly powerful when it is so practiced that it no longer requires conscious effort or awareness. It just becomes another lens through which you can see the world.</p>

<p>Read books. Expect this to be hard. Studying maths texts is less like reading a novel and more like trying to unravel a knot. If something doesn&rsquo;t make sense, skip it and come back later. Study it again and again, in different orders. Don&rsquo;t just read passively, <a href="http://web.stonehill.edu/compsci/history_math/math-read.htm">fight back</a>. Can you find concrete examples of each theorem? Can you find counter-examples? Can you find alternate proofs of key theorems? Can you make the result of a theorem stronger by adding more conditions? If you take away conditions, can you prove a weaker version? Why prove this theorem at all &ndash; what does it mean and what problems can you use it to solve?</p>

<p>Find your own puzzles to solve. When walking to work, is it always fastest to take the first green light at an intersection? Does it depend on the timing of the lights? Is it possible to get to work earlier by leaving later to avoid rush hour traffic? If there were half as many cars but they were twice as long, would traffic be better or worse? Would adding more roads relieve traffic by reducing the density or increase traffic by adding more intersections? Write down the proof and send it to a friend. Tear holes in their proofs. Find ways to falsify your own proofs. The only way to know if your foundations are solid is to kick the shit out of them and see if they fall down.</p>

<h1>Where to start</h1>

<p>The high school math syllabus across most of the western world was designed to create rocket scientists. Literally. Trigonometry, laws of motion and calculus gained pride of place during the space race over fears that Soviet schooling was producing superior rocket scientists. Rote calculation and memorisation were vital skills before the advent of computers. It&rsquo;s little surprise that students don&rsquo;t see maths as being relevant to their lives.</p>

<p>The programming world is little better. Any discussion of maths in programming quickly turns to lambda calculus, type theory or category theory. These topics may be interesting in their own right, but the ratio of time-invested to problem-solving-abilities-gained is less than compelling. Automata theory and complexity theory fare a little better but still don&rsquo;t inspire much.</p>

<p>It&rsquo;s easy to forget that programmers do more than program. The entire goal of programming is to solve problems in the real world and maths has been helping solve those problems for hundreds of years in every field. If you want to learn, study whatever you find interesting and apply it to whatever you enjoy doing.</p>

<p>Find a friend to study with. It&rsquo;s easy to get stuck or misunderstand something but the chances of you both making the same mistake is much lower. Talking it over with someone else is often the quickest way to make sense of a problem.</p>

<p>The transition from high school memorise-and-calculate to real problem solving is legendarily jarring. Suddenly there is not a correct path laid out for you but a bewildering swamp which can only be navigated by skilled reasoning. Learning to think and communicate <em>precisely</em> is useful everywhere but is especially vital when reasoning about complex algorithms or concurrent/distributed systems. <a href="http://www.amazon.com/How-Solve-Mathematical-Princeton-Science-ebook/dp/B0073X0IOA/">How To Solve It</a> is a classic text on tactics for solving hard problems in general. <a href="http://www.amazon.com/How-Prove-It-Structured-Approach-ebook/dp/B009XBOBL6">How To Prove It</a> deals more specifically with finding and expressing proofs and also covers the core constructs of mathematics (logic, numbers, sets, relations, functions).</p>

<p>Depending on how long ago you broke up with maths, you may need to brush up on the foundations. If you need to consciously think about basic algebra and logic you won&rsquo;t have enough brain power left over to handle more advanced material. Whenever you get stuck with something, head over to <a href="https://www.khanacademy.org/">Khan Academy</a> and make sure that you are completely fluent in the prerequisites. <a href="https://www.khanacademy.org/math/algebra">Algebra I</a> is especially important. Khan Academy focuses more on developing concrete intuition than on abstraction and rigour so it&rsquo;s a good complement to more theoretical sources.</p>

<h1>Where to go</h1>

<p>You won&rsquo;t live long enough to learn more than a tiny fraction of all there is to know. Ideas have costs in the time it takes to learn them, the amount of maintenance required to remember them and the amount of effort it takes to apply them. Prefer ideas that have a high power-to-cost ratio. Some of my personal favourites:</p>

<ul>
<li><p><strong>Randomised algorithms</strong> are often faster, simpler and easier to understand than the best deterministic algorithms. <a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.8277">The Power of Two Random Choices</a> gives a laundry list of important applications for one simple idea. <a href="www.amazon.com/Probability-Computing-Randomized-Algorithms-Probabilistic/dp/0521835402/">Probability and Computing</a> covers the entire field from the absolute basics of probability to the most sophisticated modern applications.</p></li>
<li><p><strong>Entropy</strong> is a very simple concept that governs compression and error-correcting codes, without which modern communications would be impossible. <a href="http://cm.bell-labs.com/cm/ms/what/shannonday/shannon1948.pdf">A Mathematical Theory of Communication</a> managed to lay the foundations for an entire field whilst still being readable by anyone with a basic knowledge of probability.</p></li>
<li><p><strong>The possible-worlds model</strong> is a powerful way to reason about distributed algorithms. <a href="www.cs.cornell.edu/home/halpern/papers/usingrak.pdf">Using Reasoning about Knowledge to Analyze Distributed Systems</a> introduces the model and shows how it simplifies reasoning about a variety of famous algorithms and impossibility proofs.</p></li>
<li><p><strong>Denotational design</strong> is a technique for designing composable abstractions. While it is commonly used, the only explicit description I have encountered is in <a href="http://conal.net/papers/type-class-morphisms/">Denotational design with type class morphisms</a>. For a real world example see <a href="http://www.gecode.org/papers/Tack_PhD_2009.pdf">Constraint Propagation &ndash; Models, Techniques, Implementation</a> which smoothly transitions from a simple mathematical model of finite-domain constraints to one of the faster constraint solvers in the world.</p></li>
</ul>


<p>Surf wikipedia. Get a sense the major areas of study in mathematics and what kinds of problems they deal with. That way, when you encounter a new and scary problem you at least know where to look for the solution.</p>

<p>Keep reading. Read textbooks. Read papers. Read <a href="http://terrytao.wordpress.com/career-advice/">blogs</a>. Read <a href="http://www.amazon.com/s/ref=nb_sb_noss_1?url=search-alias%3Daps&amp;field-keywords=martin+gardner">puzzle books</a>. Watch <a href="https://www.youtube.com/user/Vihart">videos</a>.</p>

<p>Play around. Don&rsquo;t limit yourself to learning &lsquo;official&rsquo; theory &ndash; discover and invent new ideas for yourself.</p>

<p>Teach somebody. The best way to really understand something is to try and explain it to someone else.</p>

<p>Enjoy yourself. Life is too short not to.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imperative thinking and the making of sandwiches]]></title>
    <link href="http://scattered-thoughts.net/blog/2014/07/21/imperative-thinking-and-the-making-of-sandwiches/"/>
    <updated>2014-07-21T14:37:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2014/07/21/imperative-thinking-and-the-making-of-sandwiches</id>
    <content type="html"><![CDATA[<p>People regularly tell me that imperative programming is the natural form of programming because &lsquo;people think imperatively&rsquo;. I can see where they are coming from. Why, just the other day I found myself saying, &ldquo;Hey Chris, I&rsquo;m hungry. I need you to walk into the kitchen, open the cupboard, take out a bag of bread, open the bag, remove a slice of bread, place it on a plate&hellip;&rdquo; Unfortunately, I hadn&rsquo;t specified where to find the plate so at this point Chris threw a null pointer exception and died.</p>

<!--more-->


<p>The truth is that people think in a variety of different ways in different situations. Most people resort to detailed imperative instructions only when describing complicated or unfamiliar tasks (or when explaining how to interact with a machine, which is itself indicative of how pervasive this mindset is in programming). Even then, the resulting communication is unlikely to resemble a perfectly sequential program and will be full of ambiguity, missing steps and contextual assumptions. Anyone who has ever tried to assemble Ikea furniture knows that clearly communicating or precisely following a series of instructions is actually quite difficult. Indeed, one of the hardest things that beginner programmers have to learn is how to break down a task into a series of simple instructions with no ambiguity. It takes years of practice before the process becomes natural, and meanwhile programming courses have a high failure rate.</p>

<p>If we are going to base the design of our tools on poorly thought-out metaphorical comparisons to making lunch then let&rsquo;s at least be realistic about it. &lsquo;Make me a ham sandwich, there is bread in the cupboard&rsquo; will indeed cause Chris to look in the cupboard. But if there is in fact no bread there, instead of exploding he will probably look elsewhere or ask for clarification. Rather than providing detailed instructions, I provide a goal (sandwich) and hints on how to execute it (try looking for bread in the cupboard). Further constraints are inferred from context and general knowledge (the sandwich should be less than one foot long, there should not be mayo all over the counter afterwards). Chris calculates a series of actions that will produce the desired result and modifies that plan as new information and constraints come to light (no bread in the cupboard).</p>

<p>The reason for communicating in this way is that <em>I don&rsquo;t care</em> exactly how the sandwich is made, so long as it is done neatly and quickly. Communicating my exact intent makes the resulting &lsquo;program&rsquo; simpler and more flexible. I may give additional hints and restrictions when they necessary to speed up the process and Chris may ask for clarification if at any point he is unable to plan a path to the goal, but I never have to resort to a full imperative description of the problem.</p>

<p>Today&rsquo;s computers don&rsquo;t have enough contextual knowledge to make me a sandwich but there are lots of domains where this approach excels. The classic example is SQL databases. Rather than specifying exact data-structures and operations, the user specifies a high-level schema and sends descriptions of queries. It is the responsibility of the database to choose storage types, manage concurrent changes and generate query plans. It makes these decisions based on cost models, runtime information and constrained search (e.g., postgres uses a genetic search algorithm to choose efficient plans for large queries). If the database makes bad decisions, the user can help it out by adding size hints, specifying indexes and overriding query plans. So long as the process of turning intent into plans is transparent and interactive there is no need to invoke a <a href="http://c2.com/cgi/wiki?SufficientlySmartCompiler">sufficiently smart compiler</a>. A dumb compiler can do the easy but tedious legwork and the human can supervise and correct mistakes. This saves programmer time, makes the intent of the resulting program easier to understand (because it is not cluttered with irrelevant details) and makes it easier to change parts of the system independently (eg adding an index does not require rewriting all of your queries). There is a reason why SQL databases became a standard storage mechanism &ndash; this model of programming works incredibly well in this domain.</p>

<p>Indeed, the most painful part of using an SQL database is the interface back to purely imperative programming. The <a href="http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch">Object-Relational mismatch</a> is often seen as a failure of SQL databases. But consider the relative strengths and learning curves of the two technologies. SQL is often still used for its original goal: enabling non-programmers to mine data. The database handles choice of serialization protocol, data structures for storage and indexing, query algorithms and manages concurrency. For the majority of applications it makes good enough decisions that the user never needs to provide any hints beyond index choice. Imperative programming, on the other hand, requires the user to handle all of these decisions and requires years of practice before the user can reliably build the same kinds of applications. In that light, it is interesting that the popular trend is towards making databases more like imperative languages (NoSQL, object databases) rather than making programming look more like SQL.</p>

<p>To be clear, SQL is a mess. I claim that it is successful <em>despite</em> its many flaws because of the power of the core ideas:</p>

<ul>
<li>separate goals from plans</li>
<li>separate logical data models from physical data-structures</li>
<li>automatically handle the translation from goals to plans and from logical to physical models</li>
<li>make the translation transparent and allow the user to provide hints or override sections</li>
</ul>


<p>These ideas allow the programming environment to capture the correct level of detail (&lsquo;make me a sandwich&rsquo; rather than &lsquo;go to the kitchen, open the cupboard&hellip;&rsquo;). This separates meaning from optimisation giving both the user and the compiler more leeway to change the operational details of the program without modifying the specification. The transparency allows us to build this without requiring a SufficientlySmartCompiler™.</p>

<p>This model is well understood in the database world and is the subject of decades of research. Unfortunately the database world and the programming language world rarely interact and so the results are mostly confined to data management systems and rarely extend to general purpose programming, with the possible exception of the <a href="http://www.infoq.com/presentations/Datalog">recent revival of the datalog family</a>.</p>

<p>So what would a general purpose language look like if it took these ideas to heart? Our current prototype takes inspiration from <a href="http://shaffner.us/cs/papers/tarpit.pdf">Out of the Tar Pit</a> and <a href="http://www.vpri.org/pdf/m2009001_prog_as.pdf">Programming as Planning</a>, using a <a href="http://en.wikipedia.org/wiki/Temporal_logic">temporal logic</a> language to write specifications and a variety of extensible constraint solvers to execute plans. That may sound complicated, but the interface for most users looks like a cross between <a href="https://ifttt.com/">IFTTT</a> and a simplified version of SQL. Like SQL, the compiler is able to make good decisions for simple programs so the user doesn&rsquo;t need to think about data structures, algorithms or concurrency. We haven&rsquo;t yet begun to work on surfacing and altering its decisions in the cases where it needs help, but I&rsquo;m hopeful that by bootstrapping the compiler and by providing <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0CB0QFjAA&amp;url=http%3A%2F%2Fdb.cis.upenn.edu%2FDL%2Fwhywhere.pdf&amp;ei=spTJU5jPAcWTyATT8IHgBA&amp;usg=AFQjCNHovRJYd3vBwhtxze_EuL2w6zIT_w&amp;sig2=4oKCgSECEnZnCOB98Tk0Xw&amp;bvm=bv.71198958,d.aWw">data provenance</a> in the IDE we can go a long way towards easing the learning curve on that front too.</p>

<p>There is a lot of hard work still to go but we have finally have the basic core of our system nailed down and have enough working prototypes to be confident that this approach is compelling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pain we forgot]]></title>
    <link href="http://scattered-thoughts.net/blog/2014/05/17/pain-we-forgot/"/>
    <updated>2014-05-17T09:54:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2014/05/17/pain-we-forgot</id>
    <content type="html"><![CDATA[<p>Much of the pain in programming is taken for granted. After years of repetition it fades into the background and is forgotten. The first step in making programming easier is to be concious of what makes it hard. So let&rsquo;s put ourselves in the shoes of a smart but inexperienced end user trying to build, test and maintain a simple application.</p>

<!--more-->


<p>Anon the intern is charged with managing lunch orders and quickly realises that their job could be done by a computer: Every day at 1000, send each employee an email with a link to a form where they can choose what they want for lunch. At 1200, gather up the replies and email the list to the catering company. At the end of every month, tally up what each person owes and send the list to accounting. While this a simple program, it covers all the basics: data input, validation, error handling, calculation, presentation, communication, reactivity, scheduling, deployment etc. There are probably dedicated apps that cover this particular example but we are more concerned with how an end-user would solve this kind of problem in general and the difficulties they will encounter along the way.</p>

<p>A lot of the problems we will encounter seem unavoidable &ndash; they are forced on us by outside constraints. Most of these constraints though are the product not of deliberate choices but of historical accident. We still program like it&rsquo;s 1960 because there are powerful path dependencies that incentivise pretending your space age computing machine is actually an 80 character tty. We are trapped in a local maximum.</p>

<p>One might also argue that these tools are simple enough once you learn to use them. I would only point out that, emperically, that bar is too high. Despite the clear benefits, the vast majority of the world was chosen to remain illiterate. Even tools for which there is a clear need (eg version control) have largely failed to make a dent. Clearly there is a need for a less hostile programming environment.</p>

<p>It is tempting to believe that this is the best we can do and that programming is naturally this complex. But as we work through our lunch app, consider how little of the work we have to do actually relates to the problem of specifying the application.</p>

<hr />

<h1>Getting started</h1>

<p>First we need to get a development environment running. Let&rsquo;s try clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>lein new lunch_app
</span><span class='line'><span class="nb">cd </span>lunch_app
</span><span class='line'>mkdir resources
</span><span class='line'>touch resources/index.html
</span><span class='line'>LightTable resources/index.html <span class="c"># insert script tag for web repl</span>
</span><span class='line'>firefox resources/index.html
</span><span class='line'>LightTable clj/lunch_app/core.clj <span class="c"># server side, fire up compiler, connect to repl</span>
</span><span class='line'>LightTable cljs/lunch_app/core.cljs <span class="c"># client side, connect to web repl</span>
</span></code></pre></td></tr></table></div></figure>


<p>At this point you have already lost 99% of the population and we haven&rsquo;t even touched on css or templates yet. Worse, none of this was discoverable. I happen to already know how to setup a simple client-server web app so all these steps seem obvious to me. But Anon the intern needs to be able to open up Programming™ and click &lsquo;New Web Form&rsquo;. Intellij does a reasonable job on this front &ndash; you can start a new web project, compile and open the result in a browser in a few button clicks. But in most environments you need a tutorial just to start a new project.</p>

<h1>Finding help</h1>

<p>So Anon is now staring at a blinking cursor on a blank editor page. What next? How does one go about making a web form, or send a email? For common tasks google will probably find you entire code samples or at the very least some javadocs. The samples will be missing lots of implicit information such as how to install the necessary libraries and how to deal with missing dependencies and version conflicts. Transcribing and modifying the examples may lead to bugs that suck up time. It&rsquo;s not terrible, mostly thanks to sites like stackoverflow, but it&rsquo;s still a lot of unnecessary distractions from the task at hand.</p>

<p>I want to just type &lsquo;email&rsquo; and see a list of functions and libraries relating to email. If I select a function from autocomplete, its dependencies should be automatically added to the project without any fuss. Missing dependencies or version conflicts should be presented alongside suggestions for resolution (click here to choose version A). <a href="http://blogs.msdn.com/b/visualstudio/archive/2014/02/17/introducing-bing-code-search-for-c.aspx">Bing Code Search</a> takes this idea even further and autocompletes code for common tasks.</p>

<h1>Writing code</h1>

<p>Even for experts, programming is an exploratory process. We experiment with libraries, run through examples and iteratively build up features. One of the most painful lessons beginners have to learn is just how often everyone is wrong about everything. Tightening the feedback loop between writing code and seeing the results reduces the damage caused by wrong assumptions, lightens the cognitive load of tracking what should be happening and helps build accurate mental models of the system. The latter is especially important for beginners who often suffer from miscomprehensions about even the basic semantics of the language. Unfortunately, the most you are likely get is automatically refreshing your browser. Maybe a REPL if you are lucky.</p>

<p>Imagine a spreadsheet where every time you change something you must open a terminal, run the compiler and scan through the cell / value pairs in the printout to see the effects of your change. We wouldn&rsquo;t put up with UX that appalling in any other tool but somehow that is still the state of the art for programming tools. I suspect a lot of the blame lies in our failure to find a model for GUI tools that is as flexible and composable as plain text. I see a lot of potential in Paul Chiusano&rsquo;s ideas for <a href="http://pchiusano.blogspot.com/2013/05/the-future-of-software-end-of-apps-and.html">killing the application</a> and in Eskil Steenburgs <a href="https://www.youtube.com/watch?feature=player_detailpage&amp;v=f90R2taD1WQ#t=1837">Verse</a>.</p>

<p>Light Table at least gives you <a href="https://www.youtube.com/watch?v=gtXpOD6jFls">inline eval</a>, <a href="https://www.youtube.com/watch?v=d8-b6QEN-rk">watches</a> and the <a href="https://www.youtube.com/watch?v=YY6B9EHbH24">instarepl</a>. This type of interaction is taken further by ideas like <a href="http://gbracha.blogspot.com/2012/11/debug-mode-is-only-mode.html">Debug Mode is the Only Mode</a> and <a href="http://www.subtext-lang.org/OOPSLA04.pdf">Example Centric Programming</a>). Instead of having a separate editor, compiler, repl, debugger etc you develop everything by editing code in the debugger. It is a similar idea to JIT compilers &ndash; the IDE has more information available at runtime then at compile time so it can make better decisions and provide better feedback (eg by generating example inputs and outputs as you write a function).</p>

<p>Plain text is also very limiting. Language is very good for conveying meaning but not so great for displaying data. Being able to quickly throw up graphs and diagrams (like in <a href="https://github.com/ztellman/rhizome">rhizome</a>, <a href="https://github.com/ztellman/automat">automat</a> or <a href="https://github.com/ztellman/lamina/wiki/Channels">lamina</a>) is incredibly useful. Light Table&rsquo;s <a href="http://www.chris-granger.com/images/040/ipygraphs.png">inline graphs</a> are a start but we haven&rsquo;t otherwise made much use of visualisation. First person to implement inline graphviz gets a cookie.</p>

<h1>Running code</h1>

<p>Surprisingly, one of the most common difficulties we have heard from beginners is just running code. Even if we were to hand Anon the entire lunch_app source code they would likely still struggle to actually use it. They have to install dependencies, compile code, start servers and open ports. At each step the errors are difficult to diagnose and time-consuming to fix. The tools that are intended to fix this are often even worse themselves (every time I write a blog post in octopress I find rvm has somehow broken again). IDEs like Intellij and Visual Studio do a reasonable job of standardising the build process and capturing dependencies so that it is usually possible to import a project and just hit run, but that only goes as far as development. For deployment we have tools like Docker which make deployment highly repeatable but don&rsquo;t help much with capturing the process in the first place. None of these really help Anon the intern deploy lunch_app.</p>

<p>The lunch app is going to need scheduling too, and error logging and monitoring. Anon needs to be alerted if the emails don&rsquo;t go out or if there are no reponses. Setting up even the simplest logging, monitoring and restarting is a hassle even for professional programmers.</p>

<p>Wolfram&rsquo;s Language <a href="https://www.wolfram.com/universal-deployment-system/">workflow</a> is pretty close to ideal. You work in a notebook where code runs and updates instantly with no manual compile step. Deploying to a cloud server is just a single function call which automatically collects code and dependencies and returns a url where your program is now running. No need to think about files or libraries, no project files, no build artefacts, no messing about setting up servers and opening ports.</p>

<p>From there it doesn&rsquo;t take much imagination to add easy task scheduling and an error logger that emails Anon when something goes wrong. None of this requires giving up control either. You could just as easily replace &lsquo;cloud server&rsquo; with &lsquo;departmental server&rsquo; or &lsquo;little black box that came with our internet&rsquo;. The important point is that there are sensible defaults for deployment and that it is &lsquo;batteries included&rsquo; in the language or IDE.</p>

<h1>What?</h1>

<p>The simplest question we could ask about our application is &lsquo;what is the current state&rsquo;. Bizaarely, very few programming environments give you any help on this front. Many programmers get by with nothing but print statements. If you are lucky you may have a debugger or watches, but you still end up looking at your application through a keyhole. You have to actively insert instrumentation by hand to view the state of each tiny part of the application. If you want to modify that state you have to mentally work backwards and construct the correct piece of code to find and change the variable that you are looking at. It may not even have a name that is accessible from the repl (eg a variable in an anonymous closure). Viewing and modifying the state of the application should be a fundamental interaction and yet it&rsquo;s made unreasonably difficult by our languages and tools.</p>

<p>Compare this to a tool like Excel or <a href="http://www.youtube.com/watch?v=kvFDV1oM-ZA">Django Admin</a> where <em>all</em> the data is laid out for easy browsing without any active effort from the user and can be <em>directly</em> modified just by clicking and typing. The tooling itself isn&rsquo;t difficult but it requires rethinking the way we manage state in programming languages. All mainstream languages, regardless of paradigm, encourage <a href="http://scattered-thoughts.net/blog/2014/02/17/local-state-is-harmful/">anonymous local state</a> which can&rsquo;t be easily observed and modified.</p>

<p>Once we have managed state, whether using a relational model like <a href="http://bloom-lang.net/">Bloom</a> or more traditional functional data-structures like <a href="http://infoscience.epfl.ch/record/136776">Opis</a>, we can easily record history too. Tools like <a href="http://chrononsystems.com/products/chronon-time-travelling-debugger">time travelling debuggers</a> that require huge engineering effort in traditional languages become trivial when you can cheaply record or reconstruct the past. Reproducing bugs is easier when you can just snapshot your history and mail it to the developer. Bloom and Opis are also both able to determine dataflow topologies from source code so when stepping into an unfamiliar project you can quickly get a visual overview of how the various components communicate (examples are buried <a href="http://db.cs.berkeley.edu/papers/cidr11-bloom.pdf">here</a> and <a href="http://infoscience.epfl.ch/record/136776/files/DagandETAL09Opis.pdf">here</a>).</p>

<h1>Why?</h1>

<p>Traditional debuggers focus entirely on the <em>what</em> &ndash; walking through a narrow slice of state on step at a time. But when debugging the question one usually starts with is <em>why</em>? Why are the lunch options in the wrong order? Why didn&rsquo;t the lunch email go out? Why is everyones bill for the month zero? These questions typically involve reasoning backwards from effect to cause whereas debuggers walk you forward from cause to effect. The result is that debugging consists mostly not of finding the problem but manually walking backwards along the chain of causes by setting up isolated test cases and repeatedly rerunning them under the debugger.</p>

<p><a href="http://blog.brackets.io/2013/08/28/theseus-javascript-debugger-for-chrome-and-nodejs/">Theseus</a> improves on this slightly by capturing arguments at the entrace to each event callback, so that you don&rsquo;t have to repeatedly rerun. Ko and Myer&rsquo;s <a href="http://repository.cmu.edu/cgi/viewcontent.cgi?article=1165&amp;context=hcii">causal debugger</a> explicitly answers the questions <em>why</em> and <em>why not</em> by tracing the tree of causes for each state change, so that the process of walking backwards from effect to cause is entirely automated and you can just focus on figuring out where things went wrong.</p>

<p>The problem gets even worse with scale. Debugging by following control flow works poorly in large systems where what really matters is <em>data flow</em>. Answering questions like &lsquo;why do orders sometimes get lost&rsquo; requires tracing through an enourmous graph, one which is not even recorded in most systems and instead has to be inferred from logs, like piecing together ancient civilisations from broken pottery. <a href="http://db.cs.berkeley.edu/papers/eurosys10-boom.pdf">BOOM analytics</a> deals with this by reflecting all data, from error logs and persistent data to message queues and profiling data, into relational tables that are made available to overlog &ndash; the same distributed query language that runs the rest of the system. This means you can directly run queries over the causality graph, such as &lsquo;for each order that was entered into the system but not completed, give me a list of every message was linked to that order by some chain of rules&rsquo;. Since the recording of this data was itself governed by overlog rules you can switch on detailed logging at runtime for specific kinds of data eg &lsquo;record all messages concerning order 197 originating from cluster C and forward them to me&rsquo;.</p>

<h1>Change</h1>

<p>Outside of the software world, version control and collaboration software is limited to saving lunch_app.v07 and attaching it to an email. Collaborating on a single project is difficult and slow. The standard tools of the trade for programmers (git, mercurial etc) are vastly more powerful and solve a pressing problem but present an interface that <a href="http://steveko.wordpress.com/2012/02/24/10-things-i-hate-about-git/">baffles and frustrates many users</a>. The underlying model is elegant and powerful but even the graphical interfaces require a significant investment of time and effort to understand.</p>

<p>What Anon needs is somewhere between <a href="http://www.emacswiki.org/emacs/UndoTree">undo-tree</a> (without the ascii art) and <a href="http://etherpad.org/">etherpad</a>. Changes should be automatically recorded and (optionally) retroactively tagged with commit messages. Real-time collaboration should be as simple as clicking on a coworkers face. Undoing changes and checking out different versions should just be a matter of moving around on the <a href="https://github.com/blog/39-say-hello-to-the-network-graph-visualizer">commit graph</a>. Dragging a piece of code out of the editor should produce a link to the VCS page for that code. If the editor understands the structure of the code we even can track semantic changes to individual units of code (eg rename function, reorder expressions) rather than diffing text in a file, making both automatic and manual merges easier since we have a better record of the intent of the change.</p>

<p>Similary, when Anon 2 the accountant wants to modify their client-side copy of the lunch form to remember their favourite lunches it should be a simple process. No hunting down and recompiling system binaries, no installing greasemonkey scripts from the filesystem. Just click to open the source, modify to your satisfaction, click to save. I&rsquo;ve never seen anything come close to this basic interaction. The <a href="http://blog.printf.net/articles/2006/10/29/the-view-source-key/">OLPC view source button</a> promised exactly this experience but as far as I know it never materialised (it certainly didn&rsquo;t work on mine).</p>

<h1>Learning</h1>

<p>Programming tools generally pay very little attention to producing helpful error messages (with <a href="http://cs.brown.edu/~sk/Publications/Papers/Published/mfk-measur-effect-error-msg-novice-sigcse/paper.pdf">one</a> or <a href="http://research.microsoft.com/pubs/64590/helium.pdf">two</a> exceptions). There is a modest amount of <a href="http://www.amazon.com/Man-Who-Lied-His-Laptop-ebook/dp/B003YUC7BI/ref=sr_1_1?ie=UTF8&amp;qid=1400099030&amp;sr=8-1&amp;keywords=man+who+lied+to+his+laptop">evidence</a> that people interact with computers as if they were people. Many of the results of this research are suprising and counter-intuitive eg <a href="http://faculty.washington.edu/ajko/papers/Lee2011Gidget.pdf">personifying the compiler</a> can improve learning rates in students. Given that, do you really want to spend lots of time with the kind of person who just repeatedly shouts &lsquo;cannot call method undefined of undefined!&rsquo; in your face without so much as hinting how you might fix the problem or where you might start looking?</p>

<p>Our programming environments are absurdly hostile. Interfaces either <a href="http://www.suggestsoft.com/images/quest-software/comparerocket-for-visual-studio.gif">overwhelm with detail</a> or <a href="http://i.stack.imgur.com/VqPMv.png">hide everything</a>. Most actions cannot be undone (eg changing a variable, defining a function, installing a library). Runtimes default to exiting on uncaught exceptions, throwing away all the context that would be useful for solving the problem and forcing the user to try to recreate the crashing state. When any action can lead to confusing breakage and ruined work, inexperienced users suffer from fear and paralysis and an unwillingness to experiment. This cripples their ability to learn.</p>

<p>Error messages should at the very least identify what might have caused the error and preferably offer options for fixing it. Intellij, for example, will highlight spelling mistakes and offer to correct them (&ldquo;did you mean&hellip;&rdquo;). Good end user applications will link common errors to FAQs. Suggestions don&rsquo;t need to be perfect, just accurate. Everyone hated Clippy because his advice was useless and repetitive and lacked context. The golden rule is if you don&rsquo;t have something useful to say, don&rsquo;t say nothing at all. One ambitious project (ref?) crowd-sourced examples of causes of and solutions to type-checking errors. Large-scale data collection and testing may end up being the best path to providing helpful feedback.</p>

<p>Environments also need to be more proactive. Uncaught errors should drop the user into the debugger where they can <a href="http://www.gigamonkeys.com/book/beyond-exception-handling-conditions-and-restarts.html">edit and continue</a>. Editors can spot common mistakes and suggest corrections (Intellij is pretty good at this, as is <a href="https://github.com/jonase/kibit">kibit</a>, but many people are still working with editors that don&rsquo;t even warn them of typos or shadowed variables). Profilers can heuristically explore bottlenecks and suggest solutions (eg if foo was indexed this query would run 10x faster). Rather than rely on users to create their own tests we can prompt them for examples and invariant properties and <a href="www.scs.stanford.edu/11au-cs240h/notes/testing-slides.html">search for counter-examples</a>. <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;uact=8&amp;ved=0CD0QFjAC&amp;url=http%3A%2F%2Finfoscience.epfl.ch%2Frecord%2F136776&amp;ei=gNpzU7yeKMTesASLr4KoCA&amp;usg=AFQjCNGyqXOAavdVfGxGuBFZbTzobRmXtQ&amp;sig2=jvF_qeyNTyCOffdJkC-twA&amp;bvm=bv.66917471,d.cWc">Opis</a> comes equipped with a profiler that automatically estimates the asymptotic complexity of each function in the model and a finite-state model checker that can prove invariants always hold by efficiently and exhaustively checking every possible state. Bloom features a <a href="http://db.cs.berkeley.edu/papers/dbtest12-bloom.pdf">generative testing framework</a> that uses an SMT solver to efficiently explore the space of possible and a <a href="http://www.bloom-lang.net/calm/">static analysis pass</a> that warns of missed coordination points in distributed programs. Does your IDE even run your unit tests for you?</p>

<p>Finally, environments can&rsquo;t be black boxes. Beginners need a simple experience but if they are to become experts they need to be able to shed the training wheels and open the hood. Many attempts at end-user programming failed because they assumed the user was stupid and so wrapped everything in cotton wool. Whenever we provide a simplified experience, there should be an easy way to crack it open and see how it works. Nothing should be magic forever. Ensure that the users curiousity is never frustrated and they won&rsquo;t need teaching for long.</p>

<hr />

<p>Some of the things I have described are just a matter of paying attention to the details. Others require doing things very differently. The key parts of our plan for Aurora are:</p>

<ul>
<li>storing code in a networked database with version control and realtime sync</li>
<li>a <a href="http://en.wikipedia.org/wiki/Structure_editor">structured editor</a> to enable rich ASTs with unique UUIDs</li>
<li>managing environments declaratively so that evaluating code is always safe</li>
<li>a uniform (logical) data model where every piece of state is globally addressable</li>
<li>a model for change that tracks history and causality</li>
<li>a powerful query language that can be used for querying code, runtime state, causal graphs, profiling data etc</li>
<li>composable gui tools with transparent guts</li>
<li>a smooth interface to the old world so we don&rsquo;t end up sharing a grave with smalltalk</li>
</ul>


<p>We will dive into these in more detail in the coming months.</p>

<p>None of this will be at all easy, but it&rsquo;s no harder than continuing what we are doing now and much of the groundwork has already been laid if you know where to look. If one thing is certain, it is that the future is not 80 characters wide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local state is harmful]]></title>
    <link href="http://scattered-thoughts.net/blog/2014/02/17/local-state-is-harmful/"/>
    <updated>2014-02-17T05:02:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2014/02/17/local-state-is-harmful</id>
    <content type="html"><![CDATA[<p>Don&rsquo;t lynch me just yet :)</p>

<!--more-->


<p>Picture a tradiional webapp. We have a number of stateless workers connected to a stateful, relational database. This is a setup with a number of excellent properties:</p>

<ul>
<li>All state can be queried using a uniform api &ndash; SQL. This enables flexible ad-hoc exploration of the application state as well as generic UIs like <a href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/">django admin</a></li>
<li>Every item of state has a unique and predictable name by which it can be identified &ndash; a unique key in the table.</li>
<li>Access to state can be restricted and controlled. Transactions prevent different workers from interfering with each other. ACLs allow giving individual workers access to only the information they need to limit the scope of mistakes.</li>
<li>Changes to state can be monitored. Tailing the transaction log is an effective way to stream to a backup server or to debug errors that occurred in production. One can reconstuct the state of the database at any time.</li>
<li>State is separate from code. You can change client code, rename all your classes or restart workers on the fly and the state in the database will be unharmed.</li>
</ul>


<p>The database state is also pervasive, mutable and <em>global</em>.</p>

<p>Now let&rsquo;s zoom in and look at our imperative, object-oriented workers:</p>

<ul>
<li>State is encapuslated in objects and hidden behind an ad-hoc collection of methods.</li>
<li>Objects are effectively named only by their location in the (cyclic, directed) object graph or their position in memory.</li>
<li>Access to state can be restricted and controlled through encapsulation. Concurrent modifications are a constant source of bugs. Access control is adhoc and transitive &ndash; if you can walk the object graph to an object you can access it.</li>
<li>Changes to state are usually monitored via adhoc methods such as manually inserting debug statements. Approximating history by watching debug statements and reconstructing state in ones head is the normal method of debugging.</li>
<li>State is entangled with code. Portable serialization is difficult. Live-coding works to some extent but requires reasoning about the interaction of state and code (eg in js redefining a function does not modify old instances that may still be hanging around in data structures or in callbacks)</li>
</ul>


<p>Functional programmers need not look so smug at this point. The Haskell/OCaml family struggles to redefine types at runtime or handle live data migrations (the declaration of a nominal type is a side-effect in a live language). Clojure does better on these points but still gets burned by nominal types (eg extend a deftype/defrecord and the reeval the definition) and more generally by treating the definition of new code as mutation of state (which has to be papered over by <a href="https://github.com/clojure/tools.namespace/">tools.namespace</a>).</p>

<p>Why are these points important? We spend most of our time not writing code but <em>reasoning about code</em>, whether hunting for bugs, refactoring old code or trying to extend a module. We end up with questions like:</p>

<ul>
<li>When did this state change?</li>
<li>What caused it to change?</li>
<li>Did this invariant ever break?</li>
<li>How did this output get here?</li>
</ul>


<p>How do we answer these questions?</p>

<p>In the database we have a transaction log containing for each transaction: the queries involved, the commit time, the client name etc. We can write code that specifies the condition we are interested in via an sql query, locates the relevant transactions by running through the log and then recreates the state of the database at that point. This works even if the error happened elsewhere &ndash; just have the user ship you their transaction log.</p>

<p>In the worker, we have two familiar workhorses:</p>

<ul>
<li>Manually add print statements, recompile the code, try to recreate the conditions we are interested in and then reconstruct the causality by reading the printed statements</li>
<li>Add a breakpoint in the debugger, try to recreate the conditions we are interested in and then step through the code line by line</li>
</ul>


<p>What these two have in common is that they are both achingly <em>manual</em>. There is no easy way to automate the process. There are no libraries full of debugging strategies that you can deploy. The questions we have are about time and causality but our current tools restrict us to looking at tiny slices of space (print statements) or time (debuggers) and offer no way to automate our actions.</p>

<p>I propose that if we were to manage state more like a database and less like a traditional imperative language then understanding and debugging programs would become easier. As is traditional, I aim to convince the reader by the use of an unrealistically simple example.</p>

<h2>Counting sheep</h2>

<p>As everyone knows the main purpose of advanced technology has always been to help us <a href="http://sl4.org/wiki/TheSimpleTruth">count our sheep</a>. At the dawn of time this was very simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nb">count </span><span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">inc!</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count + </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">dec!</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count - </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-counter</span> <span class="p">[</span><span class="nv">port</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">socket</span> <span class="p">(</span><span class="nf">open</span> <span class="nv">port</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nf">receive-message</span> <span class="nv">socket</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-in</span> <span class="p">(</span><span class="nf">inc!</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-out</span> <span class="p">(</span><span class="nf">dec!</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1081</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But as civilisation advanced so too did the demands on technology. With newfound riches came multiple pens of sheep. People soon realised that the trusty old global variable had a crucial flaw &ndash; it was not reentrant. Having been burned by mutable state they decided to keep it under lock and guard.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">make-counter</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nb">count </span><span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:inc!</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count + </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>     <span class="ss">:dec!</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count - </span><span class="mi">1</span><span class="p">)}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-counter</span> <span class="p">[</span><span class="nv">port</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">socket</span> <span class="p">(</span><span class="nf">open</span> <span class="nv">port</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">inc!</span> <span class="nv">dec!</span><span class="p">]}</span> <span class="p">(</span><span class="nf">make-counter</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nf">receive-message</span> <span class="nv">socket</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-in</span> <span class="p">(</span><span class="nf">inc!</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-out</span> <span class="p">(</span><span class="nf">dec!</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1081</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1082</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later programmers were a more trusting bunch and left their data unprotected, but still hidden.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-counter</span> <span class="p">[</span><span class="nv">port</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">socket</span> <span class="p">(</span><span class="nf">open</span> <span class="nv">port</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">count </span><span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nf">receive-message</span> <span class="nv">socket</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-in</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count + </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-out</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count - </span><span class="mi">1</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1081</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1082</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It took thousands of years of progress before anyone asked the crucial question: &ldquo;So how many sheep do we actually have?&rdquo;. The guardian of the count was reluctant to give up this delicate information, having been lectured all its life about the importance of data hiding. The only solution was torture.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-counter</span> <span class="p">[</span><span class="nv">port</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">socket</span> <span class="p">(</span><span class="nf">open</span> <span class="nv">port</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">count </span><span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nf">receive-message</span> <span class="nv">socket</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-in</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count + </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-out</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count - </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:how-many-sheep</span> <span class="p">(</span><span class="nf">send-message</span> <span class="nv">socket</span> <span class="p">[</span><span class="err">@</span><span class="nb">count </span><span class="ss">:sheep</span><span class="p">])))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1081</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1082</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In erlang they still hold to these cruel and brutal traditions.</p>

<p>Let&rsquo;s try something different. We can separate state from code and allow uniform access to all application state. We just have to carefully control access to that state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="c1">;; in the code</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-counter</span> <span class="p">[</span><span class="nv">port</span> <span class="nv">count</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">socket</span> <span class="p">(</span><span class="nf">open</span> <span class="nv">port</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nf">receive-message</span> <span class="nv">socket</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-in</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count + </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-out</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count - </span><span class="mi">1</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; in the repl</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">state</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:count-a</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="ss">:count-b</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1081</span> <span class="p">(</span><span class="nf">state</span> <span class="ss">:count-a</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1082</span> <span class="p">(</span><span class="nf">state</span> <span class="ss">:count-b</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="p">(</span><span class="nf">state</span> <span class="ss">:count-a</span><span class="p">)</span> <span class="c1">;; check the number of sheep</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1083</span> <span class="p">(</span><span class="nf">state</span> <span class="ss">:count-a</span><span class="p">))</span> <span class="c1">;; share sheep with 1081</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a kind of pseudo-global state. We can easily examine any application state in the repl but functions can only modify state this is passed to them directly. All we need now is to monitor changes to the state.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-counter</span> <span class="p">[</span><span class="nv">port</span> <span class="nv">count</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">socket</span> <span class="p">(</span><span class="nf">open</span> <span class="nv">port</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nf">receive-message</span> <span class="nv">socket</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-in</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count + </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="ss">:sheep-out</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nb">count - </span><span class="mi">1</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">state</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:count-a</span> <span class="mi">0</span>
</span><span class='line'>         <span class="ss">:count-b</span> <span class="mi">0</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1081</span> <span class="p">(</span><span class="nf">subatom</span> <span class="nv">state</span> <span class="ss">:count-a</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">run-counter</span> <span class="mi">1082</span> <span class="p">(</span><span class="nf">subatom</span> <span class="nv">state</span> <span class="ss">:count-b</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>subatom</code> is not a clojure function, but it shows up regularly in clojure libraries (eg my <a href="https://github.com/jamii/bigatom">bigatom</a> is a simple, self-contained implementation). All it does is create a view on the original atom. This approximates a mutable tree while still allowing immutable snapshots.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">x</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:foo</span> <span class="p">{</span><span class="ss">:bar</span> <span class="mi">0</span><span class="p">}}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">y</span> <span class="p">(</span><span class="nf">subatom</span> <span class="nv">x</span> <span class="ss">:foo</span> <span class="ss">:bar</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nv">y</span> <span class="c1">;; =&gt; 0</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">swap!</span> <span class="nv">y</span> <span class="nv">inc</span><span class="p">)</span> <span class="c1">;; =&gt; 1</span>
</span><span class='line'>
</span><span class='line'><span class="err">@</span><span class="nv">x</span> <span class="c1">;; =&gt; {:foo {:bar 1}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can record changes and explore them programatically. Suppose that sheep pen 1082 is actually inside sheep pen 1081. If everything is working correctly, we should have the invariant <code>(&gt; (:count-a @state) (:count-b @state))</code>. Most of the time this is indeed the case, but once in a blue moon an unhappy customer reports that the invariant is broken.</p>

<p>Luckily, as modern programmers we can simply query the clients state history to find out what happened.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">history</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">atom</span> <span class="p">[[(</span><span class="nf">time</span><span class="p">)</span> <span class="err">@</span><span class="nv">state</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">add-watch</span> <span class="nv">state</span> <span class="nv">history</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">_</span> <span class="nv">_</span> <span class="nv">new-state</span><span class="p">]</span> <span class="p">(</span><span class="nf">swap!</span> <span class="nv">history</span> <span class="nb">conj </span><span class="p">[(</span><span class="nf">time</span><span class="p">)</span> <span class="nv">new-state</span><span class="p">])))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">drop-while</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nb">time </span><span class="nv">state</span><span class="p">]]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="ss">:count-a</span> <span class="nv">state</span><span class="p">)</span> <span class="p">(</span><span class="ss">:count-b</span> <span class="nv">state</span><span class="p">)))</span>
</span><span class='line'>  <span class="err">@</span><span class="nv">history</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a trivial example, but this kind of ability to debug programmatically is potentially very valuable.</p>

<h2>Real world use</h2>

<p>Removing hidden state does not have to be a binary change. The more you move in that direction the more of the benefits you will gain.</p>

<p>The project that convinced me was a prototype betting exchange written in clojure. Although I relied on mutable collections (and thus lost the ablity to record history easily) I used <a href="https://github.com/prismatic/plumbing">Graph</a> to wire components together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">log</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:stream</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">log-file</span><span class="p">]</span> <span class="p">(</span><span class="nf">java.io.FileOutputStream.</span> <span class="nv">log-file</span><span class="p">))</span>
</span><span class='line'>   <span class="ss">:channel</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">stream</span><span class="p">]</span> <span class="p">(</span><span class="nf">.getChannel</span> <span class="nv">stream</span><span class="p">))</span>
</span><span class='line'>   <span class="ss">:writer</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">stream</span><span class="p">]</span> <span class="p">(</span><span class="nf">clojure.java.io/writer</span> <span class="nv">stream</span><span class="p">))})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">server</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:log</span> <span class="nv">log</span>
</span><span class='line'>   <span class="ss">:queue</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">batch-size</span><span class="p">]</span> <span class="p">(</span><span class="nf">java.util.concurrent.ArrayBlockingQueue.</span> <span class="nv">batch-size</span><span class="p">))</span>
</span><span class='line'>   <span class="ss">:server</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">queue</span> <span class="nv">frame</span> <span class="nv">port</span><span class="p">]</span> <span class="p">(</span><span class="nf">network/receive-events</span> <span class="nv">queue</span> <span class="nv">frame</span> <span class="nv">port</span><span class="p">))</span>
</span><span class='line'>   <span class="ss">:state</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">init-state</span><span class="p">]</span> <span class="p">(</span><span class="nf">atom</span> <span class="nv">init-state</span><span class="p">))</span>
</span><span class='line'>   <span class="ss">:persistor</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">state</span> <span class="nv">queue</span> <span class="p">[</span><span class="ss">:log</span> <span class="nv">channel</span> <span class="nv">writer</span><span class="p">]</span> <span class="nv">handler</span> <span class="nv">batch-size</span><span class="p">]</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">future-loop</span> <span class="p">(</span><span class="nf">persistence/handle-events</span> <span class="nv">state</span> <span class="nv">queue</span> <span class="nv">channel</span> <span class="nv">writer</span> <span class="nv">handler</span> <span class="nv">batch-size</span><span class="p">)))})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defnk</span> <span class="nv">client</span> <span class="p">[</span><span class="nv">frame</span> <span class="nv">port</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">lamina/wait-for-result</span> <span class="p">(</span><span class="nf">tcp/tcp-client</span> <span class="p">{</span><span class="ss">:host</span> <span class="s">&quot;localhost&quot;</span> <span class="ss">:port</span> <span class="nv">port</span> <span class="ss">:frame</span> <span class="nv">frame</span><span class="p">})))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; wiring for throughput test</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">load</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:client</span> <span class="nv">client</span>
</span><span class='line'>   <span class="ss">:send-count</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[]</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>   <span class="ss">:recv-count</span> <span class="nv">load/recv-count</span>
</span><span class='line'>   <span class="ss">:counter</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">recv-count</span><span class="p">]</span> <span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">load/counter-loop</span> <span class="nv">recv-count</span> <span class="err">@</span><span class="nv">recv-count</span><span class="p">)))</span>
</span><span class='line'>   <span class="ss">:loader</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">client</span> <span class="nv">send-count</span> <span class="nv">recv-count</span> <span class="nv">rate-limit</span><span class="p">]</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">load/loader-loop</span> <span class="nv">client</span> <span class="nv">send-count</span> <span class="nv">recv-count</span> <span class="nv">rate-limit</span><span class="p">)))})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; wiring for latency test</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">measure</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:client</span> <span class="nv">client</span>
</span><span class='line'>   <span class="ss">:measurer</span> <span class="p">(</span><span class="nf">fnk</span> <span class="p">[</span><span class="nv">client</span><span class="p">]</span> <span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">load/measurer-loop</span> <span class="nv">client</span><span class="p">)))})</span>
</span></code></pre></td></tr></table></div></figure>


<p>With explicit names for all state, dependency injection is easy. When I start a component I can swap out the network implementation for testing or compare different implementations of the event handler etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'>  <span class="p">(</span><span class="k">def </span><span class="nv">s</span> <span class="p">((</span><span class="nf">graph/eager-compile</span> <span class="nv">server</span><span class="p">)</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:port</span> <span class="mi">19997</span>
</span><span class='line'>           <span class="ss">:frame</span> <span class="nv">etf-frame</span>
</span><span class='line'>           <span class="ss">:init-state</span> <span class="nv">load/init-state</span>
</span><span class='line'>           <span class="ss">:handler</span> <span class="nv">exchange/handle-event</span>
</span><span class='line'>           <span class="ss">:log-file</span> <span class="s">&quot;test-out&quot;</span>
</span><span class='line'>           <span class="ss">:batch-size</span> <span class="mi">1000</span><span class="p">}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Creating a component returns a nested map of all the state in all the subcomponenets. I can poke around inside the state whilst debugging. A little snippet I often used polls the queue size and prints to the console whenever it is full.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="nf">future</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&gt;= </span><span class="p">(</span><span class="nf">.size</span> <span class="p">(</span><span class="ss">:queue</span> <span class="nv">s</span><span class="p">))</span> <span class="p">(</span><span class="ss">:batch-size</span> <span class="nv">s</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="s">&quot;Full at&quot;</span> <span class="p">(</span><span class="nf">time</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Uniform access to all state makes it easy to write generic functions to eg view the entire object graph or shutdown every component.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defprotocol </span><span class="nv">Poke</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">poke</span> <span class="p">[</span><span class="nv">this</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">extend-protocol</span> <span class="nv">Poke</span>
</span><span class='line'>  <span class="nv">java.util.concurrent.Future</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">poke</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span> <span class="p">(</span><span class="nb">deref </span><span class="nv">this</span> <span class="mi">0</span> <span class="ss">:pending-future</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">clojure.lang.Atom</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">poke</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span> <span class="err">@</span><span class="nv">this</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">poke-all</span> <span class="p">[</span><span class="nv">form</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">satisfies?</span> <span class="nv">Poke</span> <span class="nv">form</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">walk</span> <span class="nb">identity </span><span class="nv">poke-all</span> <span class="p">(</span><span class="nf">poke</span> <span class="nv">form</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">walk</span> <span class="nb">identity </span><span class="nv">poke-all</span> <span class="nv">form</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defprotocol </span><span class="nv">Kill</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">kill</span> <span class="p">[</span><span class="nv">this</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">extend-protocol</span> <span class="nv">Kill</span>
</span><span class='line'>  <span class="nv">clojure.lang.Fn</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">kill</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span> <span class="p">(</span><span class="nf">this</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">java.util.concurrent.Future</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">kill</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span> <span class="p">(</span><span class="nf">future-cancel</span> <span class="nv">this</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">kill-all</span> <span class="p">[</span><span class="nv">form</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">walk</span> <span class="o">#</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">satisfies?</span> <span class="nv">Kill</span> <span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nf">kill</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">kill-all</span> <span class="nv">form</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The difference in productivity compared to the old actor-based version was incredible.</p>

<h2>Examples</h2>

<p><a href="http://boom.cs.berkeley.edu/">Overlog</a> makes use of this idea by reflecting many runtime events into in-process tables. My favourite <a href="http://db.cs.berkeley.edu/papers/eurosys10-boom.pdf">paper</a> describes using streaming queries on these tables for programmable profiling, monitoring and even distributed debugging.</p>

<p><a href="https://github.com/swannodette/om">Om</a> uses cursors similarly to the way I use subatoms here, to manage relative names within the state tree. David Nolen&rsquo;s <a href="http://swannodette.github.io/">blog</a> has some excellent examples of using this global state to enable application-wide undo and syncing state without modifying application code.</p>

<p>The <a href="http://facebook.github.io/react/blog/2014/01/02/react-chrome-developer-tools.html">React devtools</a> allow you to click on an element on the page and display the state of the component that created that element.  A trivial extension in Om would be to display the past states and for each state change show the event and handler that caused that change. Together with the ability to programmatically access state and history this could lead to a beautiful debugging experience.</p>

<p>&ldquo;Why is this box here? Ah, it comes from component Foo. The state of component Foo is messed up. When did that happen? Ah, it was caused by event handler Bar firing with these arguments.&rdquo; How long would that same chain of reasoning take you with println debugging? In a language with tighter tool integration it should be possible to just directly drop into the debugger at that point in history and replay the events.</p>

<h2>Summary</h2>

<p>Interaction with running programs (live coding, debugging, monitoring, hot code reloading etc) is greatly aided by several design principles:</p>

<ul>
<li>All state can be queried using some uniform api.</li>
<li>Every item of state has a unique and predictable name by which it can be identified.</li>
<li>Access to state can be restricted and controlled.</li>
<li>Changes to state can be monitored.</li>
<li>State is separate from code.</li>
</ul>


<p>These principles are well understood in database systems and in ops in general.</p>

<p>The same principles are not applied in the small by most programmers and are not encouraged by most languages.</p>

<p>Several examples exist of using these principles to quickly produce simple, powerful programs.</p>

<p>Most of our questions about code are questions about time, state and causality. Our existing tools do not lend much support in answering those questions. Following these principles makes it easier to develop better tools.</p>

<p>I would also speculate that a large part of the <a href="http://www.youtube.com/watch?v=ayPD0U_FO4Y">frustration</a> that people experience with computers is a result of opaque abstractions which prevent users from being able to connect cause and effect when the machine misbehaves.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We're not even trying]]></title>
    <link href="http://scattered-thoughts.net/blog/2014/01/27/were-not-even-trying/"/>
    <updated>2014-01-27T00:31:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2014/01/27/were-not-even-trying</id>
    <content type="html"><![CDATA[<p>Light Table has a feature called <a href="http://www.youtube.com/watch?v=d8-b6QEN-rk">watches</a>, where you select an expression to watch and behind the scenes the editor wraps that expression in some code that sends the results back to the editor every time the expression is executed. You can also write custom watches that wrap the selected expression however you like. For example, this watch displays the time the expression took to execute.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="s">&quot;alt-m&quot;</span> <span class="p">[(</span><span class="ss">:editor.watch.custom-watch-selection</span>
</span><span class='line'>           <span class="s">&quot;(let [start (.getTime (js/Date.))</span>
</span><span class='line'><span class="s">                  res (do __SELECTION__)]</span>
</span><span class='line'><span class="s">              __|(str (- (.getTime (js/Date.)) start) \&quot; ms\&quot;)|__</span>
</span><span class='line'><span class="s">              res)&quot;</span>
</span><span class='line'>           <span class="p">{</span><span class="ss">:class</span> <span class="s">&quot;timed&quot;</span> <span class="ss">:verbatim</span> <span class="nv">true</span><span class="p">})]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, you can write custom eval commands which wrap the selected expression before evaluating it. I have a whole pile of these for tasks from benchmarking an expression to displaying the bytecode for the resulting object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="s">&quot;alt-shift-b&quot;</span> <span class="p">[(</span><span class="ss">:eval.custom</span> <span class="s">&quot;(do (require &#39;[criterium.core]) (with-out-str (criterium.core/bench (do __SELECTION__))))&quot;</span> <span class="p">{</span><span class="ss">:result-type</span> <span class="ss">:inline</span> <span class="ss">:verbatim</span> <span class="nv">true</span><span class="p">})]</span>
</span><span class='line'><span class="s">&quot;alt-d&quot;</span> <span class="p">[(</span><span class="ss">:eval.custom</span> <span class="s">&quot;(do (require &#39;[no.disassemble]) (no.disassemble/disassemble (do __SELECTION__)))&quot;</span> <span class="p">{</span><span class="ss">:result-type</span> <span class="ss">:inline</span> <span class="ss">:verbatim</span> <span class="nv">true</span><span class="p">})]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has completely replaced print statement debugging for me. It probably saves me 10-20 minutes of typing per day, reduces context switching a little and prevents me accidentally checking in print statements. It doesn&rsquo;t sound like much, but if you make three or four improvements like that it starts to add up.</p>

<p>But the point of this post is not Light Table is awesome (although it is). The point is that I spent four years as a professional programmer typing in print statements every day and I never once thought to automate that process. If I missed something so simple, what else am I missing?</p>

<p>I lose hours and hours every week to mistyped variables and function names. When using clojurescript in Light Table there are no warnings shown and the stack traces don&rsquo;t identify which variable was mistyped. But the clojurescript compiler can emit warnings and webkit inspector can show which line the error occured at. All I have to do is take a few hours to improve the clojurescript plugin and I would never suffer from mistyped names again.</p>

<p>I spend even more hours painstakingly inserting watches and setting up test cases when all I really want to do is step through the call-stack. We have a debugger! The webkit inspector has an excellent debugger which uses the source maps that we so carefully emit to enable stepping though clojurescript code directly. But I haven&rsquo;t gotten around to taking ten minutes to learn to use it, so I rely entirely on watches instead.</p>

<p>I know I&rsquo;m not the only one. I&rsquo;ve seen otherwise intelligent people go through a code file and manually rename every occurence of a function, as if they had never heard of find-and-replace. I know people who write code in notepad because they don&rsquo;t need any &ldquo;fancy IDE features&rdquo; getting in the way.</p>

<p><img src="http://scattered-thoughts.net/images/square1.gif"></p>

<p>I see people tolerate waiting minutes to compile and endure restarting their program every time they make a change. I worked with one company whose build process so annoyed me that I started writing down the time I spent waiting and worked out it was costing them an hour of consulting time every day. They wouldn&rsquo;t let me fix it. At another company, a new service made it into master despite the fact that it crashed on startup. Setting up a working mock environment was so painful that neither the original developer nor the reviewer had actually tried running the code.</p>

<p>How does this happen? What the hell went wrong?</p>

<h2>I don&rsquo;t have the time to fix the problem</h2>

<p>The correct response to this is to make a note of how much time I waste every day by not fixing the problem. That&rsquo;s <em>why</em> I don&rsquo;t have time.</p>

<p><img src="http://scattered-thoughts.net/images/square-time.jpg"></p>

<p>Just taking a few hours a week to fix the low-hanging fruit will pay for itself dozens of times over, and every time I add a feature to my editor or write a little command line tool I will learn things that will make it faster and easier next time. Productivity is multiplicative. Small improvements add up to remarkable changes.</p>

<h2>I didn&rsquo;t notice there was a problem</h2>

<p>This suprised me at first, but I realised that the reason I had never fixed the undefined variable problem was because I had never sat down and figured out how much it cost me in terms of lost time and focus. When I&rsquo;m coding I&rsquo;m not really conciously aware of the mechanical details of what I&rsquo;m doing. My head is focused on data and algorithms, bugs and performance problems. I&rsquo;m only vaguely aware that at the other end my hands are repeatedly mistyping println.</p>

<p>I&rsquo;m trying now to maintain some sort of record. Whenever I lose focus or forget what I was doing I write down what distracted me. Whenever something annoys or frustrates me I write it down. Every time I take a break I make a quick note of what I spent the last hour or two doing. Whenever I fix a bug I write down the process that lead me to finding it, what the cause was and how it slipped through testing.</p>

<p>Something else I am considering trying is recording a few hours of video and going back to analyse in detail what worked and what didn&rsquo;t. I suspect that I will spot a number of bad habits that are obvious in hindsight.</p>

<p>The advantage of recording all this evidence is that I can get an <em>accurate</em> picture of where my time is going and how my tools and processes could be improved. Going by my memory of what happened has proven to be less than useful.</p>

<h2>I have a vested interest in there not being a problem</h2>

<p>My favourite language doesn&rsquo;t have a debugger so clearly I don&rsquo;t need one. Besides, real programmers don&rsquo;t need a debugger. They just simulate the program directly in their head.</p>

<p>People <a href="http://www.amazon.co.uk/Thinking-Fast-Slow-Daniel-Kahneman/dp/0141033576/ref=sr_1_1?ie=UTF8&amp;qid=1390773807&amp;sr=8-1&amp;keywords=thinking+fast+and+slow">lie to themselves</a>. We all regularly defend on the grounds of technical merit when really the decision is governed by comfort zones, fashion, superficial impressions and random prejudices. It&rsquo;s hard to make good decisions when you aren&rsquo;t even aware of your own biases.</p>

<p>One idea for combatting this is to take the <a href="http://wiki.lesswrong.com/wiki/Outside_view">outside view</a>. I imagine <em>specific cases</em> where I have seen other developers trying to solve similar bugs and in each one of those cases I would have recommended that they learn to use the debugger rather than painstakingly engineering a test case out of print statements and watches.</p>

<p>Another idea I keep in mind is <a href="http://www.paulgraham.com/identity.html">keeping my identity small</a>. If I persist in thinking of myself as a &lsquo;real hardcore programmer&rsquo; then I will forever be stuck peering at an 80 character ANSI terminal while other people get shit done.</p>

<p>Finally, I hope to be able to rely more on emperical results. If I am disciplined about collecting data then it will be easier to see what the correct answer is without malformed preconceptions getting in the way.</p>

<h2>I didn&rsquo;t realise the problem could be fixed</h2>

<p>The reason I never automated attaching watches is because it never occured to me that that was possible, let alone easy. My mental model of progamming involved me typing text into an editor and later running it. The editor might help me move text around but it couldn&rsquo;t change the text on the way to the repl. I was a victim of first order thinking, seeing my programming environment as a fixed tool where text goes in one end and programs come out the other. The only solution is to tattoo &lsquo;everything is data&rsquo; across my forehead.</p>

<p>It is 2014. We have been programming for six decades. The software world has invested tens of thousands of man-years into building tools to help us write code (I&rsquo;m told that the Visual Studio team alone is 2000 developers). How is it still the case that my fat fingers can mistype a function name and the first I hear about it is &ldquo;Cannot call method &lsquo;call&rsquo; of undefined&rdquo;. Is this really the best we can do? It feels like it takes a monumental amount of effort just to enable the simplest features.</p>

<p><img src="http://scattered-thoughts.net/images/square2.gif"></p>

<p>Computers are not just a tool for writing code, they are a tool for thinking. We can <a href="http://clojure.org/macros">extend the language</a>. We can <a href="http://cascalog.org/">make new languages</a>. We can write code that <a href="https://github.com/clojure/core.typed">analyses code</a>, code that <a href="https://github.com/technomancy/slamhound">rewrites code</a>, code that <a href="http://trac.webkit.org/wiki/WebInspector">inspects code</a>, code that <a href="https://github.com/plasma-umass/causal">finds slow code</a>, code that <a href="http://www.st.cs.uni-saarland.de/dd/">finds bugs</a>, code that <a href="http://google-engtools.blogspot.co.uk/2011/12/bug-prediction-at-google.html">predicts bugs</a>, code that <a href="http://db.cs.berkeley.edu/papers/hotdep10-fts-dts.pdf">breaks code</a>, code that <a href="http://worrydream.com/MediaForThinkingTheUnthinkable/">visualises code execution</a>, code that <a href="http://db.cs.berkeley.edu/papers/eurosys10-boom.pdf">queries code execution</a>. We are barely scratching the surface. We have to stop thinking of code as text and start thinking of code as data.</p>

<p>And I have to go learn how to use the webkit debugger in Light Table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No more bullshit]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/12/12/no-more-bullshit/"/>
    <updated>2013-12-12T01:28:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/12/12/no-more-bullshit</id>
    <content type="html"><![CDATA[<p>We are doing programming wrong. We all know it. Sure, if you sweat and scrub and shine and polish and pray to the gods of TDD you can get stuff done, but in the back of your mind you will always hear Zed Shaw&rsquo;s voice whispering <a href="http://www.youtube.com/watch?v=4qJMR_Dbxow">&ldquo;This is bullshit!&rdquo;</a>. We cannot build the world on a foundation of bullshit.</p>

<!--more-->


<p>There was a time when no-one learned to write. What was the point? Learning to write takes decades of practice and is not useful for anything. If you do need to send a letter you just get the village scribe to write it for you.</p>

<p>Today if you cannot write you cannot take part in modern society.</p>

<p>Like writing and mathematics, computers have the potential to make humanity more intelligent. <a href="http://en.wikiquote.org/wiki/Alfred_North_Whitehead">Civilization advances by extending the number of important operations which we can perform without thinking about them.</a>. Computers are not a specialist tool for solving a particular problem, they are universal machines that can carry out any thought process you know how to express, leaving your brain free to concentrate on the problem at hand. The fact that programming is not useful to the average person today reflects only on our failure as a profession to create usable tools.</p>

<p>A few people <a href="http://www.vpri.org/html/work/ifnct.htm">here</a> and <a href="http://boom.cs.berkeley.edu/">there</a> have proven that we can do better. After seeing the possiblities I can&rsquo;t go back to burying my head in the sand and <a href="http://scattered-thoughts.net/images/typing.gif">writing scala</a> for the rest of my days.</p>

<p>I&rsquo;m joining <a href="http://www.lighttable.com/">Light Table</a> and together we are going to put a dent in this mountain of bullshit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hugo-a-go-go: optimisation]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/11/24/hugo-a-go-go-optimisation/"/>
    <updated>2013-11-24T04:43:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/11/24/hugo-a-go-go-optimisation</id>
    <content type="html"><![CDATA[<p>After a little optimisation work <a href="https://github.com/jamii/hugo-a-go-go/">hugo</a> now manages to play out ~12k games per second on a 9x9 board. Besides fixing the two incorrect optimisations I made during the last minutes of the competition, the main wins were changing the board representation and carefully inspecting the compiler output to eliminate unneccesary work. A lot of the things I discovered are generally applicable to calculation-heavy, cpu-bound cljs code (with all the usual disclaimers about profiling and premature optimsation).</p>

<!--more-->


<h2>Layout</h2>

<p>The board is now packed into a Uint8Array. With borders included, the board is an 11x11 grid.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">size</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">array-size</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="nv">size</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-pos</span> <span class="p">(</span><span class="nb">* </span><span class="nv">array-size</span> <span class="nv">array-size</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-&gt;pos</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">* </span><span class="nv">array-size</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">y</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first 121 entries in the array represent the colour of each cell on the board.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">empty</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">black</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">white</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">grey</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">;; for the border</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">get-colour</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">aget </span><span class="o">~</span><span class="nv">board</span> <span class="o">~</span><span class="nv">pos</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">set-colour</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span> <span class="nv">colour</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">aset </span><span class="o">~</span><span class="nv">board</span> <span class="o">~</span><span class="nv">pos</span> <span class="o">~</span><span class="nv">colour</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next 121 entries track which string is present on a cell. Strings are just represented by an integer id. The last entry in the array tracks the next id to be assigned.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">empty-string</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">grey-string</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">new-string</span> <span class="p">[</span><span class="nv">board</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">next-string#</span> <span class="p">(</span><span class="nb">aget </span><span class="o">~</span><span class="nv">board</span> <span class="mi">1023</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">aset </span><span class="o">~</span><span class="nv">board</span> <span class="mi">1023</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">next-string#</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>     <span class="nv">next-string#</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">get-string</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">aget </span><span class="o">~</span><span class="nv">board</span> <span class="p">(</span><span class="nb">+ </span><span class="o">~</span><span class="nv">max-pos</span> <span class="o">~</span><span class="nv">pos</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">set-string</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span> <span class="nv">string</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nb">aset </span><span class="o">~</span><span class="nv">board</span> <span class="p">(</span><span class="nb">+ </span><span class="o">~</span><span class="nv">max-pos</span> <span class="o">~</span><span class="nv">pos</span><span class="p">)</span> <span class="o">~</span><span class="nv">string</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The next 121 entries track the number of non-empty neighbouring cells, which is useful for short-circuiting <code>suicide?</code> and <code>eyelike?</code> tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">get-neighbours</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">freedom-ix#</span> <span class="p">(</span><span class="nb">+ </span><span class="o">~</span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">max-pos</span><span class="p">)</span> <span class="o">~</span><span class="nv">pos</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">aget </span><span class="o">~</span><span class="nv">board</span> <span class="nv">freedom-ix#</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">add-neighbours</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">freedom-ix#</span> <span class="p">(</span><span class="nb">+ </span><span class="o">~</span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">max-pos</span><span class="p">)</span> <span class="o">~</span><span class="nv">pos</span><span class="p">)]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">aset </span><span class="o">~</span><span class="nv">board</span> <span class="nv">freedom-ix#</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">aget </span><span class="o">~</span><span class="nv">board</span> <span class="nv">freedom-ix#</span><span class="p">)</span> <span class="o">~</span><span class="nv">amount</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the remaining cells map string ids to the number of pseudo-liberties belonging to that string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">get-liberties</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">string-ix#</span> <span class="p">(</span><span class="nb">+ </span><span class="o">~</span><span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="nv">max-pos</span><span class="p">)</span> <span class="p">(</span><span class="nf">get-string</span> <span class="o">~</span><span class="nv">board</span> <span class="o">~</span><span class="nv">pos</span><span class="p">))]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">aget </span><span class="o">~</span><span class="nv">board</span> <span class="nv">string-ix#</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">add-liberties</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">pos</span> <span class="nv">amount</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">string-ix#</span> <span class="p">(</span><span class="nb">+ </span><span class="o">~</span><span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="nv">max-pos</span><span class="p">)</span> <span class="p">(</span><span class="nf">get-string</span> <span class="o">~</span><span class="nv">board</span> <span class="o">~</span><span class="nv">pos</span><span class="p">))]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">aset </span><span class="o">~</span><span class="nv">board</span> <span class="nv">string-ix#</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">aget </span><span class="o">~</span><span class="nv">board</span> <span class="nv">string-ix#</span><span class="p">)</span> <span class="o">~</span><span class="nv">amount</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Packing the board this way gives two benefits. First, every field access is reduced to a few instructions. This isn&rsquo;t as big a win as one might think, given that the structure of the old layout was predictable enough for the jit to replace hash lookups with struct access. More importantly, packing the board means that creating a copy is a single array copy. Cheap copying means we can cache boards all over the place and this leads to a lot of saved work in the UCT stage.</p>

<p>My implementation here is a little clumsy but in the future a cljs port of <a href="https://github.com/ztellman/vertigo">vertigo</a> would make this a lot cleaner. This is the kind of abstraction that would be difficult to implement in plain js.</p>

<h2>Truth</h2>

<p>In cljs, only <code>false</code> and <code>nil</code> are falsey. In generated code, if the cljs compiler cannot infer that the test in a branch is a boolean, it wraps it in <code>cljs.core.truth_</code> to test for cljs truthiness rather than js truthiness.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">foo?</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="s">&quot;foo&quot;</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">unfoo</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">foo?</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">nil</span>
</span><span class='line'>    <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">foo_QMARK_</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">_EQ_</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">unfoo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">truth_</span><span class="p">(</span><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">foo_QMARK_</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="nx">a</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally this doesn&rsquo;t matter but hugo is optimised enough already that profiling showed it spending ~15% of it&rsquo;s time inside <code>cljs.core.truth_</code>. You can avoid it either by adding type hints&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="nb">boolean </span><span class="nv">foo?</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="s">&quot;foo&quot;</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">unfoo</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">foo?</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">nil</span>
</span><span class='line'>    <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">foo_QMARK_</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">_EQ_</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">unfoo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">foo_QMARK_</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="nx">a</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip; or by wrapping the test in a function that is already hinted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">foo?</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="s">&quot;foo&quot;</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">unfoo</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">true? </span><span class="p">(</span><span class="nf">foo?</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">nil</span>
</span><span class='line'>    <span class="nv">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">foo_QMARK_</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">_EQ_</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">unfoo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span><span class="o">!</span><span class="mi">0</span> <span class="o">===</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">foo_QMARK_</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="nx">a</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Equality</h2>

<p>Clojure defaults to structural equality where possible, rather than using javascript&rsquo;s insane notion of equality.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">opposite-colour</span> <span class="p">[</span><span class="nv">colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">colour</span> <span class="nv">black</span><span class="p">)</span> <span class="nv">white</span> <span class="nv">black</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">opposite_colour</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">_EQ_</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">black</span><span class="p">)</span> <span class="o">?</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">white</span> <span class="o">:</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">black</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, this is something that normally doesn&rsquo;t matter but hugo was spending ~20% of cpu time in <code>cljs.core.__EQ__</code>. Since we know we are comparing integers we can use <code>==</code> instead, which compiles down to <code>===</code> in js.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">opposite-colour</span> <span class="p">[</span><span class="nv">colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">== </span><span class="nv">colour</span> <span class="nv">black</span><span class="p">)</span> <span class="nv">white</span> <span class="nv">black</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">opposite_colour</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">===</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">black</span> <span class="o">?</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">white</span> <span class="o">:</span> <span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">black</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For other primitive types it seems that <code>identical?</code> will inline to <code>===</code>. For keywords you now have to use <code>keyword-identical?</code> which unfortunately does not inline.</p>

<h2>Polyadic calls</h2>

<p>Clojure functions can dispatch on the number of arguments. Usually the cljs compiler does a good job of compiling away the extra indirection, but it struggles with local functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clj'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">foo</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">bar</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span> <span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">bar</span> <span class="ss">:foo</span> <span class="ss">:bar</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">hugo_a_go_go</span><span class="p">.</span><span class="nx">board</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">_EQ_</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span> <span class="o">?</span> <span class="nx">a</span><span class="p">.</span><span class="nx">cljs$core$IFn$_invoke$arity$2</span><span class="p">(</span><span class="k">new</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="mi">1014005816</span><span class="p">),</span> <span class="k">new</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="mi">1014001541</span><span class="p">))</span> <span class="o">:</span> <span class="nx">a</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="k">new</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="mi">1014005816</span><span class="p">),</span> <span class="k">new</span> <span class="nx">cljs</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="mi">1014001541</span><span class="p">))</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important part to notice here is that it tests if <code>a.cljs$core$IFn$_invoke$arity$2</code> exists before calling it, despite the fact that that is statically known. We had some small (~5%) performance improvements in a few places (notably board/flood-fill) by lifting all closures up to top-level functions so that the compiler can remove that check.</p>

<h2>Mutable variables</h2>

<p>Sometimes you need a mutable variable. Using atoms incurs overhead for eg checking watches. According to <a href="http://swannodette.github.io/2013/06/10/porting-notchs-minecraft-demo-to-clojurescript/">David Nolen</a>, the best option in cljs is creating a one-element array.</p>

<p>It would be nice to have safe access to mutable vars in the style of <a href="https://github.com/ztellman/proteus">proteus</a> instead.</p>

<h2>Next</h2>

<p>While it meet seem annoying to have to work around the compiler sometimes to get decent performance, I far prefer to have sane semantics by default and just remember a few simple tricks for speeding up inner loops. Having access to macros also opens the door to a world of performant abstractions that would be extremely painful in plain js (eg <a href="https://github.com/clojure/core.match">core.match</a>, <a href="https://github.com/ztellman/vertigo">vertigo</a>). Now that the core of hugo is just bashing on integers and byte arrays there is also the potential to compile sections of it to <a href="http://asmjs.org/">asm.js</a> for even more performance.</p>

<p>Hugo now plays fairly sensibly but is still easy to defeat even for a novice player like me. I suspect that the UCT stage is still not entirely correct so the next step is to build a visualiser for the game tree so I can see the reasoning behind it&rsquo;s moves.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hugo-a-go-go]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/10/06/hugo-a-go-go/"/>
    <updated>2013-10-06T13:22:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/10/06/hugo-a-go-go</id>
    <content type="html"><![CDATA[<p>For the <a href="http://clojurecup.com/">2013 Clojure Cup</a> myself and <a href="http://www.thattommyhall.com/">Tom Hall</a> wrote a <a href="http://en.wikipedia.org/wiki/Go_%28game%29">go</a> AI in clojurescript, inspired by <a href="https://github.com/ztellman/pushkin">pushkin</a>. The source is <a href="https://github.com/jamii/hugo-a-go-go/">here</a> and it can currently be played on the <a href="http://hugoagogo.clojurecup.com/">clojure cup site</a> (only tested in chrome).</p>

<!--more-->


<p>Before reading this post it would help to understand the rules of go. Hugo-a-go-go follows (an approximation of) the <a href="http://en.wikipedia.org/wiki/Rules_of_Go#Chinese_rules">chinese rules</a>. Due to the limited time we don&rsquo;t yet check for <a href="http://en.wikipedia.org/wiki/Rules_of_Go#Ko">ko</a> and don&rsquo;t even attempt to detect the end of the game. The code at the moment is incredibly messy and probably very buggy (the version we submitted seems to actually <em>try</em> to lose) so treat it with suspicion.</p>

<h2>Board</h2>

<p>The best place to start is with the board representation. The most expensive operation for the AI is detecting suicide and death. To make this fast we track connected strings of pieces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">String</span> <span class="p">[</span><span class="nv">colour</span> <span class="nv">liberties</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>colour</code> is one of <code>:black</code>, <code>:white</code>, <code>:grey</code> (for the border) or <code>:empty</code>. <code>liberties</code> tracks the number of <a href="https://groups.google.com/forum/#!msg/computer-go-archive/hs259RQQ5hI/TOLFX2d5Y6UJ">pseudo-liberties</a> the string has (for black or white strings; for empty or grey strings the <code>liberties</code> value is never read and exists just to avoid having to branch on the colour).</p>

<p>The board is represented by a 1d array of pointers to strings (this representation is inspired by <a href="http://www.gnu.org/software/gnugo/">gnugo</a> rather than pushkin) and a pointer to the empty string (which we use for fast <code>empty?</code> checks).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Board</span> <span class="p">[</span><span class="nv">strings</span> <span class="nv">empty-string</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">size</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">array-size</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">2</span> <span class="nv">size</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">max-pos</span> <span class="p">(</span><span class="nb">* </span><span class="nv">array-size</span> <span class="nv">array-size</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-&gt;pos</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">* </span><span class="nv">array-size</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">y</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create a board we just have to setup the empty-string and border-string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="k">new </span><span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">empty-string</span> <span class="p">(</span><span class="nf">-&gt;String</span> <span class="ss">:empty</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">border-string</span> <span class="p">(</span><span class="nf">-&gt;String</span> <span class="ss">:grey</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">strings</span> <span class="p">(</span><span class="nf">object-array</span> <span class="nv">max-pos</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">i</span> <span class="nv">max-pos</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">aset </span><span class="nv">strings</span> <span class="nv">i</span> <span class="nv">empty-string</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">i</span> <span class="nv">array-size</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">aset </span><span class="nv">strings</span> <span class="p">(</span><span class="nf">-&gt;pos</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">)</span> <span class="mi">-1</span><span class="p">)</span> <span class="nv">border-string</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">aset </span><span class="nv">strings</span> <span class="p">(</span><span class="nf">-&gt;pos</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">)</span> <span class="nv">size</span><span class="p">)</span> <span class="nv">border-string</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">aset </span><span class="nv">strings</span> <span class="p">(</span><span class="nf">-&gt;pos</span> <span class="mi">-1</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">))</span> <span class="nv">border-string</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">aset </span><span class="nv">strings</span> <span class="p">(</span><span class="nf">-&gt;pos</span> <span class="nv">size</span> <span class="p">(</span><span class="nb">dec </span><span class="nv">i</span><span class="p">))</span> <span class="nv">border-string</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">-&gt;Board</span> <span class="nv">strings</span> <span class="nv">empty-string</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>A given move is <em>not</em> suicide if, after the move is made, there is at least one neighbour which is either:</p>

<ul>
<li><p>the same colour and has more than zero liberties</p></li>
<li><p>the opposite colour and has zero liberties (ie would die if the move was carried through)</p></li>
<li><p>empty</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">suicide?</span> <span class="p">[</span><span class="o">^</span><span class="nv">Board</span> <span class="nv">board</span> <span class="nv">colour</span> <span class="nv">pos</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">suicide</span> <span class="p">(</span><span class="nf">atom</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">opposite-colour</span> <span class="p">(</span><span class="nf">condp</span> <span class="nv">keyword-identical?</span> <span class="nv">colour</span> <span class="ss">:black</span> <span class="ss">:white</span> <span class="ss">:white</span> <span class="ss">:black</span><span class="p">)]</span>
</span><span class='line'>    <span class="c1">;; decrement all the neighbours liberties</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">foreach-neighbour</span> <span class="nv">neighbour-pos</span> <span class="nv">pos</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">string</span> <span class="p">(</span><span class="nb">aget </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">neighbour-pos</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">set!</span> <span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">string</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">string</span><span class="p">)))))</span>
</span><span class='line'>    <span class="c1">;; check for suicide</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">foreach-neighbour</span> <span class="nv">neighbour-pos</span> <span class="nv">pos</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">string</span> <span class="p">(</span><span class="nb">aget </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">neighbour-pos</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">condp</span> <span class="nv">keyword-identical?</span> <span class="p">(</span><span class="nf">.-colour</span> <span class="nv">string</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">colour</span> <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">string</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">reset!</span> <span class="nv">suicide</span> <span class="nv">false</span><span class="p">))</span>
</span><span class='line'>          <span class="nv">opposite-colour</span> <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">string</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">reset!</span> <span class="nv">suicide</span> <span class="nv">false</span><span class="p">))</span>
</span><span class='line'>          <span class="ss">:empty</span> <span class="p">(</span><span class="nf">reset!</span> <span class="nv">suicide</span> <span class="nv">false</span><span class="p">)</span>
</span><span class='line'>          <span class="ss">:grey</span> <span class="nv">nil</span><span class="p">)))</span>
</span><span class='line'>    <span class="c1">;; undo the decrement</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">foreach-neighbour</span> <span class="nv">neighbour-pos</span> <span class="nv">pos</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">string</span> <span class="p">(</span><span class="nb">aget </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">neighbour-pos</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">set!</span> <span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">string</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">string</span><span class="p">)))))</span>
</span><span class='line'>    <span class="err">@</span><span class="nv">suicide</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually making a move is similar but we have to clear out dead strings and join adjacent strings together. Proving that it&rsquo;s safe to do all this in a single pass is straightforward, if tedious.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="kd">defn </span><span class="nv">set-colour</span> <span class="p">[</span><span class="o">^</span><span class="nv">Board</span> <span class="nv">board</span> <span class="nv">pos</span> <span class="nv">colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">string</span> <span class="p">(</span><span class="nf">-&gt;String</span> <span class="nv">colour</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">aset </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">pos</span> <span class="nv">string</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">foreach-neighbour</span> <span class="nv">neighbour-pos</span> <span class="nv">pos</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">neighbour-string</span> <span class="p">(</span><span class="nb">aget </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">neighbour-pos</span><span class="p">)</span>
</span><span class='line'>                             <span class="nv">neighbour-colour</span> <span class="p">(</span><span class="nf">.-colour</span> <span class="nv">neighbour-string</span><span class="p">)]</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">condp</span> <span class="nv">keyword-identical?</span> <span class="nv">neighbour-colour</span>
</span><span class='line'>                           <span class="ss">:empty</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">set!</span> <span class="p">(</span><span class="nf">.-liberties</span> <span class="p">(</span><span class="nb">aget </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">pos</span><span class="p">))</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="nf">.-liberties</span> <span class="p">(</span><span class="nb">aget </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">pos</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>                           <span class="ss">:grey</span>
</span><span class='line'>                           <span class="nv">nil</span>
</span><span class='line'>
</span><span class='line'>                           <span class="nv">colour</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">set!</span> <span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">neighbour-string</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">neighbour-string</span><span class="p">)))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">join-strings</span> <span class="nv">board</span> <span class="p">(</span><span class="nb">aget </span><span class="p">(</span><span class="nf">.-strings</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">pos</span><span class="p">)</span> <span class="nv">neighbour-string</span> <span class="nv">pos</span> <span class="nv">neighbour-pos</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>                           <span class="c1">;; opposite colour</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">set!</span> <span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">neighbour-string</span><span class="p">)</span> <span class="p">(</span><span class="nb">dec </span><span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">neighbour-string</span><span class="p">)))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="p">(</span><span class="nf">.-liberties</span> <span class="nv">neighbour-string</span><span class="p">))</span>
</span><span class='line'>                               <span class="p">(</span><span class="nf">clear-string</span> <span class="nv">board</span> <span class="nv">neighbour-string</span> <span class="nv">neighbour-pos</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Monte Carlo</h2>

<p>Go branches far too much to exhaustively check all possible futures. Instead we use a heuristic measure of the value of a move &ndash; the Monte Carlo estimate of the expected score when both players choose from the set of valid moves uniformly at random. To put it simply, we run large numbers of random games from this board position and take the mean score as our measure of how strong this board position is. Since we don&rsquo;t have a test for the end of the game we just run until either 100 moves have been made or until both sides have no valid moves remaining.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">flood-fill</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">filled</span> <span class="p">(</span><span class="nf">object-array</span> <span class="nv">max-pos</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letfn</span> <span class="p">[(</span><span class="nf">flood-fill-around</span> <span class="p">[</span><span class="nv">pos</span><span class="p">]</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">foreach-neighbour</span> <span class="nv">pos</span> <span class="nv">pos</span>
</span><span class='line'>                  <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">aget </span><span class="nv">filled</span> <span class="nv">pos</span><span class="p">))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nf">keyword-identical?</span> <span class="ss">:empty</span> <span class="p">(</span><span class="nf">get-colour</span> <span class="nv">board</span> <span class="nv">pos</span><span class="p">)))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">aset </span><span class="nv">filled</span> <span class="nv">pos</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">flood-fill-around</span> <span class="nv">pos</span><span class="p">))))]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">x</span> <span class="nv">size</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">y</span> <span class="nv">size</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pos</span> <span class="p">(</span><span class="nf">-&gt;pos</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">keyword-identical?</span> <span class="nv">colour</span> <span class="p">(</span><span class="nf">get-colour</span> <span class="nv">board</span> <span class="nv">pos</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">aset </span><span class="nv">filled</span> <span class="nv">pos</span> <span class="nv">true</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">flood-fill-around</span> <span class="nv">pos</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">count </span><span class="p">(</span><span class="nb">filter identity </span><span class="nv">filled</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">score</span> <span class="p">[</span><span class="nv">board</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">white-flood</span> <span class="p">(</span><span class="nf">flood-fill</span> <span class="nv">board</span> <span class="ss">:white</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">black-flood</span> <span class="p">(</span><span class="nf">flood-fill</span> <span class="nv">board</span> <span class="ss">:black</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">total</span> <span class="p">(</span><span class="nb">* </span><span class="nv">size</span> <span class="nv">size</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">overlap</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">+ </span><span class="nv">white-flood</span> <span class="nv">black-flood</span><span class="p">)</span> <span class="nv">total</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">white-score</span> <span class="p">(</span><span class="nb">- </span><span class="nv">white-flood</span> <span class="nv">overlap</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">black-score</span> <span class="p">(</span><span class="nb">- </span><span class="nv">black-flood</span> <span class="nv">overlap</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">{</span><span class="ss">:white</span> <span class="nv">white-score</span> <span class="ss">:black</span> <span class="nv">black-score</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">random-move</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">starting-pos</span> <span class="p">(</span><span class="nf">random-int</span> <span class="nv">board/max-pos</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">pos</span> <span class="nv">starting-pos</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">board/valid?</span> <span class="nv">board</span> <span class="nv">colour</span> <span class="nv">pos</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">board/eyelike?</span> <span class="nv">board</span> <span class="nv">colour</span> <span class="nv">pos</span><span class="p">)))</span>
</span><span class='line'>        <span class="nv">pos</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">new-pos</span> <span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">pos</span><span class="p">)</span> <span class="nv">board/max-pos</span><span class="p">)]</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">starting-pos</span> <span class="nv">new-pos</span><span class="p">)</span>
</span><span class='line'>            <span class="nv">nil</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">recur</span> <span class="nv">new-pos</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">with-random-moves</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">n</span> <span class="nv">starting-colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">colour</span> <span class="p">(</span><span class="nb">take </span><span class="nv">n</span> <span class="p">(</span><span class="nb">interleave </span><span class="p">(</span><span class="nb">repeat </span><span class="nv">starting-colour</span><span class="p">)</span> <span class="p">(</span><span class="nb">repeat </span><span class="p">(</span><span class="nf">board/opposite-colour</span> <span class="nv">starting-colour</span><span class="p">))))]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">move</span> <span class="p">(</span><span class="nf">random-move</span> <span class="nv">board</span> <span class="nv">colour</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">board/set-colour</span> <span class="nv">board</span> <span class="nv">move</span> <span class="nv">colour</span><span class="p">)))</span>
</span><span class='line'>  <span class="nv">board</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may notice that the above code actually only runs until one side has no moves &ndash; this is the first of many bugs.</p>

<p>The scoring and random-move code was a huge bottleneck so at the last minute I &lsquo;optimised&rsquo; it by changing it to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; rough approximation of the final score if the board is tightly packed</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">score</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">score</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">pos</span> <span class="nv">board/max-pos</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">keyword-identical?</span> <span class="nv">colour</span> <span class="p">(</span><span class="nf">board/get-colour</span> <span class="nv">board</span> <span class="nv">pos</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">swap!</span> <span class="nv">score</span> <span class="nv">inc</span><span class="p">)))</span>
</span><span class='line'>    <span class="err">@</span><span class="nv">score</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; massive speedup at the expense of never playing in killed spaces</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">with-random-moves-from</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">n</span> <span class="nv">starting-colour</span> <span class="nv">moves</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">js/goog.array.shuffle</span> <span class="nv">moves</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">colour</span> <span class="nv">starting-colour</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">move</span> <span class="p">(</span><span class="nf">.pop</span> <span class="nv">moves</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">board/set-colour</span> <span class="nv">board</span> <span class="nv">move</span> <span class="nv">colour</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nf">board/opposite-colour</span> <span class="nv">colour</span><span class="p">))))</span>
</span><span class='line'>  <span class="nv">board</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think it is these two changes that are largely responsible for the submitted version playing so poorly &ndash; it doesn&rsquo;t check for eyes in the random playouts, doesn&rsquo;t allow the other player to keep killing strings when the ai player has no moves and doesn&rsquo;t count eyes in the final score. This explains why it likes to tightly pack pieces against the edge of the board.</p>

<h2>UCT</h2>

<p>While the monte-carlo estimate gives us a reasonable heuristic for move strength it doesn&rsquo;t re-use any information between passes. With such a large move space we need to explore more intelligently. The <a href="http://teytaud.over-blog.com/article-35709049.html">UCT</a> algorithm treats move-selection like a <a href="http://en.wikipedia.org/wiki/Multi-armed_bandit">multi-armed bandit problem</a>.</p>

<iframe width="640" height="360" src="http://scattered-thoughts.net//www.youtube.com/embed/dbvoPg51CqQ?feature=player_embedded" frameborder="0" allowfullscreen="allowfullscreen">video</iframe>


<p>We build a tree of moves where each node in the tree tracks not just the estimated score for all its child nodes but also the upper bound of a confidence interval on that estimate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Node</span> <span class="p">[</span><span class="nv">parent</span> <span class="nv">colour</span> <span class="nv">pos</span> <span class="nb">count </span><span class="nv">sum</span> <span class="nv">nodes</span> <span class="nv">valids</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>colour</code> is the colour making the move at this node. <code>pos</code> is the position at which it is moving. <code>nodes</code> is a list of child nodes for which we have estimates. <code>valids</code> is a list of valid moves which have not yet been converted into nodes. <code>count</code> and <code>sum</code> track the mean score for all the children in <code>nodes</code>.</p>

<p>On each iteration we pick a path through the tree, choosing some explore/exploit tradeoff using the upper confidence bounds. Given the limited time we had, I decided to just copy a scoring function from a paper without stopping to understand it, so I don&rsquo;t actually know what explore/exploit tradeoff we are making :S</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">best-child</span> <span class="p">[</span><span class="nv">node</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">best-score</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">/ </span><span class="mi">1</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>        <span class="nv">best-child</span> <span class="p">(</span><span class="nf">atom</span> <span class="nv">nil</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">child</span> <span class="p">(</span><span class="nf">.-nodes</span> <span class="nv">node</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">score</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">.-sum</span> <span class="nv">child</span><span class="p">)</span> <span class="p">(</span><span class="nf">.-count</span> <span class="nv">child</span><span class="p">))</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">js/Math.sqrt</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="p">(</span><span class="nf">js/Math.log</span> <span class="p">(</span><span class="nf">.-count</span> <span class="nv">node</span><span class="p">)))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">* </span><span class="mi">5</span> <span class="p">(</span><span class="nf">.-count</span> <span class="nv">child</span><span class="p">)))))]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">score</span> <span class="err">@</span><span class="nv">best-score</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">reset!</span> <span class="nv">best-score</span> <span class="nv">score</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">reset!</span> <span class="nv">best-child</span> <span class="nv">child</span><span class="p">))))</span>
</span><span class='line'>    <span class="err">@</span><span class="nv">best-child</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">expand</span> <span class="p">[</span><span class="nv">board</span> <span class="nb">node </span><span class="nv">ai-colour</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pos</span> <span class="p">(</span><span class="nf">.-pos</span> <span class="nv">node</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not= </span><span class="mi">0</span> <span class="nv">pos</span><span class="p">)</span> <span class="c1">;; top node has pos 0 - probably a smell</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">board/set-colour</span> <span class="nv">board</span> <span class="nv">pos</span> <span class="p">(</span><span class="nf">.-colour</span> <span class="nv">node</span><span class="p">))))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">valid-pos</span> <span class="p">(</span><span class="nf">.pop</span> <span class="p">(</span><span class="nf">.-valids</span> <span class="nv">node</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.push</span> <span class="p">(</span><span class="nf">.-nodes</span> <span class="nv">node</span><span class="p">)</span> <span class="p">(</span><span class="nf">expand-leaf</span> <span class="nv">board</span> <span class="nv">ai-colour</span> <span class="nb">node </span><span class="p">(</span><span class="nf">board/opposite-colour</span> <span class="p">(</span><span class="nf">.-colour</span> <span class="nv">node</span><span class="p">))</span> <span class="nv">valid-pos</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">child</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">.-colour</span> <span class="nv">node</span><span class="p">)</span> <span class="nv">ai-colour</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">worst-child</span> <span class="nv">node</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">best-child</span> <span class="nv">node</span><span class="p">))]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">expand</span> <span class="nv">board</span> <span class="nv">child</span> <span class="nv">ai-colour</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">nil</span> <span class="c1">;; no possible moves - pass</span>
</span><span class='line'>      <span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>On reaching a leaf we extend it by one more move, estimate the value of that move using monte-carlo simulations and then propagate the value back up the path to the top of tree.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">expand-leaf</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">ai-colour</span> <span class="nv">parent</span> <span class="nv">colour</span> <span class="nv">pos</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">board/set-colour</span> <span class="nv">board</span> <span class="nv">pos</span> <span class="nv">colour</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">valids</span> <span class="p">(</span><span class="nf">valids</span> <span class="nv">board</span> <span class="p">(</span><span class="nf">board/opposite-colour</span> <span class="nv">colour</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">random/with-random-moves-from</span> <span class="nv">board</span> <span class="mi">100</span> <span class="p">(</span><span class="nf">board/opposite-colour</span> <span class="nv">colour</span><span class="p">)</span> <span class="p">(</span><span class="nf">aclone</span> <span class="nv">valids</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">value</span> <span class="p">(</span><span class="nf">value</span> <span class="nv">board</span> <span class="nv">ai-colour</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">add-value</span> <span class="nv">parent</span> <span class="nv">value</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">-&gt;Node</span> <span class="nv">parent</span> <span class="nv">colour</span> <span class="nv">pos</span> <span class="mi">1</span> <span class="nv">value</span> <span class="p">(</span><span class="nf">object-array</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">valids</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">add-value</span> <span class="p">[</span><span class="nb">node </span><span class="nv">value</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set!</span> <span class="p">(</span><span class="nf">.-count</span> <span class="nv">node</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">.-count</span> <span class="nv">node</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">set!</span> <span class="p">(</span><span class="nf">.-sum</span> <span class="nv">node</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">.-sum</span> <span class="nv">node</span><span class="p">)</span> <span class="nv">value</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">parent</span> <span class="p">(</span><span class="nf">.-parent</span> <span class="nv">node</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">recur</span> <span class="nv">parent</span> <span class="nv">value</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the ai chooses its move by running a number of iterations of this algorithm and returning the value of <code>best-child</code> at the root (this is probably wrong &ndash; at this point we should just exploit, not explore).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">move-for</span> <span class="p">[</span><span class="nv">board</span> <span class="nv">colour</span> <span class="nv">n</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nb">node </span><span class="p">(</span><span class="nf">hugo-a-go-go.tree/new</span> <span class="p">(</span><span class="nf">board/copy</span> <span class="nv">board</span><span class="p">)</span> <span class="nv">colour</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">dotimes </span><span class="p">[</span><span class="nv">_</span> <span class="nv">n</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">expand</span> <span class="p">(</span><span class="nf">board/copy</span> <span class="nv">board</span><span class="p">)</span> <span class="nb">node </span><span class="nv">colour</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">child</span> <span class="p">(</span><span class="nf">best-child</span> <span class="nv">node</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.-pos</span> <span class="nv">child</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Postmortem</h2>

<p>Together we spent around 20 man-hours on the competition. I spent the first two thirds of the competition just getting the board representation to work correctly. Part of the delay was that after moving to a cljs-only implementation the feedback loop was much slower. I wasted an hour or two tring to get brepl working without any success and after that had to rely on print statements and pre-compiled test cases. Finding errors in cljs also leaves a lot to be desired (eg a typo in a field name resulted in an <code>undefined</code> value which, several functions later, became a <code>NaN</code> which then behaves interestingly inside max/min). I only started on the UCT code an hour or two before the deadline. Tom started on the user input around the same time. We played our first game against the ai about five minutes before the deadline and frantically submitted whatever code we had running.</p>

<p>If we were taking it more seriously we certainly could have done a lot more to prepare &ndash; being familiar with the cljs dev tools, actually learning the rules of go, sketching out the board representation and the UCT implementation before the weekend started, not walking a marathon on the same weekend. But winning was not the goal and instead we had a lot of fun and excitement seeing just how much we can hack together in such a short space of time.</p>

<p>Our AI is definitely not correct so it&rsquo;s difficult to evaluate the project yet. The code is relatively short and simple (especially compared to eg <a href="http://git.savannah.gnu.org/cgit/gnugo.git/tree/engine">gnugo</a>) but that doesn&rsquo;t mean much until it actually works. The performance is promising &ndash; the current version can simulate around 5k games per second in chrome. Fixing the monte-carlo step and the scoring will eat into that performance but I&rsquo;ve already spotted plenty of inefficiencies in other places. We haven&rsquo;t even started experimenting with <a href="https://github.com/ztellman/vertigo">vertigo</a> or <a href="http://asmjs.org/">asm.js</a> yet so there is certainly lots of headroom.</p>

<p>I am definitely hoping to come back to this project. To echo <a href="http://www.youtube.com/watch?v=v5dYE0CMmHQ">Zach Tellman&rsquo;s motivation</a>, it will be really interesting to see if it is possible to write a competitive go AI in a high-level language. We&rsquo;ve also thought about distributing the UCT step and have team games pitching the aggregated wisdom of a group of human players voting on their next move against the assembled computing power of their browsing machines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flowing faster: lein-gnome]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/06/25/flowing-faster-lein-gnome/"/>
    <updated>2013-06-25T20:27:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/06/25/flowing-faster-lein-gnome</id>
    <content type="html"><![CDATA[<p>After several weeks of banging my head against the empty space where the gnome-shell documentation should be, I&rsquo;ve finally revived technomancy&rsquo;s <a href="https://github.com/jamii/lein-gnome">lein-gnome</a>. It can build, package, deploy and reload gnome-shell extensions and includes a hello-world template. I&rsquo;ve also added a unified log watcher that hunts down all the various places gnome-shell might choose to put your stack-traces and a cljs repl server that runs inside your extension so you can trial-and-error your way to victory.</p>

<!--more-->


<p>Future plans for a rainy day include:</p>

<ul>
<li><p>Writing a proper nrepl server for cljs so you can <code>C-x e</code> directly from emacs (this is non-trivial for projects with crossover code).</p></li>
<li><p>Figure out how dynamic loading of bindings works in gjs so I can support tab-completion</p></li>
<li><p>Clone the Looking Glass picker tool</p></li>
</ul>


<p>In the meantime I&rsquo;m going to start work on <a href="https://github.com/jamii/golem">golem</a>. Until cljs has true nrepl support my hack for live interaction in emacs is the following:</p>

<ul>
<li><p>Save all extension state to disk on <code>disable</code></p></li>
<li><p>Load all extension state from disk on <code>enable</code></p></li>
<li><p>Hook <code>lein gnome install</code> into <code>lein cljsbuild auto</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flowing faster: foundations]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/06/04/flowing-faster-foundations/"/>
    <updated>2013-06-04T18:02:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/06/04/flowing-faster-foundations</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve spent the last few years using Gnome 2 and <a href="http://xmonad.org/">xmonad</a> on Ubuntu. Since both Ubuntu and the Gnome foundation have dropped support for Gnome 2 I&rsquo;m going to be forced to upgrade sooner or later. Fortunately I have a two week holiday followed by a new desktop at my new job, so now is a good time to break things on my laptop.</p>

<!--more-->


<h1>Choices</h1>

<p>Almost all of my work happens in bash, emacs, firefox and xmonad. What these have in common, to various extents, is what Mr Yegge likes to call <a href="http://steve-yegge.blogspot.com/2007/01/pinocchio-problem.html">living software</a>. This breaks down the interaction barrier and allows them to grow beyond point-and-grunt into an extension of my mind. This is what I look for in any system I&rsquo;m going to spend lots of time with.</p>

<p><a href="http://unity.ubuntu.com/">Unity</a> has the <a href="https://wiki.ubuntu.com/Unity/HUD">HUD</a> which is basically a CLI for individual applications. There is plugin support <a href="http://wiki.compiz.org/Plugins%E2%80%8E">via Compiz</a> but nobody seems to be writing any. It&rsquo;s also incredibly closely tied to Ubuntu and despite all the good they have done some of their recent decisions have been worrying. Individually, they are each sensible and justified but taken as a whole they make me a little nervous about investing heavily in Unity. It&rsquo;s a shame, because I would love to use the <a href="http://www.ubuntu.com/phone">Ubuntu phone</a>.</p>

<p><a href="https://live.gnome.org/GnomeShell">Gnome Shell</a> is largely written in js and is on its way to building a <a href="https://extensions.gnome.org/">healthy ecosystem of extensions</a> (or will be, if it stops breaking them every version bump). It even has an <a href="https://live.gnome.org/GnomeShell/LookingGlass">almost-functional repl</a> which surely can be shoe-horned into running <a href="https://github.com/clojure/clojurescript">cljs</a>. It&rsquo;s missing the HUD but most of the applications I use have their own CLI anyway. As proof of its flexibility, it has acquired not one but three tiling window managers: <a href="https://extensions.gnome.org/extension/657/shelltile/">shelltile</a>, <a href="https://extensions.gnome.org/extension/294/shellshape/">shellshape</a> and <a href="https://extensions.gnome.org/extension/28/gtile/">gtile</a>. Of course, all them were broken by the 3.8 update&hellip;</p>

<p><a href="http://www.kde.org/">KDE</a> has <a href="http://www.kde.org/workspaces/plasmadesktop/">plasma</a>, which it uses for &hellip; uh &hellip; desktop widgets. It also has <a href="http://userbase.kde.org/Plasma#Activities">activities</a> which are almost a fantastic idea but it uses them to manage &hellip; desktop widgets. I don&rsquo;t remember the last time I saw my desktop. If I&rsquo;m being unfair to KDE it stems from frustration &ndash; they were way ahead of the game on customisation and inter-application communication and they don&rsquo;t seem to have done anything <em>useful</em> with it.</p>

<p>There are also a million minimalist desktop environments but I prefer to have most of my work done for me, so long as I have the power to monkey-patch anything I disagree with. Vertical integration can be a beautiful thing when it works.</p>

<p>So it looks like Gnome Shell wins. People complain that it is unusable without extensions. For my purposes that is irrelevant. Most of my favourite software is unusable without customisation (especially emacs). What is important is the potential for sculpting it into something better.</p>

<h1>Experience</h1>

<p>The <a href="https://live.gnome.org/GnomeTweakTool">Gnome Tweak Tool</a> is absolutely essential. I have a few other extensions installed so far but none are particularly essential. There are a few more I will have to write myself.</p>

<p>I expected to find <a href="http://cooperteam.net/">Gnome Do</a> indispensable. I can&rsquo;t quite puy my finger on the reason but I instead found it intensely annoying and quickly uninstalled it. I think it&rsquo;s an uncanny valley thing &ndash; it&rsquo;s <em>almost</em> a real repl. Adding panels to the <a href="http://media.bestofmicro.com/fedora-linux-gnome,M-M-329998-13.png">Overview</a> might be a better option for me.</p>

<p>Most of my setup time was burned on remapping keys. Gnome doesn&rsquo;t run .xprofile or .Xmodmaprc and adding them to gnome-session doesn&rsquo;t persist the changes across suspend/hibernate. I spent a while trying to remap keys <a href="https://wiki.archlinux.org/index.php/Map_scancodes_to_keycodes">at the kernel level</a> before eventually realising that Gnome Tweak Tool has a keyboard section. It doesn&rsquo;t have all the options I want but it does mean I can crib from their remapping code later.</p>

<p>Similarly, Gnome overrides the xorg.conf touchpad settings and its settings dialog doesn&rsquo;t provide an vertical-edge-scroll option. Fortunately the setting still exists and can be set with dconf-editor under <code>org/gnome/settings-daemon/touchpad</code>. Again, I&rsquo;m leaning towards configuring this in js in the future to keep all my changes in the same place.</p>

<p>So far I&rsquo;m impressed at the potential of Gnome Shell, if not the default reality. The overview completion is fast and accurate. The notification system is a big improvement over Gnome 2 (especially the on/off toggle). The animations are smooth even on my integrated graphics. The ui and icons are simple and clear. With the dark theme enabled the shell is beautiful without getting in the way. Beauty is important in anything I spend half my life staring at.</p>

<h1>Bonus</h1>

<p>I also took the oppurtunuity to switch from <a href="https://www.archlinux.org/">Ubuntu</a> to <a href="https://www.archlinux.org/">Arch</a>. Partly because of the nervousness I mentioned earlier, but also because Ubuntu keeps fucking overwriting my config files. I&rsquo;ve given up touching anything beneath the surface because every Ubuntu upgrade breaks everything. Arch seems to be more kindly inclined towards tinkering and customisation and the wiki is a fantastic resource for learning about linux internals. It has a reputation for being unstable but since my new job will be developing in Windows on a fancy desktop the risk of breakage on my laptop isn&rsquo;t a big deal. And it doesn&rsquo;t overwrite my config files without asking.</p>

<p>The installation was straight-forward apart from a <a href="https://bbs.archlinux.org/viewtopic.php?id=162725">known mistake</a> in this months iso. My hardware all worked without any configuration. Suspend and hibernate are faster and more reliable than they were in Ubuntu. My battery life is slightly better. <a href="http://kmkeen.com/pacmatic/">Pacmatic</a> somewhat alleviates the fear of breakage. Installing proprietary software (skype, spotify) has not been a problem. I did have to <a href="https://wiki.archlinux.org/index.php/Font_Configuration#Infinality:_the_easy_way">tweak the fonts</a> and I have still have some missing unicode characters in firefox which I haven&rsquo;t yet looked into.</p>

<h1>Next</h1>

<p>The next part of this series (which is due at some undetermined point in the future) will probably be writing a hello-world style extension in <a href="https://github.com/clojure/clojurescript">cljs</a> as the first step towards a document-centric tiling window manager.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flowing faster: saving the cloud]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/06/02/flowing-faster-saving-the-cloud/"/>
    <updated>2013-06-02T03:36:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/06/02/flowing-faster-saving-the-cloud</id>
    <content type="html"><![CDATA[<p>While we&rsquo;re on the subject of backups &ndash; like most people, I rely pretty heavily on cloud services. It sort of snuck up on me. I&rsquo;m generally trying to move towards using cloud services as dumb servers so I can easily replace them. The first step is to be able to export and backup all my data.</p>

<!--more-->


<p>I considered using The Locker Project for backing up cloud services, but it appears that Singly have pivoted from <a href="http://lockerproject.org/">&lsquo;control your own data&rsquo;</a> to <a href="https://singly.com/product/">&lsquo;give all your data to us&rsquo;</a>. Back to the drawing board&hellip;</p>

<p>I use <a href="https://addons.mozilla.org/en-US/firefox/addon/opml-support/">OPML Support</a> and <a href="https://addons.mozilla.org/en-us/firefox/addon/brief/">Brief</a> to replace google reader and <a href="http://projects.gnome.org/evolution/">Evolution</a> to back up google mail, calendar and contacts. My address is on my own domain and managed by google apps. I don&rsquo;t yet use a local mail reader but Evolution looks like a reasonable fallback if I have to drop gmail.</p>

<p>For music I use <a href="http://www.tomahawk-player.org/">Tomahawk</a> with a <a href="https://www.spotify.com/">Spotify Premium</a> account as the main resolver. I create playlists in Tomahawk using both the chart apis and the <a href="http://echonest.com/">Echo Nest</a> api and sync them to Spotify to download to my phone. There&rsquo;s still a little too much manual button pressing in that process but it&rsquo;s much easier than managing my own collection. Both Tomahawk and Spotify mobile scrobble to my last.fm account which I backup with <a href="https://gitorious.org/fmthings/lasttolibre/blobs/master/lastexport.py">lastexport</a>.</p>

<p>Facebook is really the only service I couldn&rsquo;t replace, due to a combination of network effects and poor export tools. I use the builtin export service but unfortunately it seems to be pretty hard to automate. The only non-proprietary solution I could find was <a href="https://addons.mozilla.org/en-us/firefox/addon/archivefacebook/">ArchiveFacebook</a> which I suppose could be run from the command line somehow. For now I just set a monthly reminder in my calendar.</p>

<p>So now I have all my cloud data synced on my machine where the backup tools from my last post can take care of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flowing faster: backing up]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/06/01/flowing-faster-backing-up/"/>
    <updated>2013-06-01T02:12:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/06/01/flowing-faster-backing-up</id>
    <content type="html"><![CDATA[<p>A lot of the work in this series is going to be about improving my working environment. Let&rsquo;s start with backups so I don&rsquo;t lose all this hard work.</p>

<!--more-->


<p>I backup my entire filesystem to <a href="http://www.tarsnap.com/">tarsnap</a> every week. I paid around $70 for the last year of usage which is cheap for the peace of mind it brings. The tarsnap documentation is excellent so I won&rsquo;t go through the setup here, just my usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set</span> -e
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>pacman -Qeq &gt; /home/jamie/packages
</span><span class='line'><span class="nv">DATE</span><span class="o">=</span><span class="sb">`</span>date +%Y.%m.%d-%H.%m.%S<span class="sb">`</span>
</span><span class='line'>tarsnap -v -c -f <span class="s2">&quot;alien@$DATE&quot;</span> <span class="se">\</span>
</span><span class='line'>    --cachedir /usr/local/tarsnap-cache --keyfile /home/jamie/tarsnap.key <span class="se">\</span>
</span><span class='line'>    --exclude /dev --exclude /proc --exclude /sys --exclude /tmp --exclude /run --exclude /mnt --exclude /media --exclude /lost+found --exclude /swapfile <span class="se">\</span>
</span><span class='line'>    --exclude /home/jamie/.thumbnails --exclude /home/jamie/.mozilla/firefox/*.default/Cache --exclude /home/jamie/.cache/chromium <span class="se">\</span>
</span><span class='line'>    --exclude /var/lib/pacman <span class="se">\</span>
</span><span class='line'>    --exclude /home/jamie/Downloads <span class="se">\</span>
</span><span class='line'>    --exclude /home/jamie/.cache <span class="se">\</span>
</span><span class='line'>    --exclude /home/jamie/music <span class="se">\</span>
</span><span class='line'>    --exclude /home/jamie/.local/share/Trash <span class="se">\</span>
</span><span class='line'>    --exclude /home/jamie/VirtualBox* <span class="se">\</span>
</span><span class='line'>    --exclude /home/jamie/old-home <span class="se">\</span>
</span><span class='line'>    /
</span></code></pre></td></tr></table></div></figure>


<p>The first two lines of excludes are fairly standard. The rest come from looking through the output of <code>sudo du -h -t 100000000 /</code> for unnecessary folders.</p>

<p>The restore process is pretty simple even for a different machine: install the os, restore /home/jamie, reinstall all packages in /home/jamie/packages, diff the rest of the backup and copy over anything that&rsquo;s not machine-specific.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flowing faster: external memory]]></title>
    <link href="http://scattered-thoughts.net/blog/2013/05/21/flowing-faster-external-memory/"/>
    <updated>2013-05-21T20:43:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2013/05/21/flowing-faster-external-memory</id>
    <content type="html"><![CDATA[<p>I always want to be a better developer than I am. What work I do that is worthwhile happens in the few hours of flow I manage to achieve every week. A million different things break that flow every day. I suspect that a large part of achieving flow is keeping the current problem in working memory. To improve my chances I can improve my working memory, offload parts of the problem to the computer or prevent context switches. I&rsquo;m on my own with the first option, but a better development environment can help with the latter two.</p>

<!--more-->


<p>The first thing that I want to fix in this series is offloading memory. There are basically two kinds of questions I regularly deal with:</p>

<ul>
<li><p>How did I solve this problem / build this software / configure this program X months ago?</p></li>
<li><p>What was I trying to remember to change X seconds ago?</p></li>
</ul>


<p>I&rsquo;ve started using <a href="http://jblevins.org/projects/deft/">deft</a> to answer both of these. Deft stores notes in a folder full of flat files and adds an incremental search buffer to emacs (searching > organising). This means that my notes are simple plain text which I can easily edit, backup, grep or serve on the web.</p>

<p>For long-term memory I create a new note every time I solve a problem or learn something useful. Within emacs M-&lsquo; brings up the deft window, typing triggers the incremental search and hiting Enter opens the first matching note.</p>

<p>For short-term memory I have a single note called stack. Hitting C-&lsquo; opens the stack note with the cursor on a new blank line for adding items to the stack. Hitting C-DEL deletes the previous line and C-q closes the stack. Hopefully this is sufficiently low-friction that the extra memory makes up for the context switch.</p>

<p>My config is <a href="https://github.com/jamii/emacs-live-packs/blob/master/deft-pack/init.el">here</a>. I&rsquo;m considering writing a gnome-shell extension which displays the last line of the stack in the status bar to remind me what I&rsquo;m supposed to be doing when my mental stack gets rudely dumped. I also want to add the global key bindings to gnome-shell so I don&rsquo;t have to navigate to emacs first.</p>

<p>This is a very simple tool, which is kind of the point. The more stucture and options added to a note-taking tool the more effort it takes to actually use it and the more likely it is that I lose my entire mental stack whilst doing so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search trees and core.logic]]></title>
    <link href="http://scattered-thoughts.net/blog/2012/12/19/search-trees-and-core-dot-logic/"/>
    <updated>2012-12-19T20:32:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2012/12/19/search-trees-and-core-dot-logic</id>
    <content type="html"><![CDATA[<p>I mentioned in an <a href="http://scattered-thoughts.net/blog/2012/12/02/hacker-school/">earlier post</a> that I had spent some time working on <a href="https://github.com/jamii/shackles">shackles</a>, an extensible <a href="http://en.wikipedia.org/wiki/Constraint_programming">constraint solver</a> based on <a href="http://www.gecode.org/">gecode</a> with extensions for <a href="http://en.wikipedia.org/wiki/Logic_programming">logic programming</a>. I eventually gave up working on shackles in favor of using <a href="https://github.com/clojure/core.logic">core.logic</a> which is much more mature and has actual maintainers. Last week David Nolen (the author of core.logic) was visiting Hacker School so I decided to poke around inside core.logic and see what could be brought over from shackles. The <a href="https://github.com/clojure/core.logic/pull/13">first chunk of work</a> adds fair conjunction, user-configurable search and a parallel solver.</p>

<!--more-->


<p>First, a little background. From a high-level point of view, a constraint solver does three things:</p>

<ul>
<li><p>specifies a search space in the form of a set of constraints</p></li>
<li><p>turns that search space into a search tree</p></li>
<li><p>searches the resulting tree for non-failed leaves</p></li>
</ul>


<p>Currently core.logic (and cKanren before it) complects all three of these. My patch partly decomplects the latter from the first two, allowing different search algorithms to be specified independently of the problem specification.</p>

<p>Let&rsquo;s look at how core.logic works. I&rsquo;m going to gloss over a lot of implementation details in order to make the core ideas clearer.</p>

<p>The search tree in core.logic is representated as a lazy stream of the non-failed leaves of the tree. This stream can be:</p>

<ul>
<li><p><code>nil</code> &ndash; the empty stream</p></li>
<li><p><code>(Choice. head tail)</code> &ndash; a cons cell</p></li>
</ul>


<p>Disjunction of two goals produces a new goal which contains the search trees of the two goals as adjacent branches. In core.logic, this is implemented by combining their streams with <code>mplus</code>. A naive implementation might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">mplus</span> <span class="p">[</span><span class="nv">stream1</span> <span class="nv">stream2</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nil? </span><span class="nv">stream1</span><span class="p">)</span> <span class="nv">stream2</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">choice?</span> <span class="nv">stream1</span><span class="p">)</span> <span class="p">(</span><span class="nf">Choice.</span> <span class="p">(</span><span class="nf">.head</span> <span class="nv">stream1</span><span class="p">)</span> <span class="p">(</span><span class="nf">mplus</span> <span class="p">(</span><span class="nf">.tail</span> <span class="nv">stream1</span><span class="p">)</span> <span class="nv">stream2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This amounts to a depth-first search of the leaves of the tree. Unfortunately, search trees in core.logic can be infinitely deep so a depth-first search can get stuck. If the first branch has an infinite subtree we will never see results from the second branch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; simple non-terminating goal</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">forevero</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fresh</span> <span class="p">[]</span>
</span><span class='line'>    <span class="nv">forevero</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">q</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">conde</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">forvero</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[(</span><span class="nb">== </span><span class="nv">q</span> <span class="mi">1</span><span class="p">)]))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; with depth-first search blocks immediately, returning (...)</span>
</span><span class='line'><span class="c1">;; with breadth-first search blocks after the first result, returning (1 ...)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can perform breadth-first search by adding a new stream type:</p>

<ul>
<li><code>(fn [] stream)</code> &ndash; a thunk representing a branch in the search tree</li>
</ul>


<p>And then interleaving results from each branch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">mplus</span> <span class="p">[</span><span class="nv">stream1</span> <span class="nv">stream2</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>    <span class="nv">...</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">fn?</span> <span class="nv">stream1</span><span class="p">)</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">mplus</span> <span class="nv">stream2</span> <span class="p">(</span><span class="nf">stream1</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is how core.logic implements fair disjunction (fair in the sense that all branches of <code>conde</code> will be explored equally). However, we still have a problem with fair conjunction. Conjunction is performed in core.logic by running the second goal starting at each of the leaves of the tree of the first goal. In terms of the stream representation, this looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bind</span> <span class="p">[</span><span class="nv">stream</span> <span class="nv">goal</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nil? </span><span class="nv">stream</span><span class="p">)</span> <span class="nv">nil</span> <span class="c1">;; failure</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">choice?</span> <span class="nv">stream</span><span class="p">)</span> <span class="p">(</span><span class="nf">Choice.</span> <span class="p">(</span><span class="nf">bind</span> <span class="p">(</span><span class="nf">.head</span> <span class="nv">stream</span><span class="p">)</span> <span class="nv">goal</span><span class="p">)</span> <span class="p">(</span><span class="nf">bind</span> <span class="p">(</span><span class="nf">.tail</span> <span class="nv">stream</span><span class="p">)</span> <span class="nv">goal</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">fn?</span> <span class="nv">stream</span><span class="p">)</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">bind</span> <span class="p">(</span><span class="nf">stream</span><span class="p">)</span> <span class="nv">goal</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives rise to similar behaviour as the naive version of <code>mplus</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">q</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">all</span>
</span><span class='line'>    <span class="nv">forevero</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">!=</span> <span class="nv">q</span> <span class="nv">q</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; with unfair conjunction blocks immediately, returning (...)</span>
</span><span class='line'><span class="c1">;; with fair conjunction the second branch causes failure, returning ()</span>
</span></code></pre></td></tr></table></div></figure>


<p>I suspect the reason that core.logic didn&rsquo;t yet have fair conjunction is entirely due to this stream representation, which complects all three stages of constraint solving and hides the underlying search tree. Since shackles is based on gecode it has the advantage of a much clearer theoretical framework (I strongly recommend <a href="http://www.gecode.org/paper.html?id=Tack:PhD:2009">this paper</a>, not just for the insight into gecode but as a shining example of how mathematical intuition can be used to guide software design).</p>

<p>The first step in introducing fair conjunction to core.logic is to explicitly represent the search tree. The types are similar:</p>

<ul>
<li><code>nil</code> &ndash; the empty tree</li>
<li><code>(Result. state)</code> &ndash; a leaf</li>
<li><code>(Choice. left right)</code> &ndash; a branch</li>
<li><code>(Thunk. state goal)</code> &ndash; a thunk containing the current state and a sub-goal</li>
</ul>


<p>Defining <code>mplus</code> is now trivial since it is no longer responsible for interleaving results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">mplus</span> <span class="p">[</span><span class="nv">tree1</span> <span class="nv">tree2</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Choice.</span> <span class="nv">tree1</span> <span class="nv">tree2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we now have two variants of bind:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bind-unfair</span> <span class="p">[</span><span class="nv">tree</span> <span class="nv">goal</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nil? </span><span class="nv">goal</span><span class="p">)</span> <span class="nv">nil</span> <span class="c1">;; failure</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">result?</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">goal</span> <span class="p">(</span><span class="nf">.state</span> <span class="nv">tree</span><span class="p">))</span> <span class="c1">;; success, start the second tree here</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">choice?</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">Choice.</span> <span class="p">(</span><span class="nf">bind-unfair</span> <span class="p">(</span><span class="nf">.left</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">goal</span><span class="p">)</span> <span class="p">(</span><span class="nf">bind-unfair</span> <span class="p">(</span><span class="nf">.right</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">goal</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">thunk?</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">Thunk.</span> <span class="p">(</span><span class="nf">.state</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">bind-unfair</span> <span class="p">((</span><span class="nf">.goal</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">state</span><span class="p">)</span> <span class="nv">goal</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bind-fair</span> <span class="p">[</span><span class="nv">tree</span> <span class="nv">goal</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">nil? </span><span class="nv">goal</span><span class="p">)</span> <span class="nv">nil</span> <span class="c1">;; failure</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">result?</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">goal</span> <span class="p">(</span><span class="nf">.state</span> <span class="nv">tree</span><span class="p">))</span> <span class="c1">;; success, start the second tree here</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">choice?</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">Choice.</span> <span class="p">(</span><span class="nf">bind-fair</span> <span class="p">(</span><span class="nf">.left</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">goal</span><span class="p">)</span> <span class="p">(</span><span class="nf">bind-fair</span> <span class="p">(</span><span class="nf">.right</span> <span class="nv">tree</span><span class="p">)</span> <span class="nv">goal</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">thunk?</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">Thunk.</span> <span class="p">(</span><span class="nf">.state</span> <span class="nv">tree</span><span class="p">)</span> <span class="p">(</span><span class="nf">bind-fair</span> <span class="p">(</span><span class="nf">goal</span> <span class="nv">state</span><span class="p">)</span> <span class="p">(</span><span class="nf">.goal</span> <span class="nv">tree</span><span class="p">)))))</span> <span class="c1">;; interleave!</span>
</span></code></pre></td></tr></table></div></figure>


<p>The crucial difference here is that bind-fair takes advantage of the continuation-like thunk to interleave both goals, allowing each to do one thunk&rsquo;s worth of work before switching to the next.</p>

<p>(We keep bind-unfair around because it tends to be faster in practice &ndash; when you know what order your goals will be run in you can use domain knowledge to specify the most optimal order. However, making program evaluation dependent on goal ordering is less declarative and there are also some problems that cannot be specified without fair conjunction. It&rsquo;s nice to have both.)</p>

<p>Now that we explicity represent the tree we can use different search algorithms. My patch defaults to lazy, breadth-first search (to maintain the previous semantics) but it also supplies a variety of others including a <a href="https://github.com/jamii/core.logic/blob/flexible-search/src/main/clojure/clojure/core/logic/par.clj#L49">parallel depth-first search</a> using <a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html">fork-join</a>.</p>

<p>I still need to write a few more tests and sign the clojure contributor agreement before this can be considered for merging. I also have a pesky performance regression in lazy searches &ndash; this branch sometimes does more work than the original when only finding the first solution. I&rsquo;m not sure yet whether this is down to a lack of laziness somewhere or maybe just a result of a slightly different search order. Either way, it needs to be fixed.</p>

<p>After this change, core.logic still complects the specification of the search space and the generation of the search tree (eg we have to choose between bind-unfair and bind-fair in the problem specification). At some point I would like to either fix that in core.logic or finish work on shackles. For now though, I&rsquo;m going back to working on <a href="https://github.com/jamii/droplet">droplet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strucjure: motivation]]></title>
    <link href="http://scattered-thoughts.net/blog/2012/12/04/strucjure-motivation/"/>
    <updated>2012-12-04T02:31:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2012/12/04/strucjure-motivation</id>
    <content type="html"><![CDATA[<p>I feel that the readme for <a href="https://github.com/jamii/strucjure">strucjure</a> does a reasonable job of explaining how to use the library but not of explaining why you would want to. I want to do that here. I&rsquo;m going to focus on the motivation behind strucjure and the use cases for it rather than the internals, so try not to worry too much about how this all works and just focus on the ideas (the implementation itself is <a href="http://en.wikipedia.org/wiki/Parsing_expression_grammar">very simple</a> but liable to keep changing).</p>

<!--more-->


<p>The core idea is that strucjure (and the <a href="http://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=4&amp;cad=rja&amp;ved=0CFIQFjAD&amp;url=http%3A%2F%2Flambda-the-ultimate.org%2Fnode%2F2477&amp;ei=lQ69UJqrLK-WyAHC1IGIBg&amp;usg=AFQjCNEJAMQULpZ62ASYefNHadlUWTlgKA&amp;sig2=E1ePKzLJJNaFw5BfEG9rrA">OMeta</a> library on which it is based) is not just yet-another-parser, but is instead a concise language for describing, manipulating and transforming data structures. The <a href="http://www.vpri.org/">VPRI</a> folks have done some amazing things with OMeta. My goal with strucjure is to see how much further this idea can be taken.</p>

<p>(Note: For the purposes of this post I&rsquo;ll use the terms pattern and view interchangeably. There <em>is</em> a difference, but the line between the two is not yet clear to me and will probably change in future implementations)</p>

<h1>Pattern matching</h1>

<p>Pattern matching is a concept found in many functional languages. The basic idea is something like a switch statement, combined with a mini-language for describing patterns which the input should be tested against. The first pattern which matches has its corresponding branch executed.</p>

<p>As a very simple example, we can use strucjure to write fizzbuzz like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">i</span> <span class="p">(</span><span class="nb">range </span><span class="mi">100</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prn</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">match</span> <span class="p">[(</span><span class="nf">mod</span> <span class="nv">i</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">i</span> <span class="mi">5</span><span class="p">)]</span>
</span><span class='line'>          <span class="p">[</span><span class="mi">0</span> <span class="mi">0</span><span class="p">]</span> <span class="s">&quot;fizzbuzz&quot;</span>
</span><span class='line'>          <span class="p">[</span><span class="mi">0</span> <span class="nv">_</span><span class="p">]</span> <span class="s">&quot;fizz&quot;</span>
</span><span class='line'>          <span class="p">[</span><span class="nv">_</span> <span class="mi">0</span><span class="p">]</span> <span class="s">&quot;buzz&quot;</span>
</span><span class='line'>          <span class="nv">_</span>      <span class="nv">i</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a concise, readable description of the various cases and replaces a chain of if-statements.</p>

<p>If we stopped there, you could be forgiven for not caring. Simple examples don&rsquo;t really demonstrate the power of pattern matching. Let&rsquo;s instead look at a more complicated example &ndash; <a href="http://en.wikipedia.org/wiki/Red%E2%80%93black_tree">red-black trees</a>. An important operation on red-black trees is re-establishing the balance invariants after inserting a new node. Here is a java implementation of the balance operation (from <a href="http://algs4.cs.princeton.edu/33balanced/RedBlackBST.java.html">this implementation</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// make a left-leaning link lean to the right</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Node</span> <span class="nf">rotateRight</span><span class="o">(</span><span class="n">Node</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="o">(</span><span class="n">h</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">x</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">color</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">RED</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">N</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="na">N</span><span class="o">;</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">N</span> <span class="o">=</span> <span class="n">size</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">+</span> <span class="n">size</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// make a right-leaning link lean to the left</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Node</span> <span class="nf">rotateLeft</span><span class="o">(</span><span class="n">Node</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="o">(</span><span class="n">h</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Node</span> <span class="n">x</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">color</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="n">RED</span><span class="o">;</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="na">N</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="na">N</span><span class="o">;</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">N</span> <span class="o">=</span> <span class="n">size</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">+</span> <span class="n">size</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// flip the colors of a node and its two children</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">flipColors</span><span class="o">(</span><span class="n">Node</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// h must have opposite color of its two children</span>
</span><span class='line'>    <span class="k">assert</span> <span class="o">(</span><span class="n">h</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="k">assert</span> <span class="o">(!</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">)</span> <span class="o">&amp;&amp;</span>  <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span>  <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">))</span>
</span><span class='line'>        <span class="o">||</span> <span class="o">(</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">)</span>  <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">));</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="o">!</span><span class="n">h</span><span class="o">.</span><span class="na">color</span><span class="o">;</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="o">!</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">color</span><span class="o">;</span>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">color</span> <span class="o">=</span> <span class="o">!</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">color</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// restore red-black tree invariant</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Node</span> <span class="nf">balance</span><span class="o">(</span><span class="n">Node</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">assert</span> <span class="o">(</span><span class="n">h</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">))</span>                      <span class="n">h</span> <span class="o">=</span> <span class="n">rotateLeft</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">left</span><span class="o">))</span> <span class="n">h</span> <span class="o">=</span> <span class="n">rotateRight</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">isRed</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">))</span>     <span class="n">flipColors</span><span class="o">(</span><span class="n">h</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">h</span><span class="o">.</span><span class="na">N</span> <span class="o">=</span> <span class="n">size</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">left</span><span class="o">)</span> <span class="o">+</span> <span class="n">size</span><span class="o">(</span><span class="n">h</span><span class="o">.</span><span class="na">right</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">h</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This pile of if-statements obscures the intent of the code, which is to re-arrange the tree so that no red node has a red child. What we really want to see is &lsquo;if the tree looks like foo, replace it with bar&rsquo;. Using pattern matching we can express this directly (code based on <a href="http://www.cs.cornell.edu/courses/cs3110/2009sp/lectures/lec11.html">this implementation</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Leaf</span> <span class="p">[])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Red</span> <span class="p">[</span><span class="nb">left </span><span class="nv">value</span> <span class="nv">right</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">Black</span> <span class="p">[</span><span class="nb">left </span><span class="nv">value</span> <span class="nv">right</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">balance</span>
</span><span class='line'>  <span class="c1">;; if it looks like one of these...</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">or</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">Black.</span> <span class="p">(</span><span class="nf">Red.</span> <span class="p">(</span><span class="nf">Red.</span> <span class="nv">?a</span> <span class="nv">?x</span> <span class="nv">?b</span><span class="p">)</span> <span class="nv">?y</span> <span class="nv">?c</span><span class="p">)</span> <span class="nv">?z</span> <span class="nv">?d</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">Black.</span> <span class="p">(</span><span class="nf">Red.</span> <span class="nv">?a</span> <span class="nv">?x</span> <span class="p">(</span><span class="nf">Red.</span> <span class="nv">?b</span> <span class="nv">?y</span> <span class="nv">?c</span><span class="p">))</span> <span class="nv">?z</span> <span class="nv">?d</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">Black.</span> <span class="nv">?a</span> <span class="nv">?x</span> <span class="p">(</span><span class="nf">Red.</span> <span class="p">(</span><span class="nf">Red.</span> <span class="nv">?b</span> <span class="nv">?y</span> <span class="nv">?c</span><span class="p">)</span> <span class="nv">?z</span> <span class="nv">?d</span><span class="p">))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">Black.</span> <span class="nv">?a</span> <span class="nv">?x</span> <span class="p">(</span><span class="nf">Red.</span> <span class="nv">?b</span> <span class="nv">?y</span> <span class="p">(</span><span class="nf">Red.</span> <span class="nv">?c</span> <span class="nv">?z</span> <span class="nv">?d</span><span class="p">))))</span>
</span><span class='line'>  <span class="c1">;; replace it with this...</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">Red.</span> <span class="p">(</span><span class="nf">Black.</span> <span class="nv">a</span> <span class="nv">x</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">y</span> <span class="p">(</span><span class="nf">Black.</span> <span class="nv">c</span> <span class="nv">z</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">;; otherwise, leave it alone</span>
</span><span class='line'>  <span class="nv">?other</span>
</span><span class='line'>  <span class="nv">other</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Note that this isn&rsquo;t exactly the same operation as the code above, because the corresponding implementation has a slightly different insert algorithm too. Nevertheless, converting this operation to java would result in the same grotesque expansion of if-statements).</p>

<p>Strucjure is not very optimized yet, but if you use a more mature pattern-matching library then this code would be as fast as what you would write by hand. For complex patterns <a href="https://github.com/clojure/core.match">core.match</a> often does a better job of optimizing the decision tree than I can manage by hand, in much the same way that GCC does a better job of writing assembly code than I ever could.</p>

<p>Strucjure patterns are first-class values and can call other patterns or recursively call themselves, so they can express much more complex patterns than other pattern matchers. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">balanced-height</span>
</span><span class='line'>  <span class="nv">Leaf</span>
</span><span class='line'>  <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">Black.</span> <span class="nv">_</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">balanced-height</span> <span class="nv">?l</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">balanced-height</span> <span class="nv">?r</span><span class="p">))</span>
</span><span class='line'>       <span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="nv">l</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">Red.</span> <span class="nv">_</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not </span><span class="nv">Red</span><span class="p">)</span> <span class="p">(</span><span class="nf">balanced-height</span> <span class="nv">?l</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not </span><span class="nv">Red</span><span class="p">)</span> <span class="p">(</span><span class="nf">balanced-height</span> <span class="nv">?r</span><span class="p">)))</span>
</span><span class='line'>       <span class="o">#</span><span class="p">(</span><span class="nb">= </span><span class="nv">l</span> <span class="nv">r</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">l</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a pattern which only matches balanced red-black trees, by recursively matching against each branch and returning the number of black nodes per path (see property 5 <a href="http://en.wikipedia.org/wiki/Red%E2%80%93black_tree#Properties">here</a>).</p>

<h1>Parsing</h1>

<p>Strucjure supports patterns which only consume part of the input and can chain these patterns together. Combine that with pattern matching and you can very easily write back-tracking recursive-descent parsers.</p>

<p>We can use this for traditional text parsing (you have to be feeling a little masochistic at the moment because strucjure can&rsquo;t directly handle strings yet, only sequences of \c \h \a \r \s). For example, strucjure <a href="http://scattered-thoughts.net/blog/2012/10/25/strucjure-reading-the-readme/">parses its own readme</a> to ensure all the examples are correct.</p>

<p>Parsing doesn&rsquo;t have to be limited to text. We can apply the same techniques to any sequential data structure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">user&gt;</span> <span class="p">(</span><span class="nf">defnview</span> <span class="nv">zero-or-more-prefix</span> <span class="p">[</span><span class="nv">elem</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">prefix</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nf">elem</span> <span class="nv">?x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more-prefix</span> <span class="nv">elem</span><span class="p">)</span> <span class="nv">?xs</span><span class="p">))</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">xs</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">prefix</span> <span class="p">)</span> <span class="nv">nil</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/zero-or-more-prefix</span>
</span><span class='line'><span class="nv">user&gt;</span> <span class="p">(</span><span class="nf">defview</span> <span class="nv">self-counting</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">prefix</span> <span class="mi">1</span><span class="p">)</span> <span class="ss">&#39;one</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">prefix</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">)</span> <span class="ss">&#39;two</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">prefix</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">)</span> <span class="ss">&#39;three</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="ss">&#39;user/self-counting</span>
</span><span class='line'><span class="nv">user&gt;</span> <span class="p">(</span><span class="nf">run</span> <span class="p">(</span><span class="nf">zero-or-more-prefix</span> <span class="nv">self-counting</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="nf">one</span> <span class="nv">three</span> <span class="nv">two</span> <span class="nv">one</span> <span class="nv">two</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we live in lisp land, code is data too. We can use strucjure to easily and <em>readably</em> (hopefully) operate over sexps.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; generic parser for (right-binding) infix operators with precedence</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">value?</span> <span class="p">[</span><span class="nv">all</span> <span class="nv">form</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">not-any? </span><span class="o">#</span><span class="p">(</span><span class="nb">contains? </span><span class="nv">%</span> <span class="nv">form</span><span class="p">)</span> <span class="nv">all</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bind*</span> <span class="p">[</span><span class="nv">all</span> <span class="nv">current</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">if-let </span><span class="p">[[</span><span class="nv">ops</span> <span class="o">&amp;</span> <span class="nv">tighter</span><span class="p">]</span> <span class="nv">current</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">view</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">prefix</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">bind*</span> <span class="nv">all</span> <span class="nv">tighter</span><span class="p">)</span> <span class="nv">?x</span><span class="p">)</span> <span class="p">(</span><span class="nb">and </span><span class="o">#</span><span class="p">(</span><span class="nb">contains? </span><span class="nv">ops</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">?op</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">bind*</span> <span class="nv">all</span> <span class="nv">current</span><span class="p">)</span> <span class="nv">?y</span><span class="p">))</span> <span class="o">`</span><span class="p">(</span><span class="o">~</span><span class="nv">op</span> <span class="o">~</span><span class="nv">x</span> <span class="o">~</span><span class="nv">y</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">prefix</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">bind*</span> <span class="nv">all</span> <span class="nv">tighter</span><span class="p">)</span> <span class="nv">?x</span><span class="p">))</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">view</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">prefix</span> <span class="p">[((</span><span class="nf">bind*</span> <span class="nv">all</span> <span class="nv">all</span><span class="p">)</span> <span class="nv">?x</span><span class="p">)])</span> <span class="nv">x</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">prefix</span> <span class="p">(</span><span class="nb">and </span><span class="o">#</span><span class="p">(</span><span class="nf">value?</span> <span class="nv">all</span> <span class="nv">%</span><span class="p">)</span> <span class="nv">?x</span><span class="p">))</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">bind</span> <span class="p">[</span><span class="nv">binding-levels</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">bind*</span> <span class="nv">binding-levels</span> <span class="nv">binding-levels</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; run &#39;bind with basic arithmetic precedences</span>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">math</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run</span> <span class="p">(</span><span class="nf">bind</span> <span class="p">[</span><span class="o">#</span><span class="p">{</span><span class="ss">&#39;+</span> <span class="ss">&#39;-</span><span class="p">}</span> <span class="o">#</span><span class="p">{</span><span class="ss">&#39;*</span> <span class="ss">&#39;/</span><span class="p">}])</span> <span class="nv">args</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">macroexpand </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">math</span> <span class="mi">1</span> <span class="nb">- </span><span class="mi">2</span> <span class="nb">+ </span><span class="mi">3</span> <span class="nb">- </span><span class="mi">4</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; (- 1 (+ 2 (- 3 4)))</span>
</span><span class='line'><span class="p">(</span><span class="nb">macroexpand </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">math</span> <span class="mi">1</span> <span class="nb">+ </span><span class="mi">2</span> <span class="nb">* </span><span class="mi">7</span> <span class="nb">+ </span><span class="mi">1</span> <span class="nb">/ </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; (+ 1 (+ (* 2 7) (/ 1 2)))</span>
</span><span class='line'><span class="p">(</span><span class="nb">macroexpand </span><span class="o">&#39;</span><span class="p">(</span><span class="nf">math</span> <span class="mi">1</span> <span class="nb">+ </span><span class="mi">2</span> <span class="nb">* </span><span class="p">(</span><span class="mi">7</span> <span class="nb">+ </span><span class="mi">1</span><span class="p">)</span> <span class="nb">/ </span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; (+ 1 (* 2 (/ (7 + 1) 2)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>No more death-by-polish-notation!</p>

<p>(The operators above really ought to bind to the left but, unlike ometa, strucjure doesn&rsquo;t yet support <a href="http://en.wikipedia.org/wiki/Left_recursion">left-recursion</a> and I&rsquo;m too lazy to manually transform the grammar. It&rsquo;s a temporary limitation.)</p>

<p>Taking this to its logical conclusion, the syntax for patterns and views in strucjure is itself defined <a href="https://github.com/jamii/strucjure/blob/master/src/strucjure/parser.clj#L178">using views</a>. This is a fairly complex DSL but with strucjure it&rsquo;s was very easy to write, read and modify the parser.</p>

<h1>Generic programming</h1>

<p>Clojure has some great facilities for generic traversals in the form of clojure.walk:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">walk</span>
</span><span class='line'>  <span class="s">&quot;Traverses form, an arbitrary data structure.  inner and outer are</span>
</span><span class='line'><span class="s">  functions.  Applies inner to each element of form, building up a</span>
</span><span class='line'><span class="s">  data structure of the same type, then applies outer to the result.</span>
</span><span class='line'><span class="s">  Recognizes all Clojure data structures. Consumes seqs as with doall.&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.1&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">inner</span> <span class="nv">outer</span> <span class="nv">form</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">list?</span> <span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nf">outer</span> <span class="p">(</span><span class="nb">apply list </span><span class="p">(</span><span class="nb">map </span><span class="nv">inner</span> <span class="nv">form</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">instance? </span><span class="nv">clojure.lang.IMapEntry</span> <span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nf">outer</span> <span class="p">(</span><span class="nf">vec</span> <span class="p">(</span><span class="nb">map </span><span class="nv">inner</span> <span class="nv">form</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nb">seq? </span><span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nf">outer</span> <span class="p">(</span><span class="nb">doall </span><span class="p">(</span><span class="nb">map </span><span class="nv">inner</span> <span class="nv">form</span><span class="p">)))</span>
</span><span class='line'>   <span class="p">(</span><span class="nf">coll?</span> <span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nf">outer</span> <span class="p">(</span><span class="nb">into </span><span class="p">(</span><span class="nf">empty</span> <span class="nv">form</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="nv">inner</span> <span class="nv">form</span><span class="p">)))</span>
</span><span class='line'>   <span class="ss">:else</span> <span class="p">(</span><span class="nf">outer</span> <span class="nv">form</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">postwalk</span>
</span><span class='line'>  <span class="s">&quot;Performs a depth-first, post-order traversal of form. Calls f on</span>
</span><span class='line'><span class="s">each sub-form, uses f&#39;s return value in place of the original.</span>
</span><span class='line'><span class="s">Recognizes all Clojure data structures except sorted-map-by.</span>
</span><span class='line'><span class="s">Consumes seqs as with doall.&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:added</span> <span class="s">&quot;1.1&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">f</span> <span class="nv">form</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">walk</span> <span class="p">(</span><span class="nb">partial </span><span class="nv">postwalk</span> <span class="nv">f</span><span class="p">)</span> <span class="nv">f</span> <span class="nv">form</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Essentially, all this is doing is specifying how to take apart clojure data structures and how to put them back together again. Strucjure supports passing optional :pre-view and :post-view functions to modify the input to or output from any named view encountered during parsing, so we can do something very similar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">clojure</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="nv">list?</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">clojure</span><span class="p">)</span> <span class="nv">?xs</span><span class="p">))</span> <span class="nv">xs</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="nv">clojure.lang.IMapEntry</span> <span class="p">[</span><span class="nv">?x</span> <span class="nv">?y</span><span class="p">])</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and seq? </span><span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">clojure</span><span class="p">)</span> <span class="nv">?xs</span><span class="p">))</span> <span class="nv">xs</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="nv">coll?</span> <span class="nv">?coll</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">clojure</span><span class="p">)</span> <span class="nv">?xs</span><span class="p">))</span> <span class="p">(</span><span class="nb">into </span><span class="p">(</span><span class="nf">empty</span> <span class="nv">coll</span><span class="p">)</span> <span class="nv">xs</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">?other</span> <span class="nv">other</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">postwalk</span> <span class="p">[</span><span class="nv">form</span> <span class="nv">f</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run</span> <span class="nv">clojure</span> <span class="nv">form</span> <span class="p">{</span><span class="ss">:post-view</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">_</span> <span class="nv">sub-form</span><span class="p">]</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">sub-form</span><span class="p">)}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem with using this (or clojure.walk) for generic traversals is that it loses context. When a given sub-form is encountered, the function f is given no indication of where in the data structure that sub-form is or how it is being used. If we apply the above idea to domain-specific views we can do generic traversals <em>with context</em>. The motivating example for this was a simple game I was porting called <a href="https://github.com/jamii/l-seed">l-seed</a> (I haven&rsquo;t yet updated l-seed to use strucjure, but you can see a precursor to it in <a href="https://github.com/jamii/l-seed/blob/master/src/l_seed/syntax.clj">l-seed.syntax</a>). In l-seed, players submit programs defining the growth of their plant species and compete with other player&rsquo;s plants for sunlight and nutrients. The plant language can be defined like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+name+</span>
</span><span class='line'>  <span class="nb">string? </span><span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+tag+</span>
</span><span class='line'>  <span class="nb">string? </span><span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+length+</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="nv">number?</span> <span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="mi">0</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+direction+</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="nv">number?</span> <span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="mi">-360</span> <span class="nv">%</span> <span class="mi">360</span><span class="p">))</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+relation+</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or </span><span class="ss">&#39;=</span> <span class="ss">&#39;&gt;</span> <span class="ss">&#39;&gt;=</span> <span class="ss">&#39;&lt;</span> <span class="ss">&#39;&lt;=</span><span class="p">)</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+property+</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or </span><span class="ss">&#39;tag</span> <span class="ss">&#39;length</span> <span class="ss">&#39;direction</span><span class="p">)</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+condition+</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;and</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">+condition+</span><span class="p">)</span> <span class="nv">?conditions</span><span class="p">)]</span> <span class="p">(</span><span class="nb">cons </span><span class="ss">&#39;and</span> <span class="nv">conditions</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;or</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">+condition+</span><span class="p">)</span> <span class="nv">?conditions</span><span class="p">)]</span> <span class="p">(</span><span class="nb">cons </span><span class="ss">&#39;or</span> <span class="nv">conditions</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;not</span> <span class="p">(</span><span class="nf">+condition+</span> <span class="nv">?condition</span><span class="p">)]</span> <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;not</span> <span class="nv">condition</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[(</span><span class="nf">+relation+</span> <span class="nv">?relation</span><span class="p">)</span> <span class="p">(</span><span class="nf">+property+</span> <span class="nv">?property</span><span class="p">)</span> <span class="nv">?value</span><span class="p">]</span> <span class="p">(</span><span class="nb">list </span><span class="nv">relation</span> <span class="nv">property</span> <span class="nv">value</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+condition-head+</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;when</span> <span class="p">(</span><span class="nf">+condition+</span> <span class="nv">?condition</span><span class="p">)]</span> <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;when</span> <span class="nv">condition</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">&#39;whenever</span> <span class="ss">&#39;whenever</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+action+</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;grow-by</span> <span class="p">(</span><span class="nf">+length+</span> <span class="nv">?length</span><span class="p">)]</span> <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;grow-by</span> <span class="nv">length</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;turn-by</span> <span class="p">(</span><span class="nf">+direction+</span> <span class="nv">?direction</span><span class="p">)]</span> <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;turn-by</span> <span class="nv">direction</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;turn-to</span> <span class="p">(</span><span class="nf">+direction+</span> <span class="nv">?direction</span><span class="p">)]</span> <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;turn-to</span> <span class="nv">direction</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;tag</span> <span class="p">(</span><span class="nf">+tag+</span> <span class="nv">?tag</span><span class="p">)]</span> <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;tag</span> <span class="nv">tag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;blossom</span> <span class="p">(</span><span class="nf">+tag+</span> <span class="nv">?tag</span><span class="p">)]</span> <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;blossom</span> <span class="nv">tag</span><span class="p">)</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;branch</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="p">(</span><span class="nf">zero-or-more</span> <span class="nv">+action+</span><span class="p">))</span> <span class="nv">?action-lists</span><span class="p">)]</span> <span class="p">(</span><span class="nb">cons </span><span class="ss">&#39;branch</span> <span class="nv">action-lists</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+rule+</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">&#39;rule</span> <span class="p">(</span><span class="nf">+name+</span> <span class="nv">?name</span><span class="p">)</span> <span class="p">(</span><span class="nf">+condition-head+</span> <span class="nv">?condition-head</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">+action+</span><span class="p">)</span> <span class="nv">?actions</span><span class="p">)]</span> <span class="p">(</span><span class="nb">apply list </span><span class="ss">&#39;rule</span> <span class="nb">name </span><span class="nv">condition-head</span> <span class="nv">actions</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">+rules+</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">+rule+</span><span class="p">)</span> <span class="nv">?rules</span><span class="p">)]</span> <span class="nv">rules</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Note that we specify both how to take apart a data structure and how to put it together. Really, the latter should be derived from the former. I think strucjure will eventually feature reversible patterns for this purpose.)</p>

<p>We can then operate on these programs in a generic way. For example, deciding which rule to execute next:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">select*</span> <span class="p">[</span><span class="nv">properties</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">defview</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+relation+</span> <span class="nv">?relation</span><span class="p">]</span> <span class="p">(</span><span class="nb">resolve </span><span class="nv">relation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+property+</span> <span class="nv">?property</span><span class="p">]</span> <span class="p">(</span><span class="nb">get </span><span class="nv">properties</span> <span class="nv">property</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+condition+</span> <span class="p">[</span><span class="ss">&#39;and</span> <span class="o">&amp;</span> <span class="nv">?conds</span><span class="p">]]</span> <span class="p">(</span><span class="nb">every? true? </span><span class="nv">conds</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+condition+</span> <span class="p">[</span><span class="ss">&#39;or</span> <span class="o">&amp;</span> <span class="nv">?conds</span><span class="p">]]</span> <span class="p">(</span><span class="nb">some true? </span><span class="nv">conds</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+condition+</span> <span class="p">[</span><span class="ss">&#39;not</span> <span class="nv">?cond</span><span class="p">]]</span> <span class="p">(</span><span class="nb">not </span><span class="nv">cond</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+condition+</span> <span class="p">[</span><span class="nv">?relation</span> <span class="nv">?property</span> <span class="nv">?value</span><span class="p">]]</span> <span class="p">(</span><span class="nf">relation</span> <span class="nv">property</span> <span class="nv">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+condition-head+</span> <span class="p">[</span><span class="ss">&#39;when</span> <span class="nv">?condition</span><span class="p">]]</span> <span class="nv">condition</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+condition-head+</span> <span class="p">[</span><span class="ss">&#39;whenever</span><span class="p">]]</span> <span class="nv">true</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+rule+</span> <span class="p">[</span><span class="ss">&#39;rule</span> <span class="nv">_</span> <span class="nv">?condition</span> <span class="o">&amp;</span> <span class="nv">?actions</span><span class="p">]]</span> <span class="p">(</span><span class="nb">when </span><span class="nv">condition</span> <span class="nv">actions</span><span class="p">)</span>
</span><span class='line'>    <span class="p">[</span><span class="o">`</span><span class="nv">+rules+</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">?rules</span><span class="p">]]</span> <span class="p">(</span><span class="nf">choose</span> <span class="p">(</span><span class="nb">filter seq </span><span class="nv">rules</span><span class="p">))</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">_</span> <span class="nv">?other</span><span class="p">]</span> <span class="nv">other</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">select </span><span class="p">[</span><span class="nv">rules</span> <span class="nv">properties</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Pick a valid rule and return its list of actions (or nil if no rules are valid)&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">utilpostwalk</span> <span class="nv">+rules+</span> <span class="nv">rules</span> <span class="p">(</span><span class="nf">select*</span> <span class="nv">properties</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Writing code like this allows us to separate the shape of the data from the computation we perform over it.</p>

<p>We&rsquo;re also not limited to just walking over data structures. We can perform more complex operations in the same generic fashion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">map-reduce</span> <span class="p">[</span><span class="nv">strucjure</span> <span class="nv">form</span> <span class="nv">map-op</span> <span class="nv">reduce-op</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Call map-op on every sub-form and reduce results with reduce-op&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">acc</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">(</span><span class="nf">reduce-op</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">run</span> <span class="nv">strucjure</span> <span class="nv">form</span>
</span><span class='line'>           <span class="p">{</span><span class="ss">:post-view</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nb">name </span><span class="nv">form</span><span class="p">]</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">swap!</span> <span class="nv">acc</span> <span class="nv">reduce-op</span> <span class="p">(</span><span class="nf">map-op</span> <span class="nb">name </span><span class="nv">form</span><span class="p">))</span>
</span><span class='line'>                         <span class="nv">form</span><span class="p">)})</span>
</span><span class='line'>    <span class="err">@</span><span class="nv">acc</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">collect</span> <span class="p">[</span><span class="nv">strucjure</span> <span class="nv">form</span> <span class="nv">filter-op</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Return all sub-forms satisfying filter-op&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">acc</span> <span class="p">(</span><span class="nf">atom</span> <span class="nv">nil</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">run</span> <span class="nv">strucjure</span> <span class="nv">form</span>
</span><span class='line'>           <span class="p">{</span><span class="ss">:post-view</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nb">name </span><span class="nv">form</span><span class="p">]</span>
</span><span class='line'>                         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">filter-op</span> <span class="nb">name </span><span class="nv">form</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">swap!</span> <span class="nv">acc</span> <span class="nb">conj </span><span class="nv">result</span><span class="p">)))})</span>
</span><span class='line'>    <span class="err">@</span><span class="nv">acc</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Types</h1>

<p>I originally learned to code in haskell. One of the things I miss about strong static typing is it that it automatically provides documentation about the data structures used in your program. Strucjure patterns can fulfill the same role. In l-seed, if you are confused about what a rule should look like you can just go look at the +rule+ pattern.</p>

<p>We can&rsquo;t quite get static typing out of this, but we do get runtime checking for complex typedata-structures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">defgenotype</span> <span class="p">[</span><span class="nb">name </span><span class="o">&amp;</span> <span class="nv">rules</span><span class="p">]</span>
</span><span class='line'>  <span class="c1">;; compile-time syntax check for the genotype language</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run</span> <span class="nv">+rules+</span> <span class="nv">rules</span><span class="p">)</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="k">def </span><span class="o">~</span><span class="nb">name </span><span class="o">&#39;~</span><span class="p">(</span><span class="nf">vec</span> <span class="nv">rules</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In theory, it should also be possible to generate random data structures satisfying a given pattern. This would be useful for providing examples and for <a href="https://github.com/clojure/test.generative">generative testing</a>. In erlang, <a href="https://github.com/manopapad/proper">proper</a> allows using type-specs directly alongside hand-written generators. I haven&rsquo;t yet implemented this in strucjure but I think it should be reasonably easy once reversible patterns are implemented.</p>

<h1>State machines</h1>

<p>One can think of parsers in general as state machines with look-ahead and backtracking. OMeta takes this idea and runs with it:</p>

<blockquote><p>Most  interesting  ideas  have  more  than  one  fruitful  way  to  view  them,  and  it  occurred  to  us  that,
abstractly,  one  could  think  of  TCP/IP  as  a  kind  of  “non‐deterministic  parser  with  balancing
heuristics”,  in  that  it  takes  in  a  stream  of  things,  does  various  kinds  of  pattern‐matching  on  them,
deals with errors by backing up and taking other paths, and produces a transformation of the input in
a specified form as a result.</p>

<p>Since the language transformation techniques we use operate on arbitrary objects, not just strings (see
above), and include some abilities of both standard and logic programming, it seemed that this could
be used to make a very compact TCP/IP. Our first attempt was about 160 lines of code that was robust
enough to run a website. We think this can be done even more compactly and clearly, and we plan to
take another pass at this next year.</p></blockquote>

<p>I haven&rsquo;t yet tried doing anything like this in strucjure, but all the machinery is there. It would make an interesting complement to <a href="https://github.com/jamii/droplet">droplet</a>.</p>

<h1>Moving forward</h1>

<p>There are of lot of different directions for improvement and experimentation.</p>

<p>One of my top priorities is better error reporting. This sucks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">clojure.lang.ExceptionInfo</span><span class="err">:</span> <span class="nv">throw+</span><span class="err">:</span> <span class="o">#</span><span class="nv">strucjure.view.PartialMatch</span><span class="p">{</span><span class="ss">:view</span> <span class="o">#</span><span class="nv">strucjure.view.Or</span><span class="p">{</span><span class="ss">:views</span> <span class="p">[</span><span class="o">#</span><span class="nv">strucjure.view.Match</span><span class="p">{</span><span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.Seq</span><span class="p">{</span><span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.Chain</span><span class="p">{</span><span class="ss">:patterns</span> <span class="p">[</span><span class="o">#</span><span class="nv">strucjure.view.Import</span><span class="p">{</span><span class="ss">:view-fun</span> <span class="o">#</span><span class="nv">&lt;test$bind_STAR_$fn__2339</span> <span class="nv">test$bind_STAR_$fn__2339</span><span class="err">@</span><span class="mi">60</span><span class="nv">a896b8&gt;</span>, <span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.Bind</span><span class="p">{</span><span class="ss">:symbol</span> <span class="nv">x</span><span class="p">}}</span> <span class="o">#</span><span class="nv">strucjure.pattern.Head</span><span class="p">{</span><span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.And</span><span class="p">{</span><span class="ss">:patterns</span> <span class="p">[</span><span class="o">#</span><span class="nv">strucjure.pattern.Guard</span><span class="p">{</span><span class="ss">:fun</span> <span class="o">#</span><span class="nb">&lt; </span><span class="nv">clojure.lang.AFunction$1</span><span class="err">@</span><span class="mi">5</span><span class="nv">c3f3b9b&gt;</span><span class="p">}</span> <span class="o">#</span><span class="nv">strucjure.pattern.Bind</span><span class="p">{</span><span class="ss">:symbol</span> <span class="nv">op</span><span class="p">}]}}</span> <span class="o">#</span><span class="nv">strucjure.view.Import</span><span class="p">{</span><span class="ss">:view-fun</span> <span class="o">#</span><span class="nv">&lt;test$bind_STAR_$fn__2343</span> <span class="nv">test$bind_STAR_$fn__2343</span><span class="err">@</span><span class="mi">3</span><span class="nv">b626c6d&gt;</span>, <span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.Bind</span><span class="p">{</span><span class="ss">:symbol</span> <span class="nv">y</span><span class="p">}}]}}</span>, <span class="ss">:result-fun</span> <span class="o">#</span><span class="nb">&lt; </span><span class="nv">clojure.lang.AFunction$1</span><span class="err">@</span><span class="mi">3</span><span class="nv">abc8690&gt;</span><span class="p">}</span> <span class="o">#</span><span class="nv">strucjure.view.Match</span><span class="p">{</span><span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.Seq</span><span class="p">{</span><span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.Chain</span><span class="p">{</span><span class="ss">:patterns</span> <span class="p">[</span><span class="o">#</span><span class="nv">strucjure.view.Import</span><span class="p">{</span><span class="ss">:view-fun</span> <span class="o">#</span><span class="nv">&lt;test$bind_STAR_$fn__2347</span> <span class="nv">test$bind_STAR_$fn__2347</span><span class="err">@</span><span class="mi">2</span><span class="nv">f267610&gt;</span>, <span class="ss">:pattern</span> <span class="o">#</span><span class="nv">strucjure.pattern.Bind</span><span class="p">{</span><span class="ss">:symbol</span> <span class="nv">x</span><span class="p">}}]}}</span>, <span class="ss">:result-fun</span> <span class="o">#</span><span class="nb">&lt; </span><span class="nv">clojure.lang.AFunction$1</span><span class="err">@</span><span class="mi">6112</span><span class="nv">c9f&gt;</span><span class="p">}]}</span>, <span class="ss">:input</span> <span class="p">(</span><span class="mi">1</span> <span class="nb">- </span><span class="mi">2</span> <span class="nb">+ </span><span class="mi">3</span> <span class="nb">- </span><span class="mi">4</span><span class="p">)</span>, <span class="ss">:remaining</span> <span class="p">(</span><span class="nb">- </span><span class="mi">2</span> <span class="nb">+ </span><span class="mi">3</span> <span class="nb">- </span><span class="mi">4</span><span class="p">)</span>, <span class="ss">:output</span> <span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have some ideas about how to improve this but nothing totally concrete. I could, at the very least, return the bindings that existed at the point of failure along with some kind of failure stack. If I can figure out a reasonable way to implement <a href="http://en.wikipedia.org/wiki/Cut_%28logic_programming%29">cut</a> that will also help.</p>

<p>Another short-term priority is some form of <a href="http://en.wikipedia.org/wiki/Tail_call#Tail_recursion_modulo_cons">tail call elemination</a>. Many patterns and views are naturally implemented in a recursive fashion:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defnview</span> <span class="nv">zero-or-more</span> <span class="p">[</span><span class="nv">elem</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prefix</span> <span class="p">(</span><span class="nf">elem</span> <span class="nv">?x</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">elem</span><span class="p">)</span> <span class="nv">?xs</span><span class="p">))</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">xs</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prefix</span> <span class="p">)</span> <span class="nv">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in the current implementation of strucjure this will quickly overflow the stack. The current workaround is to define such views by hand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defrecord </span><span class="nv">ZeroOrMore</span> <span class="p">[</span><span class="nv">view</span><span class="p">]</span>
</span><span class='line'>  <span class="nv">View</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">run*</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">input</span> <span class="nv">opts</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nf">or</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">nil? </span><span class="nv">input</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">instance? </span><span class="nv">clojure.lang.Seqable</span> <span class="nv">input</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">elems</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">input</span><span class="p">)</span>
</span><span class='line'>             <span class="nv">outputs</span> <span class="nv">nil</span><span class="p">]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">if-let </span><span class="p">[[</span><span class="nv">elem</span> <span class="o">&amp;</span> <span class="nv">elems</span><span class="p">]</span> <span class="nv">elems</span><span class="p">]</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">if-let </span><span class="p">[[</span><span class="nv">remaining</span> <span class="nv">output</span><span class="p">]</span> <span class="p">(</span><span class="nf">run</span> <span class="nv">view</span> <span class="nv">elem</span> <span class="nv">opts</span><span class="p">)]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">nil? </span><span class="nv">remaining</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">recur</span> <span class="nv">elems</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">output</span> <span class="nv">outputs</span><span class="p">))</span>
</span><span class='line'>              <span class="p">[(</span><span class="nb">cons </span><span class="nv">elem</span> <span class="nv">elems</span><span class="p">)</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">outputs</span><span class="p">)])</span>
</span><span class='line'>            <span class="p">[(</span><span class="nb">cons </span><span class="nv">elem</span> <span class="nv">elems</span><span class="p">)</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">outputs</span><span class="p">)])</span>
</span><span class='line'>          <span class="p">[</span><span class="nv">nil</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">outputs</span><span class="p">)])))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">zero-or-more</span> <span class="nv">-&gt;ZeroOrMore</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is gross. I don&rsquo;t have any ideas on how to overcome this.</p>

<p>I&rsquo;ve already briefly mentioned reversible patterns. At the beginning of this post I warned that I would use the terms view and pattern interchangeably. The line between them in strucjure is currently blurry but I think that the distinction should be that patterns must be reversible while views are allowed to destroy information.</p>

<p>Lastly, there will eventually be a need for some level of optimization. Given the extra flexibility in strucjure I don&rsquo;t expect to ever be as fast as core.match but there is certainly lots of room for improvement on the current code. Originally, strucjure patterns were compiled into efficient clojure code but the implementation was complicated and it was difficult to rapidly iterate around it. I will probably return to compilation once the semantics and interface settle down.</p>

<p>For now, I&rsquo;m going to dogfood strucjure in various projects while ruminating on improvements. I&rsquo;m already very happy with how much leverage can be had from such a simple idea, especially if I can fix the problems above. Hopefully the examples here might get other people thinking along the same lines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School]]></title>
    <link href="http://scattered-thoughts.net/blog/2012/12/02/hacker-school/"/>
    <updated>2012-12-02T01:16:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2012/12/02/hacker-school</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve spent the last ten weeks or so at <a href="https://www.hackerschool.com/">Hacker School</a>. It&rsquo;s something like a writer&rsquo;s retreat for programmers. Unlike a traditional school there is very little structure and the focus is on project-based learning. In order to make the most of this environment, it&rsquo;s important to be clear exactly what your goals are.</p>

<!--more-->


<p>So here is my goal &ndash; to create better tools for the problems I regularly encounter. My focus is on building distributed systems and p2p networks but I suspect that these tools will be generally useful. When working as a freelancer I am necessarily constrained to using proven ideas and techniques because the risk assumed is not mine. Hacker School is a chance for me to explore some more far-out ideas. These ideas are drawn primarily from two places: the <a href="http://vpri.org/">Viewpoint Research Institute</a> and the <a href="boom.cs.berkeley.edu/">Berkeley Order Of Magnitude</a> project.</p>

<h1>Viewpoint Research Institute</h1>

<p>Specifically, I&rsquo;m interested in the <a href="http://www.vpri.org/pdf/tr2011004_steps11.pdf">Steps Towards Expressive Programming</a> project. Their goal is no less than the reinvention of programming. By way of proof of concept they aim to develop an entire computing system, from OS to compilers to applications, in less than 20k LOC. Such a system would be compact enough to be understood in its entirety by a single person, something that is unthinkable in todays world of multi-million LOC systems. Amazingly, their initial prototypes of various subsystems actually approach this goal.</p>

<p>Their approach relies heavily on the use of <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSLs</a> to capture high-level, domain-specific expressions of intent which are then compiled into efficient code. By way of example, they describe their TCP-IP stack:</p>

<blockquote><p>Most  interesting  ideas  have  more  than  one  fruitful  way  to  view  them,  and  it  occurred  to  us  that,
abstractly,  one  could  think  of  TCP/IP  as  a  kind  of  “non‐deterministic  parser  with  balancing
heuristics”,  in  that  it  takes  in  a  stream  of  things,  does  various  kinds  of  pattern‐matching  on  them,
deals with errors by backing up and taking other paths, and produces a transformation of the input in
a specified form as a result.</p>

<p>Since the language transformation techniques we use operate on arbitrary objects, not just strings (see
above), and include some abilities of both standard and logic programming, it seemed that this could
be used to make a very compact TCP/IP. Our first attempt was about 160 lines of code that was robust
enough to run a website. We think this can be done even more compactly and clearly, and we plan to
take another pass at this next year.</p></blockquote>

<p>The &lsquo;language transformation techniques&rsquo; they refer to are embodied in <a href="http://lambda-the-ultimate.org/node/2477">OMeta</a>, a <a href="http://en.wikipedia.org/wiki/PEG">PEG</a>-based language for parsing and pattern-matching. OMeta provides an incredible amount of leverage for such a simple abstraction. For starters, it leads to very concise and readable descriptions of tokenisers, parsers and tree transformers which are all crucial for developing DSLs.</p>

<h1>Berkeley Order Of Magnitude</h1>

<p>The Berkeley Order Of Magnitude project has spent a number of years experimenting with using logic languages for distributed systems. Like the STEPS project, their goals are audaciously ambitious.</p>

<blockquote><p>Enter BOOM, an effort to explore implementing Cloud software using disorderly, data-centric languages. BOOM stands for the Berkeley Orders Of Magnitude project, because we seek to enable people to build systems that are OOM bigger than are building today, with OOM less effort than traditional programming methodologies.</p></blockquote>

<p>Among their <a href="boom.cs.berkeley.edu/papers.html">myriad publications</a> they describe an <a href="http://www.srcf.ucam.org/~ms705/temp/eurosys2010/boom.pdf">API-compliant reimplementation of Hadoop and HDFS</a> in ~1K lines of Overlog code, which they then extend with a variety of features (eg master-node failover via MultiPaxos) not yet found in Hadoop. Thanks to a number of high-level optimisations enabled by the simpler code-base their implementation is almost as fast as the original.</p>

<p>For me, the most interesting aspect is the amount of reflective power gained by treating everything as data:</p>

<blockquote><p>One key to our approach is that everything is data, i.e. rows in tables that can be queried and manipulated. This includes persistent data (e.g. filesystem metadata), runtime state (e.g. Hadoop scheduler bookkeeping), summary stats (e.g. for advanced straggler scheduling), in-flight msgs and system events, even parsed code. When everything in a system is data, it becomes easy to do things like parallelize computations on the state, make it fault tolerant, and express (and enforce) invariants on legal states of the system.</p></blockquote>

<p>The latest project from the BOOM group is the <a href="http://www.bloom-lang.net/">Bloom language</a>. Bloom has a more solid theoretical foundation than their previous languages and also enables an amazing level of static analysis, even being able to guarantee that certain Bloom programs are eventually consistent.</p>

<h1>Core Ideas</h1>

<p>What can I take away from these projects? Here are some vague ideas, which to my mind all seem related.</p>

<h2>Higher-level reasoning</h2>

<p>The STEPS notes talk about &lsquo;separating meaning from tactics&rsquo;. It&rsquo;s often easier to specify what a correct solution to a problem looks like than it is to actually find it. In many domains, finding a solution is then just a matter of applying a suitable search algorithm. For example, constraint solvers such as <a href="http://www.gecode.org/">gecode</a> or <a href="https://github.com/clojure/core.logic">core.logic</a> express a problem as a set of logical constraints on the possible solutions and then search through the space of variable assignments to find a solution. By automatically pruning parts of the search space which break one or more constraints and applying user-specified search heuristics, constraint solvers can often be faster than hand-coded solvers for complex problems whilst at the same time allowing a clear, concise, declarative specification of the problem.</p>

<h2>Everything is data</h2>

<p>Constraint solving is enabled by treating both the problem specification and the solution space as data, reducing the problem to search. In lisps, treating code as data enables macros and code rewriting. In Overlog, everything from persistent data to scheduler state to the language runtime is available as data and can be queried and manipulated using the same powerful abstractions. Tracing in Overlog is as simple as adding a rule that fires whenever a new fact is derived, because the derivation itself is stored alongside the fact.</p>

<p>Whatever you are working on, making it accessible as plain data enables turning the full power and expressivity of your language directly onto the problem. This is where OO falls down, in trying to hide data behind custom interfaces. Rob Pike recently put it: &ldquo;It has become clear that OO zealots are afraid of data&rdquo;.</p>

<h2>Reflection</h2>

<p>When you expose the internals of a system as data to that same system, amazing (and, yes, sometimes terrifying) things happen. The STEPS folks manage to stay withing their code budget by building highly dynamic, self-hosting, meta-circular, introspective languages. Many of the amazing results of the Overlog project, from the optimising compiler to declarative distributed tracing, resulted from exposing the language runtime and program source code to the same logic engine that it implements. Turning a system in on itself and allowing it to reason about its own behaviour is an incredibly powerful idea. Certainly it can be dangerous, and it&rsquo;s all too easy to tangle oneself in knots, but the results speak for themselves. This is an idea that has been <a href="http://steve-yegge.blogspot.com/2007/01/pinocchio-problem.html">expounded</a> <a href="http://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">many</a> <a href="http://www.paulgraham.com/diff.html">times</a> before but I think there is still so much more to explore here.</p>

<h1>Progress</h1>

<p>My attempts to keep up with this have been focused on three projects.</p>

<p><a href="https://github.com/jamii/shackles">Shackles</a> is a constraint solver supporting both finite-domain and logical constraints. It was originally an experiment to see what, if any, extra power could be gained from implementing a gecode-style solver using persistent data-structures (constraint solvers in traditional languages spend much of their time cloning program state to enable back-tracking). Fortunately, <a href="https://github.com/clojure/core.logic">core.logic</a> now supports finite domain variables with constraint propagation and there has been noise about implementing user-specified search heuristcs, so that&rsquo;s one less piece of code I need to write :D</p>

<p><a href="https://github.com/jamii/strucjure">Strucjure</a> is similar to OMeta but aims to be a good clojure citizen rather than a totally separate tool. As such, all of its core components are <a href="http://clojure.org/protocols">protocols</a>, semantic actions are plain clojure code and the resulting patterns and views are just nested <a href="http://clojure.org/datatypes">records</a> which can be manipulated by regular clojure code. Following the principles above, the syntax of strucjure patterns/views is <a href="https://github.com/jamii/strucjure/blob/master/src/strucjure/parser.clj#L94">self-defined using views</a> and the test suite <a href="https://github.com/jamii/strucjure/blob/master/src/strucjure/test.clj#L1">parses the documentation</a> to verify the correctness of the examples.</p>

<p><a href="https://github.com/jamii/droplet">Droplet</a> is based on the Bloom<sup>L</sup> language (an extension of the Bloom language that operates over arbitrary semi-lattices). Droplet is so far less developed than the other projects but the core interpreter is working as well as basic datalog-like rules. Again, droplet attempts to be a good clojure citizen. Rules are just clojure functions. The datalog syntax is implemented via a simple macro which produces a rule function. Individual droplets are held in <a href="http://clojure.org/agents">agents</a> and communicate either via agent sends or over <a href="https://github.com/ztellman/lamina">lamina</a> queues. I&rsquo;m currently working out a composable, extensible query language that is able to operate over arbitrary semi-lattices, rather than just sets. In its current (and largely imaginary) form, it looks something like <a href="https://gist.github.com/4171094">this</a>.</p>

<p>I&rsquo;ll go into more detail on the latter two projects soon but for now I&rsquo;m content to just throw these ideas out into the world, without justification, and see what bounces back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strucjure: reading the readme]]></title>
    <link href="http://scattered-thoughts.net/blog/2012/10/25/strucjure-reading-the-readme/"/>
    <updated>2012-10-25T19:37:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2012/10/25/strucjure-reading-the-readme</id>
    <content type="html"><![CDATA[<p>I just released <a href="https://github.com/jamii/strucjure">strucjure</a>, a clojure library and DSL for parsing and pattern matching based on <a href="http://lambda-the-ultimate.org/node/2477">Ometa</a>.</p>

<p>The readme on github has detailed descriptions of the syntax etc which I won&rsquo;t repeat here. What I do want to do is run through a realistic example.</p>

<!--more-->


<p>The readme has a large number of examples and I want to be sure that these are all correct and up to date. As part of the test-suite for strucjure I parse the <a href="https://raw.github.com/jamii/strucjure/master/README.md">readme source</a>, pull out all the examples and make sure that they all run correctly and return the expected output.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>jamie@alien:~/strucjure<span class="nv">$ </span>lein <span class="nb">test </span>strucjure.test
</span><span class='line'>WARNING: newline already refers to: <span class="c">#&#39;clojure.core/newline in namespace: strucjure.test, being replaced by: #&#39;strucjure.test/newline</span>
</span><span class='line'>
</span><span class='line'>lein <span class="nb">test </span>strucjure.test
</span><span class='line'>
</span><span class='line'>Ran 1 tests containing 166 assertions.
</span><span class='line'>0 failures, 0 errors.
</span></code></pre></td></tr></table></div></figure>


<p>The readme parser is pretty simple. Since I control both the parser and the readme source so it doesn&rsquo;t need to be bullet-proof, just the simplest thing that will get the job done. Strucjure is very bare-bones at the moment though so we have to create a lot of simple views that really belong in a library somewhere.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">space</span>
</span><span class='line'>  <span class="sc">\s</span><span class="nv">pace</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">newline</span>
</span><span class='line'>  <span class="sc">\n</span><span class="nv">ewline</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">not-newline</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">not </span><span class="sc">\n</span><span class="nv">ewline</span><span class="p">)</span> <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">line</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">not </span><span class="p">[])</span> <span class="c1">; have to consume at least one char</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">prefix</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more</span> <span class="nv">not-newline</span><span class="p">)</span> <span class="nv">?line</span><span class="p">)</span>
</span><span class='line'>               <span class="o">&amp;</span> <span class="p">((</span><span class="nf">optional</span> <span class="nv">newline</span><span class="p">)</span> <span class="nv">?end</span><span class="p">)))</span>
</span><span class='line'>  <span class="nv">line</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">indented-line</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prefix</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">one-or-more</span> <span class="nv">space</span><span class="p">)</span> <span class="nv">_</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nf">line</span> <span class="nv">?line</span><span class="p">))</span>
</span><span class='line'>  <span class="nv">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We want a tokeniser for various parts of the readme. We could write it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defnview</span> <span class="nv">tokenise</span> <span class="p">[</span><span class="nv">sep</span><span class="p">]</span>
</span><span class='line'>  <span class="c1">;; empty input</span>
</span><span class='line'>  <span class="p">[]</span> <span class="o">&#39;</span><span class="p">(())</span>
</span><span class='line'>  <span class="c1">;; throw away separator, start a new token</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&amp;</span> <span class="p">(</span><span class="nf">sep</span> <span class="nv">_</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">tokenise</span> <span class="nv">sep</span><span class="p">)</span> <span class="nv">?results</span><span class="p">)]</span> <span class="p">(</span><span class="nb">cons </span><span class="p">()</span> <span class="nv">results</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;; add the current char to the first token</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">?char</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">tokenise</span> <span class="nv">sep</span><span class="p">)</span> <span class="p">[</span><span class="nv">?result</span> <span class="o">&amp;</span> <span class="nv">?results</span><span class="p">])]</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons char </span><span class="nv">result</span><span class="p">)</span> <span class="nv">results</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately in the current implementation of strucjure that recursive call goes on the stack, so this view will blow up on large inputs. For now we just have to implement this view by hand to get access to recur.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">tokenise</span> <span class="p">[</span><span class="nv">sep</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">view/-&gt;Raw</span>
</span><span class='line'>   <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">input</span> <span class="nv">opts</span><span class="p">]</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">elems</span> <span class="p">(</span><span class="nb">seq </span><span class="nv">input</span><span class="p">)]</span>
</span><span class='line'>       <span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">elems</span> <span class="nv">elems</span>
</span><span class='line'>              <span class="nv">token-acc</span> <span class="nv">nil</span>
</span><span class='line'>              <span class="nv">tokens-acc</span> <span class="nv">nil</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">if-let </span><span class="p">[[</span><span class="nv">remaining</span> <span class="nv">_</span><span class="p">]</span> <span class="p">(</span><span class="nf">view/run</span> <span class="nv">sep</span> <span class="nv">elems</span> <span class="nv">opts</span><span class="p">)]</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">recur</span> <span class="nv">remaining</span> <span class="nv">nil</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">reverse </span><span class="nv">token-acc</span><span class="p">)</span> <span class="nv">tokens-acc</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">if-let </span><span class="p">[[</span><span class="nv">elem</span> <span class="o">&amp;</span> <span class="nv">elems</span><span class="p">]</span> <span class="nv">elems</span><span class="p">]</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">recur</span> <span class="nv">elems</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">elem</span> <span class="nv">token-acc</span><span class="p">)</span> <span class="nv">tokens-acc</span><span class="p">)</span>
</span><span class='line'>             <span class="p">[</span><span class="nv">nil</span> <span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">reverse </span><span class="nv">token-acc</span><span class="p">)</span> <span class="nv">tokens-acc</span><span class="p">))])))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rest of the parser makes more sense reading in reverse order. We start by splitting up the readme by code delimiters (triple backticks). This gives us chunks of alternating text and code, so we parse every other chunk as a block of code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">code-delim</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prefix</span> <span class="sc">\`</span> <span class="sc">\`</span> <span class="sc">\`</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">:code-delim</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">readme</span>
</span><span class='line'>  <span class="p">((</span><span class="nf">tokenise</span> <span class="nv">code-delim</span><span class="p">)</span> <span class="nv">?chunks</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">apply concat </span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">partial </span><span class="nv">run</span> <span class="nv">code-block</span><span class="p">)</span> <span class="p">(</span><span class="nb">take-nth </span><span class="mi">2</span> <span class="p">(</span><span class="nb">rest </span><span class="nv">chunks</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We only want to look at code blocks that are marked as clojure code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">code-block</span>
</span><span class='line'>  <span class="p">[</span><span class="sc">\c</span> <span class="sc">\l</span> <span class="sc">\o</span> <span class="sc">\j</span> <span class="sc">\u</span> <span class="sc">\r</span> <span class="sc">\e</span> <span class="sc">\n</span><span class="nv">ewline</span> <span class="o">&amp;</span> <span class="p">(</span><span class="nf">code-block-inner</span> <span class="nv">?result</span><span class="p">)]</span>
</span><span class='line'>  <span class="nv">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A few of the code blocks don&rsquo;t contain examples &ndash; we can detect these because they don&rsquo;t start with a &ldquo;user> &rdquo; prompt. All the other blocks contain a list of examples separated by prompts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">prompt</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">prefix</span> <span class="sc">\u</span> <span class="sc">\s</span> <span class="sc">\e</span> <span class="sc">\r</span> <span class="sc">\&gt;</span> <span class="sc">\s</span><span class="nv">pace</span><span class="p">)</span>
</span><span class='line'>  <span class="ss">:prompt</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">code-block-inner</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nf">prompt</span> <span class="nv">_</span><span class="p">)</span>
</span><span class='line'>       <span class="p">((</span><span class="nf">tokenise</span> <span class="nv">prompt</span><span class="p">)</span> <span class="nv">?chunks</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nb">partial </span><span class="nv">run</span> <span class="nv">example</span><span class="p">)</span> <span class="p">(</span><span class="nb">filter </span><span class="o">#</span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">empty?</span> <span class="nv">%</span><span class="p">))</span> <span class="nv">chunks</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">_</span> <span class="c1">;; not a block of examples</span>
</span><span class='line'>  <span class="nv">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example consists of an input, which may be on multiple lines, zero or more lines of printed output and finally a result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">example</span>
</span><span class='line'>  <span class="p">[</span><span class="o">&amp;</span> <span class="p">(</span><span class="nf">line</span> <span class="nv">?input-first</span><span class="p">)</span>
</span><span class='line'>   <span class="o">&amp;</span> <span class="p">((</span><span class="nf">zero-or-more-prefix</span> <span class="nv">indented-line</span><span class="p">)</span> <span class="nv">?input-rest</span><span class="p">)</span>
</span><span class='line'>   <span class="o">&amp;</span> <span class="p">((</span><span class="nf">one-or-more-prefix</span> <span class="nv">line</span><span class="p">)</span> <span class="nv">?output-lines</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:input</span> <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">line</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">input-first</span> <span class="nv">input-rest</span><span class="p">)]</span> <span class="p">(</span><span class="nb">print </span><span class="p">(</span><span class="nb">apply str </span><span class="nv">line</span><span class="p">)</span> <span class="sc">\s</span><span class="nv">pace</span><span class="p">)))</span>
</span><span class='line'>   <span class="ss">:prints</span> <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="nv">line</span> <span class="p">(</span><span class="nb">butlast </span><span class="nv">output-lines</span><span class="p">)]</span> <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">apply str </span><span class="nv">line</span><span class="p">))))</span>
</span><span class='line'>   <span class="ss">:result</span> <span class="p">(</span><span class="nf">run</span> <span class="nv">result</span> <span class="p">(</span><span class="nb">last </span><span class="nv">output-lines</span><span class="p">))})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The result is either a return value or an exception.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; #&quot;[a-zA-Z\.]&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">exception-chars</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">or </span><span class="sc">\.</span>
</span><span class='line'>      <span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">int </span><span class="sc">\a</span><span class="p">)</span> <span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">int </span><span class="sc">\z</span><span class="p">))</span>
</span><span class='line'>      <span class="o">#</span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nb">int </span><span class="sc">\A</span><span class="p">)</span> <span class="p">(</span><span class="nb">int </span><span class="nv">%</span><span class="p">)</span> <span class="p">(</span><span class="nb">int </span><span class="sc">\Z</span><span class="p">)))</span>
</span><span class='line'>  <span class="nv">%</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defview</span> <span class="nv">result</span>
</span><span class='line'>  <span class="p">[</span><span class="sc">\E</span> <span class="sc">\x</span> <span class="sc">\c</span> <span class="sc">\e</span> <span class="sc">\p</span> <span class="sc">\t</span> <span class="sc">\i</span> <span class="sc">\o</span> <span class="sc">\n</span> <span class="sc">\I</span> <span class="sc">\n</span> <span class="sc">\f</span> <span class="sc">\o</span> <span class="sc">\s</span><span class="nv">pace</span>
</span><span class='line'>   <span class="sc">\t</span> <span class="sc">\h</span> <span class="sc">\r</span> <span class="sc">\o</span> <span class="sc">\w</span> <span class="sc">\+</span> <span class="sc">\:</span> <span class="sc">\s</span><span class="nv">pace</span>
</span><span class='line'>   <span class="sc">\#</span> <span class="o">&amp;</span> <span class="p">((</span><span class="nf">one-or-more</span> <span class="nv">exception-chars</span><span class="p">)</span> <span class="nv">?exception</span><span class="p">)</span>
</span><span class='line'>   <span class="o">&amp;</span> <span class="nv">_</span><span class="p">]</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:throws</span> <span class="p">(</span><span class="nb">apply str </span><span class="nv">exception</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">?data</span>
</span><span class='line'>  <span class="p">[</span><span class="ss">:returns</span> <span class="p">(</span><span class="nb">apply str </span><span class="nv">data</span><span class="p">)])</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it &ndash; parsing done.</p>

<p>Now we just have to turn the results into unit tests. We have to be careful about comparing the results of the examples because they might contain closures, which look different every time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">replace-fun</span> <span class="p">[</span><span class="nv">unread-form</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">.replaceAll</span> <span class="nv">unread-form</span> <span class="s">&quot;#&lt;[^&gt;]*&gt;&quot;</span> <span class="s">&quot;#&lt;fun&gt;&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">prints-as</span> <span class="p">[</span><span class="nv">string</span> <span class="nv">form</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">replace-fun</span> <span class="nv">string</span><span class="p">)</span> <span class="p">(</span><span class="nf">replace-fun</span> <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nb">pr </span><span class="nv">form</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the examples is a little tricky because some of them create bindings or classes that are used by later examples. We end up needing to eval the code at runtime.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">example-test</span> <span class="p">[</span><span class="nv">input</span> <span class="nv">prints</span> <span class="nv">result</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">match</span> <span class="nv">result</span>
</span><span class='line'>         <span class="p">[</span><span class="ss">:returns</span> <span class="nv">?value</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nf">prints-as</span> <span class="nv">value</span> <span class="p">(</span><span class="nf">input</span><span class="p">)))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="nv">prints</span> <span class="p">(</span><span class="nb">with-out-str </span><span class="p">(</span><span class="nf">input</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'>         <span class="p">[</span><span class="ss">:throws</span> <span class="nv">?exception</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nf">try+</span> <span class="p">(</span><span class="nf">input</span><span class="p">)</span>
</span><span class='line'>                     <span class="nv">nil</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">catch</span> <span class="nv">java.lang.Object</span> <span class="nv">thrown</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">prints-as</span> <span class="nv">exception</span> <span class="p">(</span><span class="nb">class </span><span class="nv">thrown</span><span class="p">)))))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">is</span> <span class="p">(</span><span class="nb">= </span><span class="nv">prints</span> <span class="p">(</span><span class="nf">with-out-str</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">try+</span> <span class="p">(</span><span class="nf">input</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">(</span><span class="nf">catch</span> <span class="nv">java.lang.Object</span> <span class="nv">_</span> <span class="nv">nil</span><span class="p">))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">insert-example-test</span> <span class="p">[{</span><span class="ss">:keys</span> <span class="p">[</span><span class="nv">input</span> <span class="nv">prints</span> <span class="nv">result</span><span class="p">]}]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">example-test</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nb">eval </span><span class="o">&#39;</span><span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">use</span> <span class="o">&#39;~</span><span class="ss">&#39;strucjure</span><span class="p">)</span> <span class="o">~</span><span class="p">(</span><span class="nf">read-string</span> <span class="nv">input</span><span class="p">))))</span> <span class="o">~</span><span class="nv">prints</span> <span class="o">&#39;~</span><span class="nv">result</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmacro </span><span class="nv">insert-readme-test</span> <span class="p">[</span><span class="nv">file</span><span class="p">]</span>
</span><span class='line'>  <span class="o">`</span><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>     <span class="o">~@</span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">example</span> <span class="p">(</span><span class="nf">run</span> <span class="nv">readme</span> <span class="p">(</span><span class="nb">seq </span><span class="p">(</span><span class="nb">slurp </span><span class="p">(</span><span class="nb">eval </span><span class="nv">file</span><span class="p">))))]</span>
</span><span class='line'>         <span class="o">`</span><span class="p">(</span><span class="nf">insert-example-test</span> <span class="o">~</span><span class="nv">example</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deftest</span> <span class="nv">readme-test</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">insert-readme-test</span> <span class="s">&quot;README.md&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is fun. Not only does strucjure parse its own syntax, it reads its own documentation!</p>

<p>Parts of this were a little painful. The next version of strucjure will definitely have improved string matching. I&rsquo;m also looking at optimising/compiling views, as well as memoisation. Previous versions of strucjure supported both but were hard to maintain. For now I&rsquo;m going to be moving on to using strucjure to build other useful DSLs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Causal ordering]]></title>
    <link href="http://scattered-thoughts.net/blog/2012/08/16/causal-ordering/"/>
    <updated>2012-08-16T05:16:00-07:00</updated>
    <id>http://scattered-thoughts.net/blog/2012/08/16/causal-ordering</id>
    <content type="html"><![CDATA[<p>Causal ordering is a vital tool for thinking about distributed systems. Once you understand it, many other concepts become much simpler.</p>

<!--more-->


<p>We&rsquo;ll start with the fundamental property of distributed systems:</p>

<pre><code>Messages sent between machines may arrive zero or more times at any point after they are sent
</code></pre>

<p>This is the sole reason that building distributed systems is hard.</p>

<p>For example, because of this property it is impossible for two computers communicating over a network to agree on the exact time. You can send me a message saying &ldquo;it is now 10:00:00&rdquo; but I don&rsquo;t know how long it took for that message to arrive. We can send messages back and forth all day but we will never know for sure that we are synchronised.</p>

<p>If we can&rsquo;t agree on the time then we can&rsquo;t always agree on what order things happen in. Suppose I say &ldquo;my user logged on at 10:00:00&rdquo; and you say &ldquo;my user logged on at 10:00:01&rdquo;. Maybe mine was first or maybe my clock is just fast relative to yours. The only way to know for sure is if something connects those two events. For example, if my user logged on and then sent your user an email and if you received that email before your user logged on then we know for sure that mine was first.</p>

<p>This concept is called causal ordering and is written like this:</p>

<pre><code>A-&gt;B (event A is causally ordered before event B)
</code></pre>

<p>Let&rsquo;s define it a little more formally. We model the world as follows: We have a number of machines on which we observe a series of events. These events are either specific to one machine (eg user input) or are communications between machines. We define the causal ordering of these events by three rules:</p>

<pre><code>If A and B happen on the same machine and A happens before B then A-&gt;B

If I send you some message M and you receive it then (send M)-&gt;(recv M)

If A-&gt;B and B-&gt;C then A-&gt;C
</code></pre>

<p>We are used to thinking of ordering by time which is a <a href="http://en.wikipedia.org/wiki/Total_order">total order</a> &ndash; every pair of events can be placed in some order. In contrast, causal ordering is only a <a href="http://en.wikipedia.org/wiki/Partially_ordered_set">partial order</a> &ndash; sometimes events happen with no possible causal relationship i.e. not (A->B or B->A).</p>

<p><a href="http://upload.wikimedia.org/wikipedia/commons/5/55/Vector_Clock.svg">This image</a> shows a nice way to picture these relationships.</p>

<p>On a single machine causal ordering is exactly the same as time ordering (actually, on a multi-core machine the situation is <a href="http://mechanical-sympathy.blogspot.com/2011/08/inter-thread-latency.html">more complicated</a>, but let&rsquo;s forget about that for now). Between machines causal ordering is conveyed by messages. Since sending messages is the only way for machines to affect each other this gives rise to a nice property:</p>

<pre><code>If not(A-&gt;B) then A cannot possibly have caused B
</code></pre>

<p>Since we don&rsquo;t have a single global time this is the only thing that allows us to reason about causality in a distributed system. This is really important so let&rsquo;s say it again:</p>

<pre><code>Communication bounds causality
</code></pre>

<p>The lack of a total global order is not just an accidental property of computer systems, it is a <a href="http://en.wikipedia.org/wiki/Light_cone">fundamental property</a> of the laws of physics. I claimed that understanding causal order makes many other concepts much simpler. Let&rsquo;s skim over some examples.</p>

<h2>Vector Clocks</h2>

<p><a href="http://en.wikipedia.org/wiki/Lamport_timestamps">Lamport clocks</a> and <a href="http://en.wikipedia.org/wiki/Vector_clock">Vector clocks</a> are data-structures which efficiently approximate the causal ordering and so can be used by programs to reason about causality.</p>

<pre><code>If A-&gt;B then LC_A &lt; LC_B

If VC_A &lt; VC_B then A-&gt;B
</code></pre>

<p>Different types of vector clock trade-off compression vs accuracy by storing smaller or larger portions of the causal history of an event.</p>

<h2>Consistency</h2>

<p>When mutable state is distributed over multiple machines each machine can receive update events at different times and in different orders. If the final state is dependent on the order of updates then the system must choose a single serialisation of the events, imposing a global total order. A distributed system is consistent exactly when the outside world can never observe two different serialisations.</p>

<h2>CAP Theorem</h2>

<p>The CAP (Consistency-Availability-Partition) theorem also boils down to causality. When a machine in a distributed system is asked to perform an action that depends on its current state it must decide that state by choosing a serialisation of the events it has seen. It has two options:</p>

<ol>
<li>Choose a serialisation of its current events immediately</li>
<li>Wait until it is sure it has seen all concurrent events before choosing a serialisation</li>
</ol>


<p>The first choice risks violating consistency if some other machine makes the same choice with a different set of events. The second violates availability by waiting for every other machine that could possibly have received a conflicting event before performing the requested action. There is no need for an actual network partition to happen &ndash; the trade-off between availability and consistency exists whenever communication between components is not instant. We can state this even more simply:</p>

<pre><code>Ordering requires waiting
</code></pre>

<p>Even your hardware <a href="http://en.wikipedia.org/wiki/Memory_barrier">cannot escape</a> this law. It provides the illusion of synchronous access to memory at the cost of availabilty. If you want to write fast parallel programs then you need to understand the messaging model used by the underlying hardware.</p>

<h2>Eventual Consistency</h2>

<p>A system is eventually consistent if the final state of each machine is the same regardless of how we choose to serialise update events. An eventually consistent system allows us to sacrifice consistency for availability without having the state of different machines diverge irreparably. It doesn&rsquo;t save us from having the outside world see different serialisations of update events. It is also difficult to construct eventually consistent data structures and to reason about their composition.</p>

<h2>Further reading</h2>

<p><a href="http://hal.inria.fr/inria-00397981/en/">CRDTs</a> provide guidance on constructing eventually consistent data-structures.</p>

<p><a href="http://www.bloom-lang.net/">Bloom</a> is a logic-based DSL for writing distributed systems. The core observation is that there is a natural connection between monotonic logic programs (logic programs which do not have to retract output when given additional inputs) and available distributed systems (where individual machines do not have to wait until all possible inputs have been received before producing output). <a href="http://db.cs.berkeley.edu/papers/UCB-lattice-tr.pdf">Recent work</a> from the Bloom group shows how to merge their approach with the CRDT approach to get the best of both worlds.</p>

<p>Nathan Marz suggests <a href="http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html">an architecture for data processing systems</a> which avoids much of the pain caused by the CAP theorem. In short, combine a consistent batch-processing layer with an available, eventually consistent real-time layer so that the system as a whole is available but any errors in the (complicated, difficult to program) eventually consistent layer are transient and cannot corrupt the consistent data store.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Frustrations with erlang]]></title>
    <link href="http://scattered-thoughts.net/blog/2012/01/03/frustrations-with-erlang/"/>
    <updated>2012-01-03T06:16:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2012/01/03/frustrations-with-erlang</id>
    <content type="html"><![CDATA[<p>With my work on erl-telehash and at Smarkets I find myself fighting erlang more and more. The biggest pains are the dearth of libraries, the lack of polymorphism and being forced into a single model of concurrency.</p>

<!--more-->


<p>The first is self-explanatory and pretty well-known. I frequently have to fire up a python process through a port to do something simple like send an email. Even the standard library is incomplete and inconsistent.</p>

<p>The second doesn&rsquo;t start to hurt until your codebase gets a bit bigger. For example, Smarkets makes a lot of use of fixed-precision decimal arithmetic which leads to code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nn">decimal</span><span class="p">:</span><span class="n">mult</span><span class="p">(</span><span class="nv">Qty</span><span class="p">,</span>  <span class="nn">decimal</span><span class="p">:</span><span class="n">sub</span><span class="p">(</span><span class="nn">decimal</span><span class="p">:</span><span class="n">to_decimal</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nv">Price</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It also means any time you want to change a data-structure for one with an equivalent interface you have to rewrite whole swathes of code.</p>

<p>The third point is a bit more contentious. I&rsquo;m fairly convinced that the erlang philosophy of fail-early, crash-only, restartable tasks is the right solution for most problems. What bugs me is that erlang conflates addresses, queues and actors by giving each process a single mailbox. This leads to problems like requiring the recipient of a message to have a global name if it is to be independently restartable, which means you can&rsquo;t run more than one copy of that message topology on the same node. It also encourages processes to send messages directly to other processes which makes it difficult to create flexible, rewirable topologies or to isolate pieces of a topology for testing. I would prefer a model in which processes send and receive messages through queues which are wired together outside of the process. This would also allow restarting a process (and clearing but not deleting its queues) without giving it a global name.</p>

<p>I&rsquo;m not about to run out now and rewrite erl-telehash in another language. It&rsquo;s close enough to complete (for my purposes at least) that I&rsquo;ll just continue with the existing code. For future experiments, however, I want something better.</p>

<p>The top candidate at the moment is clojure. It has the potential to replace my use of erlang and python, saving lots of cross-language pain. Agents look a lot like a (cleaner, saner) implementation of the <a href="http://scattered-thoughts.net/one/1300/292121/72985">mealy machines</a> that I wrote at Smarkets. <a href="https://github.com/ztellman/lamina">Lamina</a> neatly solves the queue pains I described above. <a href="http://code.google.com/p/clojure-contrib/wiki/DatalogOverview">Datalog</a> is the natural way to describe a lot of collections, including <a href="https://github.com/jamii/erl-telehash/blob/master/src/th_bucket.erl">th_bucket</a> which is in its current form is not obviously correct. The clojure community just seems to churn out well-designed libraries (lamina, aleph, slice, incanter, pallet, cascalog, storm, overtone etc).</p>

<p>In the short term I will get started by rewriting <a href="https://github.com/jamii/binmap">binmap</a>, since it&rsquo;s fresh in my mind and simple enough to finish quickly. If that goes well it might eventually become an educational port of <a href="http://libswift.org">swift</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binmaps: compressed bitmaps]]></title>
    <link href="http://scattered-thoughts.net/blog/2012/01/03/binmaps-compressed-bitmaps/"/>
    <updated>2012-01-03T06:16:00-08:00</updated>
    <id>http://scattered-thoughts.net/blog/2012/01/03/binmaps-compressed-bitmaps</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been porting some code from c++. The code in question is a compressed bitmap used in <a href="http://libswift.org">swift</a> to track which parts of a download have already been retrieved. To reduce the memory usage the original uses lots of pointer tricks. Replicating these in ocaml is interesting.</p>

<!--more-->


<p>Here is the basic idea. Conceptually a binmap is a tree of bitmaps. In a leaf at the bottom of the tree each bit in the bitmap represents one bit. In a leaf one layer above the bottom each bit in the bitmap represents two bits. In a leaf two layers above the bottom each bit in the bitmap represents four bits etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">type</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">{</span> <span class="n">layers</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>  <span class="o">;</span> <span class="n">tree</span> <span class="o">:</span> <span class="n">tree</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">tree</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Bitmap</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Branch</span> <span class="k">of</span> <span class="n">tree</span> <span class="o">*</span> <span class="n">tree</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s pretend for simplicity our bitmaps are only 1 bit wide. Then the string 00000000 would be represented as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">{</span> <span class="n">layers</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">;</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Bitmap</span> <span class="mi">0</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the string 00001100 would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">{</span> <span class="n">layers</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="o">;</span> <span class="n">tree</span> <span class="o">=</span>
</span><span class='line'>    <span class="nc">Branch</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">Bitmap</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>      <span class="o">(</span><span class="nc">Branch</span>
</span><span class='line'>        <span class="o">(</span><span class="nc">Bitmap</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>        <span class="o">(</span><span class="nc">Bitmap</span> <span class="mi">0</span><span class="o">))</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The worst case for this data structure is the string 0101010101&hellip; In this case we use about 6.5x as much memory as needed by a plain bitmap (3 words for a Branch with two pointers, 4 words for a Bitmap with a pointer to a boxed Int32). The c++ version uses some simple tricks to reduce this overhead to just over 2x that of a plain bitmap. We can replicate these in ocaml by using a bigarray to simulate raw memory access.</p>

<p>Our data structure looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">module</span> <span class="nc">Array</span> <span class="o">=</span>
</span><span class='line'><span class="k">struct</span>
</span><span class='line'>  <span class="k">include</span> <span class="nn">Bigarray</span><span class="p">.</span><span class="nc">Array1</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">geti</span> <span class="kt">array</span> <span class="n">i</span> <span class="o">=</span> <span class="nn">Bitmap</span><span class="p">.</span><span class="n">to_int</span> <span class="o">(</span><span class="nn">Bigarray</span><span class="p">.</span><span class="nn">Array1</span><span class="p">.</span><span class="n">get</span> <span class="kt">array</span> <span class="n">i</span><span class="o">)</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">seti</span> <span class="kt">array</span> <span class="n">i</span> <span class="n">v</span> <span class="o">=</span> <span class="nn">Bigarray</span><span class="p">.</span><span class="nn">Array1</span><span class="p">.</span><span class="n">set</span> <span class="kt">array</span> <span class="n">i</span> <span class="o">(</span><span class="nn">Bitmap</span><span class="p">.</span><span class="n">of_int</span> <span class="n">v</span><span class="o">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">length</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="o">;</span> <span class="n">layers</span> <span class="o">:</span> <span class="kt">int</span>
</span><span class='line'>    <span class="o">;</span> <span class="k">mutable</span> <span class="kt">array</span> <span class="o">:</span> <span class="o">(</span><span class="nn">Bitmap</span><span class="p">.</span><span class="n">t</span><span class="o">,</span> <span class="nn">Bitmap</span><span class="p">.</span><span class="n">bigarray_elt</span><span class="o">,</span> <span class="nn">Bigarray</span><span class="p">.</span><span class="n">c_layout</span><span class="o">)</span> <span class="nn">Array</span><span class="p">.</span><span class="n">t</span>
</span><span class='line'>    <span class="o">;</span> <span class="n">pointers</span> <span class="o">:</span> <span class="nn">Widemap</span><span class="p">.</span><span class="n">t</span>
</span><span class='line'>    <span class="o">;</span> <span class="k">mutable</span> <span class="n">free</span> <span class="o">:</span> <span class="kt">int</span> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">node</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Bitmap</span> <span class="k">of</span> <span class="nn">Bitmap</span><span class="p">.</span><span class="n">t</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Pointer</span> <span class="k">of</span> <span class="kt">int</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">get_node</span> <span class="n">binmap</span> <span class="n">node_addr</span> <span class="n">is_left</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">index</span> <span class="o">=</span> <span class="n">node_addr</span> <span class="o">+</span> <span class="o">(</span><span class="k">if</span> <span class="n">is_left</span> <span class="k">then</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">match</span> <span class="nn">Widemap</span><span class="p">.</span><span class="n">get</span> <span class="n">binmap</span><span class="o">.</span><span class="n">pointers</span> <span class="n">index</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="bp">false</span> <span class="o">-&gt;</span> <span class="nc">Bitmap</span> <span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">get</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="n">index</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="bp">true</span> <span class="o">-&gt;</span> <span class="nc">Pointer</span> <span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">geti</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="n">index</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">set_node</span> <span class="n">binmap</span> <span class="n">node_addr</span> <span class="n">is_left</span> <span class="n">node</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">index</span> <span class="o">=</span> <span class="n">node_addr</span> <span class="o">+</span> <span class="o">(</span><span class="k">if</span> <span class="n">is_left</span> <span class="k">then</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">node</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Bitmap</span> <span class="n">bitmap</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">Widemap</span><span class="p">.</span><span class="n">set</span> <span class="n">binmap</span><span class="o">.</span><span class="n">pointers</span> <span class="n">index</span> <span class="bp">false</span><span class="o">;</span>
</span><span class='line'>      <span class="nn">Array</span><span class="p">.</span><span class="n">set</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="n">index</span> <span class="n">bitmap</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Pointer</span> <span class="kt">int</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="nn">Widemap</span><span class="p">.</span><span class="n">set</span> <span class="n">binmap</span><span class="o">.</span><span class="n">pointers</span> <span class="n">index</span> <span class="bp">true</span><span class="o">;</span>
</span><span class='line'>      <span class="nn">Array</span><span class="p">.</span><span class="n">seti</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="n">index</span> <span class="kt">int</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each pair of cells in the array represents a branch. Leaves are hoisted into their parent branch, replacing the pointer. Widemap.t is an extensible bitmap which we use here to track whether a given cell in the array is a pointer or a bitmap. The length field is the number of bits represented by bitmap. The free field will be explained later.</p>

<p>Our previous example string 00001100 would now be represented like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(*</span>
</span><span class='line'><span class="c">  0 -&gt; Bitmap 0</span>
</span><span class='line'><span class="c">  1 -&gt; Pointer 2</span>
</span><span class='line'><span class="c">  2 -&gt; Bitmap 1</span>
</span><span class='line'><span class="c">  3 -&gt; Bitmap 0</span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="o">{</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'><span class="o">;</span> <span class="n">layers</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="o">;</span> <span class="kt">array</span> <span class="o">=</span> <span class="o">[|</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span> <span class="o">|]</span>
</span><span class='line'><span class="o">;</span> <span class="n">pointers</span> <span class="o">=</span> <span class="nn">Widemap</span><span class="p">.</span><span class="n">of_string</span> <span class="s2">&quot;0100&quot;</span>
</span><span class='line'><span class="o">;</span> <span class="n">free</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the bitmap is changed we may have to add or delete pairs eg if the above example changed to 00001111 it would be represented as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(*</span>
</span><span class='line'><span class="c">  0 -&gt; Bitmap 0</span>
</span><span class='line'><span class="c">  1 -&gt; Bitmap 1</span>
</span><span class='line'><span class="c">  2 -&gt; ?</span>
</span><span class='line'><span class="c">  3 -&gt; ?</span>
</span><span class='line'><span class="c">*)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can grow and shrink the array as necessary, but since deleted pairs won&rsquo;t necessarily be at the end of the used space the bigarray will become fragmented. To avoid wasting space we can write a linked list into the empty pairs to keep track of free space. 0 is always the root of the tree so we can use it as a list terminator. The free field marks the start of the list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">del_pair</span> <span class="n">binmap</span> <span class="n">node_addr</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Array</span><span class="p">.</span><span class="n">seti</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="n">node_addr</span> <span class="n">binmap</span><span class="o">.</span><span class="n">free</span><span class="o">;</span>
</span><span class='line'>  <span class="n">binmap</span><span class="o">.</span><span class="n">free</span> <span class="o">&lt;-</span> <span class="n">node_addr</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* double the size of a full array and then initialise the freelist *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">grow_array</span> <span class="n">binmap</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">assert</span> <span class="o">(</span><span class="n">binmap</span><span class="o">.</span><span class="n">free</span> <span class="o">=</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">old_len</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">dim</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">assert</span> <span class="o">(</span><span class="n">old_len</span> <span class="ow">mod</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="k">assert</span> <span class="o">(</span><span class="n">old_len</span> <span class="o">&lt;=</span> <span class="n">max_int</span><span class="o">);</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">new_len</span> <span class="o">=</span> <span class="n">min</span> <span class="n">max_int</span> <span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">old_len</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">assert</span> <span class="o">(</span><span class="n">new_len</span> <span class="ow">mod</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="k">let</span> <span class="kt">array</span> <span class="o">=</span> <span class="n">create_array</span> <span class="n">new_len</span> <span class="k">in</span>
</span><span class='line'>  <span class="nn">Array</span><span class="p">.</span><span class="n">blit</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">sub</span> <span class="kt">array</span> <span class="mi">0</span> <span class="n">old_len</span><span class="o">);</span>
</span><span class='line'>  <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="o">&lt;-</span> <span class="kt">array</span><span class="o">;</span>
</span><span class='line'>  <span class="n">binmap</span><span class="o">.</span><span class="n">free</span> <span class="o">&lt;-</span> <span class="n">old_len</span><span class="o">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="n">old_len</span> <span class="k">to</span> <span class="n">new_len</span><span class="o">-</span><span class="mi">4</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="ow">mod</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">0</span>  <span class="k">then</span> <span class="nn">Array</span><span class="p">.</span><span class="n">seti</span> <span class="kt">array</span> <span class="n">i</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>  <span class="k">done</span><span class="o">;</span>
</span><span class='line'>  <span class="nn">Array</span><span class="p">.</span><span class="n">seti</span> <span class="kt">array</span> <span class="o">(</span><span class="n">new_len</span><span class="o">-</span><span class="mi">2</span><span class="o">)</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">add_pair</span> <span class="n">binmap</span> <span class="n">node_left</span> <span class="n">node_right</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">(</span><span class="k">if</span> <span class="n">binmap</span><span class="o">.</span><span class="n">free</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">then</span> <span class="n">grow_array</span> <span class="n">binmap</span><span class="o">);</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">node_addr</span> <span class="o">=</span> <span class="n">binmap</span><span class="o">.</span><span class="n">free</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">free_next</span> <span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">geti</span> <span class="n">binmap</span><span class="o">.</span><span class="kt">array</span> <span class="n">binmap</span><span class="o">.</span><span class="n">free</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">binmap</span><span class="o">.</span><span class="n">free</span> <span class="o">&lt;-</span> <span class="n">free_next</span><span class="o">;</span>
</span><span class='line'>  <span class="n">set_node</span> <span class="n">binmap</span> <span class="n">node_addr</span> <span class="bp">true</span> <span class="n">node_left</span><span class="o">;</span>
</span><span class='line'>  <span class="n">set_node</span> <span class="n">binmap</span> <span class="n">node_addr</span> <span class="bp">false</span> <span class="n">node_right</span><span class="o">;</span>
</span><span class='line'>  <span class="n">node_addr</span>
</span></code></pre></td></tr></table></div></figure>


<p>I haven&rsquo;t yet written any code to shrink the array but it should be fairly straightforward to recursively copy the tree into a new array and rewrite the pointers.</p>

<p>With the freelist our modified example now looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">{</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
</span><span class='line'><span class="o">;</span> <span class="n">layers</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class='line'><span class="o">;</span> <span class="kt">array</span> <span class="o">=</span> <span class="o">[|</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span> <span class="o">|]</span>
</span><span class='line'><span class="o">;</span> <span class="n">pointers</span> <span class="o">=</span> <span class="nn">Widemap</span><span class="p">.</span><span class="n">of_string</span> <span class="s2">&quot;0100&quot;</span>
</span><span class='line'><span class="o">;</span> <span class="n">free</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the representation sorted the rest of the code more or less writes itself.</p>

<p>The only difficulty lies in choosing the width of the bitmaps used. Using smaller bitmaps increases the granularity of the binmap allowing better compression by compacting more nodes. Using larger bitmaps increases the size of the pointers allowing larger bitmaps to be represented. I&rsquo;ve written the binmap code to be width-agnostic; it can easily be made into a functor of the bitmap module.</p>

<p>The paper linked below suggests using a layered address scheme to expand the effective pointer size, where the first bit of the pointer is a flag indicating which layer the address is in. I would suggest rather than putting the flag in the pointer it would be simper to use information implicit in the structure of the tree eg is the current layer mod 8 = 0. Either way, this hugely increases the size of the address space at a the cost of a little extra complexity.</p>

<p>The original version is <a href="https://github.com/gritzko/swift/blob/master/doc/binmaps-alenex.pdf">here</a> and my version is <a href="https://github.com/jamii/binmap">here</a>. This is just an experiment so far, I certainly wouldn&rsquo;t suggest using it without some serious testing.</p>

<p>Overall I&rsquo;m not sure how useful this particular data structure is but this method of compacting tree-like types in ocaml is certainly interesting. I suspect it could be at least partially automated.</p>
]]></content>
  </entry>
  
</feed>
