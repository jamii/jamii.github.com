<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Scattered Thoughts</title>
        <link>http%3A//scattered-thoughts.net</link>
        <description></description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="http%3A//scattered-thoughts.net/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 27 Sep 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Imp: Intro</title>
                <pubDate>Fri, 27 Sep 2019 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/imp-intro/</link>
                <guid>http%3A//scattered-thoughts.net/writing/imp-intro/</guid>
                <description>&lt;p&gt;I&#x27;m working on a programming environment called Imp. The vision is of an emacs-y live self-modifying environment for working with structured data across multiple devices. The big moving parts are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a versioned relational database&lt;&#x2F;li&gt;
&lt;li&gt;an extensible GUI&lt;&#x2F;li&gt;
&lt;li&gt;a pure programming language built around relations&lt;&#x2F;li&gt;
&lt;li&gt;an interpreter with fast incremental view maintenance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This was also the subject of &lt;a href=&quot;&#x2F;@writing&#x2F;2016-10-11-a-practical-relational-query-compiler-in-500-lines.md&quot;&gt;several&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;relational-ui&#x2F;&quot;&gt;older&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;reltron&#x2F;&quot;&gt;projects&lt;&#x2F;a&gt; which I hope to elegantly superglue together.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the story so far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;.&#x2F;&quot;&gt;Intro&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Sets and functions (coming soon...)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While you wait for the next post, why not visit some of these fine pages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pchiusano.github.io&#x2F;2013-05-22&#x2F;future-of-software.html&quot;&gt;The end of apps&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;curtclifton.net&#x2F;papers&#x2F;MoseleyMarks06a.pdf&quot;&gt;Out of the tarpit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=R2Aa4PivG0g&quot;&gt;I see what you mean&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;people.csail.mit.edu&#x2F;ebakke&#x2F;sieuferd&#x2F;&quot;&gt;Democratizing databases&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Materialize Inc</title>
                <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/materialize-inc/</link>
                <guid>http%3A//scattered-thoughts.net/writing/materialize-inc/</guid>
                <description>&lt;p&gt;I&#x27;m happy to report that I&#x27;m maintaining my commitment to viewing every problem as an incremental view maintenance problem by joining an &lt;a href=&quot;https:&#x2F;&#x2F;materialize.io&#x2F;&quot;&gt;incremental view maintenance startup&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Tradition dictates that I now convince the reader that You Too Can Join An Incremental View Maintenance Startup. So here are the some of the things that I found compelling:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Experience. Everyone involved so far has built similar systems in the past, so we can skip past all the obvious mistakes and make exciting new mistakes.&lt;&#x2F;li&gt;
&lt;li&gt;Sensible engineering. From the folks that brought you &lt;a href=&quot;https:&#x2F;&#x2F;www.usenix.org&#x2F;system&#x2F;files&#x2F;conference&#x2F;hotos15&#x2F;hotos15-paper-mcsherry.pdf&quot;&gt;Scalability! But at what COST?&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.cockroachlabs.com&#x2F;blog&#x2F;cockroachdb-beta-passes-jepsen-testing&#x2F;&quot;&gt;Jepsen-approved serializability&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Low hype. We&#x27;re not Changing The Way The World Brushes Their Teeth. We&#x27;re just trying to build a thing that works, in a field where &lt;a href=&quot;https:&#x2F;&#x2F;jepsen.io&#x2F;analyses&quot;&gt;most things don&#x27;t work&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;People go home in the evening. Half of the company have families. There isn&#x27;t any beer pong.&lt;&#x2F;li&gt;
&lt;li&gt;Open pay scale. Pinned to market levels (as determined by some incredibly expensive watermarked spreadsheet).&lt;&#x2F;li&gt;
&lt;li&gt;Explicit vacation guidelines. At numbers that won&#x27;t make Europeans laugh in pity.&lt;&#x2F;li&gt;
&lt;li&gt;20% time with sane IP assignment.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
            </item>
        
            <item>
                <title>Frugality is non-linear</title>
                <pubDate>Tue, 09 Apr 2019 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/frugality-is-non-linear/</link>
                <guid>http%3A//scattered-thoughts.net/writing/frugality-is-non-linear/</guid>
                <description>&lt;p&gt;Most people have a mental model of budgeting which is roughly linear. If you spend half as much money, your money will last twice as long. As you approach zero spending, your runway goes up to infinity.&lt;&#x2F;p&gt;
&lt;p&gt;In this model, the space of options looks like this:&lt;&#x2F;p&gt;
&lt;div style=&quot;width: 100%; display: flex; align-items: center; justify-content: center; padding-top: 1em;&quot;&gt;
&lt;div id=&quot;contour&quot; style=&quot;width: 600px; height: 600px;&quot;&gt;[I am an interactive graph made of javascript!]&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div style=&quot;width: 100%; display: flex; align-items: center; justify-content: center; padding-top: 1em;&quot;&gt;
  &lt;label for=&quot;growth&quot;&gt;Return on investment =&amp;nbsp;&lt;&#x2F;label&gt;
  &lt;input id=&quot;growth&quot; type=&quot;text&quot; style=&quot;width: 4em&quot; value=&quot;0%&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This model is wrong.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s wrong because your savings grow over time. If you change the return rate above to 5%, you can see that someone who has 500k in savings and spends 75k per year has a runway of 7 years. At 50k per year that extends to 13 years. But if they can cut their spending to 25k per year they have a runway of 62 years!&lt;&#x2F;p&gt;
&lt;p&gt;Effectively, including growth in the model moves the asymptote to the right - your runway goes up to infinity as your spending approaches some percentage of your total savings, rather than as it approaches zero.&lt;&#x2F;p&gt;
&lt;p&gt;So halving your expenses can much more than double your runway. Or to put it another way - halving your expenses can much more than halve the number of years of your life you need to spend working.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I picked the examples above with a particular motive in mind. According to &lt;a href=&quot;https:&#x2F;&#x2F;danluu.com&#x2F;startup-tradeoffs&#x2F;&quot;&gt;Dan Luu&#x27;s conservative estimates&lt;&#x2F;a&gt; a fresh grad at a big tech company can safely earn ~$500k post-tax in 5 years. The US median income post-tax is ~$25k, and investing in an index fund has historically earned ~5% average returns in the long run. So as a tech worker, if you can manage to leave as &#x27;frugally&#x27; as the average American, you can &lt;a href=&quot;https:&#x2F;&#x2F;networthify.com&#x2F;calculator&#x2F;earlyretirement?income=120000&amp;amp;initialBalance=0&amp;amp;expenses=25000&amp;amp;annualPct=5&amp;amp;withdrawalRate=4&quot;&gt;comfortably retire&lt;&#x2F;a&gt; before 30.&lt;&#x2F;p&gt;
&lt;p&gt;In the tech industry we have some very loud voices arguing that if you desire autonomy or leverage, the best path forwards is to start a VC-backed startup. But reducing spending and saving towards early retirement has some compelling advantages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s much more reliable - most startups fail, but most people who work at a large tech company make sufficient money to be able to retire early.&lt;&#x2F;li&gt;
&lt;li&gt;Financial independence is a huge safety net - reducing stress and lowering the risk of later projects. If you still want to run a startup, doing it from a position of infinite personal runway will be a lot less stressful.&lt;&#x2F;li&gt;
&lt;li&gt;By separating the means of earning money from the freedom you are pursuing, it enables pursuing goals in that under-served intersection of valuable but not profitable. Whether that&#x27;s supporting free software, producing art or home-schooling your children, trying to fit such activities into a profitable enterprise inevitably produces uncomfortable compromises which can be avoided by removing the need to earn money.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The last point is particularly compelling if you have strong ethical&#x2F;political&#x2F;economic beliefs that would benefit from the leverage of financial independence. I&#x27;d like to see more independent people in general though, regardless of their personal beliefs, so I&#x27;ll save the more contentious topics for a separate post.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;faq&quot;&gt;FAQ&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;What about inflation?&lt;&#x2F;strong&gt; Inflation is essentially negative growth, so you can subtract it from the return rate and then keep the rest of the calculations in today-dollars. 5% seems to be a reasonable estimate of average inflation-adjusted returns on stocks based on recent decades, but see below for better models.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What about volatility?&lt;&#x2F;strong&gt; I used a fixed average return rate above, which doesn&#x27;t tell you odds of running out of money early due to a string of bad years. &lt;a href=&quot;https:&#x2F;&#x2F;retirementplans.vanguard.com&#x2F;VGApp&#x2F;pe&#x2F;pubeducation&#x2F;calculators&#x2F;RetirementNestEggCalc.jsf&quot;&gt;But simulations based on historical data&lt;&#x2F;a&gt; produce similar results to those above, and &lt;a href=&quot;https:&#x2F;&#x2F;www.kitces.com&#x2F;wp-content&#x2F;uploads&#x2F;2014&#x2F;11&#x2F;Kitces-Report-March-2012-20-Years-Of-Safe-Withdrawal-Rate-Research.pdf&quot;&gt;retirement planning literature&lt;&#x2F;a&gt; tends to put the asymptote at around 4-5% which is consistent with the numbers above. You should definitely use a more detailed model than this if you are seriously considering this path, but I think the simple model accurately conveys the underlying intuition - that the returns to reducing spending are non-linear.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What about crashes?&lt;&#x2F;strong&gt; The simulation linked above uses data that covers existing crashes, including the Great Depression. But in the event that they are overly optimistic, I think there is a strong argument that having large savings and cheap habits are useful for weathering a crash as having a filled-in employment history. Especially if you used the additional free time to build useful non-tech skills or strong communities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What about other countries?&lt;&#x2F;strong&gt; Dan Luu&#x27;s article suggests that similar salaries are available in many major hubs. I&#x27;ve built a reasonably detailed model for my own situation in the UK and arrived at similar numbers. (Salaries are lower, unless you can land a remote job, but free healthcare and lower cost of living make up a lot of the difference.) It&#x27;s worth at least running the numbers for your own country, just so you know what your options are.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hasn&#x27;t the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FIRE_movement&quot;&gt;FIRE community&lt;&#x2F;a&gt; already said all of this?&lt;&#x2F;strong&gt; Yes, but I very rarely see it discussed in tech circles, so it seems worth repeating. Also I haven&#x27;t seen the calculation in terms of runway before, and the graph above improved my intuition on the subject.&lt;&#x2F;p&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;cdn.plot.ly&#x2F;plotly-1.47.0.min.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script src=&quot;.&#x2F;frugality-is-non-linear.js&quot;&gt;&lt;&#x2F;script&gt;
</description>
            </item>
        
            <item>
                <title>Reltron</title>
                <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/reltron/</link>
                <guid>http%3A//scattered-thoughts.net/writing/reltron/</guid>
                <description>&lt;p&gt;Towards the end of last year I worked with Kevin Lynagh on a SQL database browser. Kevin wrote up a great report over at &lt;a href=&quot;https:&#x2F;&#x2F;kevinlynagh.com&#x2F;reltron&#x2F;&quot;&gt;kevinlynagh.com&#x2F;reltron&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>The antisocial laptop</title>
                <pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/the-antisocial-laptop/</link>
                <guid>http%3A//scattered-thoughts.net/writing/the-antisocial-laptop/</guid>
                <description>&lt;p&gt;I&#x27;ve had this laptop for about three years and it&#x27;s mostly served me well. It really only has one problem - it hates conference calls.&lt;&#x2F;p&gt;
&lt;p&gt;It doesn&#x27;t mind the rest of the internet. I can watch videos, listen to music and play games with no problems. But as soon as I try to talk to a human being it&#x27;s game over. The webcam can&#x27;t be discovered, the connection drops, and if I don&#x27;t get the hint it might just reboot itself.&lt;&#x2F;p&gt;
&lt;p&gt;It got away with it for a long time because the excuses were so plausible. The linux drivers for the webcam must be flaky. The wifi here is congested. The demo I was giving must have used up all my RAM and the OOM killer must have taken out something important.&lt;&#x2F;p&gt;
&lt;p&gt;But recently I backed it into a corner and things started getting serious. I ran an ethernet cable through my house and dug up the ethernet-usb adapter that shipped with my laptop. No more excuses.&lt;&#x2F;p&gt;
&lt;p&gt;The laptop responded by not only disconnecting the call I was on, but disconnecting the ethernet. On the next reboot, the monitor stopped updating. On the next, it not only disconnected the ethernet but claimed I no longer had a wifi interface either.&lt;&#x2F;p&gt;
&lt;p&gt;I found I could pretty reliably cause all three problems at any time by connecting the ethernet cable. But only during conference calls - I spent an entire day working and listening to music via the ethernet without a single laptop tantrum.&lt;&#x2F;p&gt;
&lt;p&gt;I finally figured out what was going on almost by accident. I suspected that the dell ethernet-usb adapter might be the source of the recent problems, and while searching for those keywords I stumbled across a &lt;a href=&quot;https:&#x2F;&#x2F;plugable.com&#x2F;2016&#x2F;06&#x2F;30&#x2F;investigating-usb-c-problems-on-some-dell-xps-and-precision-laptops&#x2F;&quot;&gt;post from the manufacturers of a usb docking station&lt;&#x2F;a&gt; about customers with similar symptoms that only manifest on this particular laptop. Dell responded with a firmware update that reduced the wifi output power.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that the usb, hdmi and wifi are all sitting on top of each other and are not sufficiently well shielded. Some experimenting at home confirmed that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;plugging in my usb webcam increases the number of dropped packets on the wifi&lt;&#x2F;li&gt;
&lt;li&gt;plugging in the ethernet only causes screen freezes when using an external hdmi monitor&lt;&#x2F;li&gt;
&lt;li&gt;the ethernet, monitor and webcam play fine together if the wifi is disabled&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I find it fascinating that for years I&#x27;ve had all the information necessary to debug this, but my mental model of causality was limited to the design of the machine - software interfaces and physical connections - and was completely missing the possibility of non-intentional interactions via the physical world. I suspect someone with an EE background would have immediately realized what was going on.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Zero-copy deserialization in Julia</title>
                <pubDate>Tue, 28 Aug 2018 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/zero-copy-deserialization-in-julia/</link>
                <guid>http%3A//scattered-thoughts.net/writing/zero-copy-deserialization-in-julia/</guid>
                <description>&lt;p&gt;While working with &lt;a href=&quot;http:&#x2F;&#x2F;relational.ai&#x2F;&quot;&gt;RelationalAI&lt;&#x2F;a&gt; I wrote a library for zero-copy deserialization in Julia. Not super exciting in itself, but it nicely demonstrates the kinds of zero-overhead abstractions that are possible in Julia.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;&#x2F;h2&gt;
&lt;p&gt;Folks at RelationalAI want to build various complex on-disk data-structures, with these constraints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The system is typically bottle-necked on memory bandwidth already, so deserializing on-disk data-structures into a separate in-memory data-structure is unacceptable. They need to operate directly on mmap-ed memory.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The data-structures will be mmap-ed into multiple different processes. The virtual memory mapping won&#x27;t stay the same, so the data-structures have to use relative offsets instead of absolute pointers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The data-structures are large and most use-cases typically only touch a small portion of each mmap-ed chunk, so converting all offsets to pointers in place at load time (aka &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pointer_swizzling&quot;&gt;pointer swizzling&lt;&#x2F;a&gt;) is too wasteful of memory bandwidth.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Additionally, the query compiler reading these data-structures is written in Julia. We still could implement the data-structures in C, but then the query compiler wouldn&#x27;t be able to benefit from specializing on the types of the data-structures. In other words, there is a potential performance boost if we can do the whole thing in Julia.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s even throw in some additional constraints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When debugging, we want to do bounds-checking so we get exceptions instead of segfaults.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When not debugging, we want to have minimal overhead vs writing the same code in C.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;building-blocks&quot;&gt;Building blocks&lt;&#x2F;h2&gt;
&lt;p&gt;Julia offers pointers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Libc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x00000000019887a0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pointers are typed, but we can cast them to other types freely:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;convert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Int64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, p)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Int64} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x00000000019887a0

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_store!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Int64} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x00000000019887a0

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_store!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Int64} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x00000000019887a1

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we can use any plain-old-data type, not just primitives:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Foo
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Int64
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Float64
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Bool
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;convert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, p)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Foo} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x00000000019887a0

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_store!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Foo} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x00000000019887a0

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;a href=&quot;https:&#x2F;&#x2F;docs.julialang.org&#x2F;en&#x2F;v1&#x2F;manual&#x2F;performance-tips&#x2F;#Write-%22type-stable%22-functions-1&quot;&gt;type-stable&lt;&#x2F;a&gt; code, these operations compile down to the corresponding llvm primitives, producing the same asm you would expect from C:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
         p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Int64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# skip Foo.x
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;convert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, p)
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# read Foo.y
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;f (generic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@code_native &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p)
	.text
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;f {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;REPL[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pointer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;REPL[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;vmovsd	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rdi), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;xmm0          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# xmm0 = mem[0],zero&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
;}}
	retq
	nopw	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax)
;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But like C they are totally unsafe:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

signal (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Segmentation fault
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And they require us to do all our offset calculation and pointer arithmetic by hand.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blobs&quot;&gt;Blobs&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;Blobs.jl&#x2F;tree&#x2F;c1c9061659b8480f7b7264a8cd1d4d0075e6bd44&quot;&gt;Blobs&lt;&#x2F;a&gt; library just adds some structure on top of these building blocks, while still compiling down to efficient native code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Pkg

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Pkg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;PackageSpec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;git@github.com:jamii&#x2F;Blobs.jl.git&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;c1c906&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
...

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs

&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Blobs are created from raw pointers:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Libc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;malloc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc0, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is some syntax sugar for load&#x2F;store:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And for the pointer arithmetic needed to read individual fields:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b.y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc0, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc8, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b.y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x0000000000000008

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b.y[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1.0
1.0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b.y[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1.0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Dereferenceing is bounds-checked&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)[]
ERROR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;BoundsError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;attempt to access &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc0, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdbf, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
Stacktrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
 [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] boundscheck at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;47&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [inlined]
 [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
 [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;level scope at none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)[]
ERROR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;BoundsError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;attempt to access &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc0, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fde0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
Stacktrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
 [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] boundscheck at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;47&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [inlined]
 [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
 [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;level scope at none&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bounds-checking can be turned off, either locally with the &lt;code&gt;@inbounds&lt;&#x2F;code&gt; macro or globally by starting julia with &lt;code&gt;--check-bounds=no&lt;&#x2F;code&gt;. With bounds-checking disabled, the only overhead is a single extra &lt;code&gt;movq&lt;&#x2F;code&gt; to unpack the &lt;code&gt;Blob&lt;&#x2F;code&gt; struct.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
         @inbounds b.y[]
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;f (generic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@code_native &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b)
	.text
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;f {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;REPL[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;150&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;91&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;expansion; {
; Location: blob.jl:95
; Function +; {
; Location: blob.jl:32
; Function +; {
; Location: pointer.jl:155
; Function Type; {
; Location: REPL[24]:2
	movq	8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax
;}}}}}}
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;54&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;expansion; {
; Location: blob.jl:113
; Function unsafe_load; {
; Location: pointer.jl:105
; Function unsafe_load; {
; Location: pointer.jl:105
	vmovsd	8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;xmm0          &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# xmm0 = mem[0],zero&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
;}}}}}
	retq
	nopw	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax)
;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even for nested structs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bar
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Int64
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Foo
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Quux
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Bar
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Int64
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Quux}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Quux}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc0, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Ptr{Nothing} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@0x0000000003a2fdc0, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
           @inbounds b.bar.foo.y[]
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;g (generic &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@code_native &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b)
	.text
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;g {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;REPL[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;29&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;150&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;91&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;expansion; {
; Location: blob.jl:95
; Function +; {
; Location: blob.jl:32
; Function +; {
; Location: pointer.jl:155
; Function Type; {
; Location: REPL[29]:2
	movq	8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax
;}}}}}}
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;54&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;expansion; {
; Location: blob.jl:113
; Function unsafe_load; {
; Location: pointer.jl:105
; Function unsafe_load; {
; Location: pointer.jl:105
	vmovsd	16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;xmm0         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# xmm0 = mem[0],zero&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
;}}}}}
	retq
	nopw	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rax)
;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s unpack the magic step by step.&lt;&#x2F;p&gt;
&lt;p&gt;We start with a simple function call&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  @inbounds b.y[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;.&lt;&#x2F;code&gt; and &lt;code&gt;[]&lt;&#x2F;code&gt; are just syntactic sugar for &lt;code&gt;Base.getproperty&lt;&#x2F;code&gt; and &lt;code&gt;Base.getindex&lt;&#x2F;code&gt; respectively:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    @inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tmp1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(tmp1)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Although the function has no type declarations, Julia does just-in-time type-inference and specialization. To begin with, all it can figure out is the type of the argument &lt;code&gt;b&lt;&#x2F;code&gt;, so we have something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    @inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tmp1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(tmp1)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since it knows the types of all the arguments to &lt;code&gt;getproperty&lt;&#x2F;code&gt; it can find the correct method:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;x
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Int64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;y
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;z
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Bool}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;type Blob{Foo} has no field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And after inlining &lt;code&gt;Base.getproperty&lt;&#x2F;code&gt; our function looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    @inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tmp1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
            if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;x
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Int64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;y
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;z
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Bool}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;type Blob{Foo} has no field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
        end
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(tmp1)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Constant propagation has a field day with expressions like &lt;code&gt;if :y === :x&lt;&#x2F;code&gt;, leaving us with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    @inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tmp1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(tmp1)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Type inference kicks in again, figuring out the obvious type of &lt;code&gt;tmp&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    @inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tmp1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Float64} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(tmp1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now it can find the correct method for &lt;code&gt;getindex&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;Base.@propagate_inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;blob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{T}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;boundscheck&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base.@propagate_inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;boundscheck&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;blob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{T}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@boundscheck &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getfield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getfield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getfield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;self_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(T))
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;throw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;BoundsError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob))
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
    end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After inlining again we have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    @inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tmp1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Float64} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        @boundscheck &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
            if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getfield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getfield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getfield&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;self_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(T))
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;throw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;BoundsError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob))
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
        end
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any &lt;code&gt;@boundscheck&lt;&#x2F;code&gt; that is inside an &lt;code&gt;@inbounds&lt;&#x2F;code&gt;, either lexically or after inlining through &lt;code&gt;@propagate_inbounds&lt;&#x2F;code&gt;, is removed.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    @inbounds &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tmp1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Float64} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we know at compile time that &lt;code&gt;tmp1&lt;&#x2F;code&gt; has type &lt;code&gt;Blob{Float64}&lt;&#x2F;code&gt;, which is an immutable value-type, it will be stack allocated, leaving us with some fairly tight LLVM bitcode:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@code_llvm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(b)

; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;f
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;REPL[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;define double @julia_f_36819({ i64, i64, i64 } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;addrspace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;nocapture nonnull readonly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dereferenceable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) {
top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;150&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;91&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;expansion; {
; Location: &#x2F;home&#x2F;jamie&#x2F;.julia&#x2F;dev&#x2F;Blobs&#x2F;src&#x2F;blob.jl:95
; Function +; {
; Location: &#x2F;home&#x2F;jamie&#x2F;.julia&#x2F;dev&#x2F;Blobs&#x2F;src&#x2F;blob.jl:32
  %1 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 } addrspace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, i64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pointer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;155&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function Type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;boot.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;728
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bitcast i64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;addrspace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;to i8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;addrspace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*
  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;load i8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, i8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;addrspace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, align &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
;}
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;getelementptr i8, i8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, i64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
;}}}}}
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;54&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;expansion; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;home&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;jamie&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.julia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dev&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Blobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blob.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;113&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pointer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unsafe_load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;; {
; Location&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pointer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.jl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;105
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bitcast i8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;to double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*
  %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;load double, double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, align &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
;}}}}}
  ret double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;generated-functions&quot;&gt;Generated functions&lt;&#x2F;h2&gt;
&lt;p&gt;I glossed over one important step - where did this method of &lt;code&gt;Base.getproperty&lt;&#x2F;code&gt; come from?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{Foo}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;x
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Int64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;y
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Float64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;elseif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;z
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{Bool}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;type Blob{Foo} has no field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Obviously, we don&#x27;t want to write this by hand.&lt;&#x2F;p&gt;
&lt;p&gt;We could do some metaprogramming trick where we register the types we want to use and this creates all the appropriate methods:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register_blob_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    code &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;quote
        function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;blob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{$T}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(@splice (i, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fieldname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fieldnames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(T)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;quote
               if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fieldname
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{$(fieldtype(T, i))}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;blob_offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Val{i}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
           end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; has no field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
    end
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(code)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;register_blob_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Foo)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But Julia offers us something nicer. Rather than registering types in advance, we can make a &#x27;generated&#x27; function, one which hooks into Julia&#x27;s just-in-time specialization and decides what code to compile based on the types of it&#x27;s arguments.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@generated &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getproperty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;blob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Blob{T}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Symbol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;quote
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;meta&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;inline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(@splice (i, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fieldname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fieldnames&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(T)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;quote
            if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fieldname
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Blob&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{$(fieldtype(T, i))}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(blob &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;blob_offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Val{i}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
        end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; has no field &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From the outside, generated functions behave just like a normal function. This allows seamlessly mixing metaprogrammed code generation into normal code, without changing the outward interface or requiring consumers of the library to pre-register types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;and-the-rest&quot;&gt;And the rest&lt;&#x2F;h2&gt;
&lt;p&gt;The rest of the library packs in custom memory layout by adding new methods to the layout functions (which is how nested Blobs are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;Blobs.jl&#x2F;blob&#x2F;c1c9061659b8480f7b7264a8cd1d4d0075e6bd44&#x2F;src&#x2F;blob.jl#L157-L172&quot;&gt;converted to&#x2F;from offsets on read&#x2F;write&lt;&#x2F;a&gt;), implementations of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;Blobs.jl&#x2F;blob&#x2F;c1c9061659b8480f7b7264a8cd1d4d0075e6bd44&#x2F;src&#x2F;vector.jl&quot;&gt;fixed size vectors&lt;&#x2F;a&gt; &#x2F; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;Blobs.jl&#x2F;blob&#x2F;c1c9061659b8480f7b7264a8cd1d4d0075e6bd44&#x2F;src&#x2F;bit_vector.jl&quot;&gt;bitvectors&lt;&#x2F;a&gt; &#x2F; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;Blobs.jl&#x2F;blob&#x2F;c1c9061659b8480f7b7264a8cd1d4d0075e6bd44&#x2F;src&#x2F;string.jl&quot;&gt;strings&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;Blobs.jl&#x2F;blob&#x2F;c1c9061659b8480f7b7264a8cd1d4d0075e6bd44&#x2F;src&#x2F;layout.jl&quot;&gt;helper functions for initialization of complex data-structures&lt;&#x2F;a&gt;. All with similarly minimal overhead vs C.&lt;&#x2F;p&gt;
&lt;p&gt;As with the examples here, most of the work is done by the combination of type inference, type specialization and generated functions, with occasional uses of forced inlining to guarantee constant propagation. Unlike, say, a tracing JIT, this is predictable and deterministic. With some experience, it&#x27;s easy to write this kind of code and predict what Julia will do with it, allowing libraries like Blobs to provide abstractions without runtime overhead.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Julia as a platform for language development</title>
                <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/julia-as-a-platform-for-language-development/</link>
                <guid>http%3A//scattered-thoughts.net/writing/julia-as-a-platform-for-language-development/</guid>
                <description>&lt;p&gt;I gave a talk at JuliaCon 2018 on my experience using Julia to implement various declarative languages, including a &lt;a href=&quot;@writing&#x2F;2016-10-11-a-practical-relational-query-compiler-in-500-lines.md&quot;&gt;datalog variant&lt;&#x2F;a&gt;, a &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;relational-ui&#x2F;&quot;&gt;GUI description language&lt;&#x2F;a&gt; and recent work at &lt;a href=&quot;http:&#x2F;&#x2F;relational.ai&#x2F;&quot;&gt;RelationalAI&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe style=&quot;width: 45em; height: 25em&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;BBUrQId0HhQ&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;iframe style=&quot;width: 45em; height: 25em&quot; src=&quot;.&#x2F;talk.html&quot; frameborder=&quot;0&quot;&gt;&lt;&#x2F;iframe&gt;
</description>
            </item>
        
            <item>
                <title>Psychology vs the graphics pipeline</title>
                <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/psychology-vs-the-graphics-pipeline/</link>
                <guid>http%3A//scattered-thoughts.net/writing/psychology-vs-the-graphics-pipeline/</guid>
                <description>&lt;p&gt;(EDIT Much more accurate measurements are available eg &lt;a href=&quot;https:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;pmc&#x2F;articles&#x2F;PMC3883681&#x2F;&quot;&gt;for native software&lt;&#x2F;a&gt; and  &lt;a href=&quot;https:&#x2F;&#x2F;link.springer.com&#x2F;article&#x2F;10.3758%2Fs13428-014-0471-1&quot;&gt;for web software&lt;&#x2F;a&gt;. The former says that most native psych libraries can get to frame-level accuracy with the appropriate hardware. The latter has results for web software similar to what I found here and concludes that they don&#x27;t affect power for most experiments, but that the timing issues might be problematic for priming experiments like the one below and for correlational or longitudinal studies where differences between machines might have non-random impact.)&lt;&#x2F;p&gt;
&lt;p&gt;I often come across phrases in psychology papers like:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pdfs.semanticscholar.org&#x2F;0062&#x2F;86ab72a28a5411adc3078cbdd4b9897a4d90.pdf&quot;&gt;To test this prediction we exposed participants to photographs of faces or polygons [on a computer monitor] at suboptimal durations (40 ms) and optimal durations (400 ms).&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is interesting because most modern monitors &lt;em&gt;cannot&lt;&#x2F;em&gt; display an image for exactly 40ms. At the typical &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Refresh_rate&quot;&gt;refresh rate&lt;&#x2F;a&gt; of 60hz you can display an image for 33ms or 50ms, but not 40ms.&lt;&#x2F;p&gt;
&lt;p&gt;This is not a big deal by itself, but the fact that the researchers &lt;em&gt;think&lt;&#x2F;em&gt; that they displayed an image for 40ms means that they didn&#x27;t measure it at all. Which means it could be anything.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, few researchers share their code, and fewer still their hardware specs. For now I&#x27;ll settle for using &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;psychology-vs-the-graphics-pipeline&#x2F;testable.org&quot;&gt;testable.org&lt;&#x2F;a&gt; as a proxy measure.&lt;&#x2F;p&gt;
&lt;p&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;jamii&#x2F;e3a96a0dcdb739c4c2104a1e6e216348&quot;&gt;configured an experiment&lt;&#x2F;a&gt; with image exposures ranging from 10ms to 100ms, followed by a mask until the user presses a key and then a 50ms pause between key-press and the next image. I recorded the experiment running on an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IPS_panel&quot;&gt;IPS&lt;&#x2F;a&gt; monitor with a &lt;a href=&quot;https:&#x2F;&#x2F;www.slashgear.com&#x2F;nexus-6p-240fps-video-camera-test-impressive-most-impressive-19410533&#x2F;&quot;&gt;240fps camera&lt;&#x2F;a&gt;, because that&#x27;s what I had to hand.&lt;&#x2F;p&gt;
&lt;p&gt;First thing to note is that the image doesn&#x27;t appear and disappear sharply - instead it fades in and fades out.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;firefox1.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I recorded several other high-contrast videos to verify that this effect is not caused by the camera itself.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;contrast.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;IPS monitors are known to have particularly long response times, but all monitors will show this behavior to some extent. The result is that the image is still partially visible for some time after the mask appears.&lt;&#x2F;p&gt;
&lt;p&gt;I recorded the experiment three times in Firefox 58 and counted the number of camera frames for which the image was fully visible by itself, and the number for which it was partially visible under the mask.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Specified time (ms)&lt;&#x2F;th&gt;&lt;th&gt;Expected frames&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 full&lt;&#x2F;th&gt;&lt;th&gt;Trial 2 full&lt;&#x2F;th&gt;&lt;th&gt;Trial 3 full&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 partial&lt;&#x2F;th&gt;&lt;th&gt;Trial 2 partial&lt;&#x2F;th&gt;&lt;th&gt;Trial 3 partial&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;2.4&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;4.8&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;7.2&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;9.6&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;14.4&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;70&lt;&#x2F;td&gt;&lt;td&gt;16.8&lt;&#x2F;td&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;19.2&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;21.6&lt;&#x2F;td&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The number of fully visible frames is roughly correlated with the specified time. There is some variance between trials, which presumably corresponds to how the animation frame in the browser happened to line up with the refresh rate of the monitor.&lt;&#x2F;p&gt;
&lt;p&gt;The number of partially visible frames is fairly consistent at around 16 frames &#x2F; 67ms. That makes sense - we&#x27;re just measuring the response time of the display itself rather than anything that varies with the specified exposure time.&lt;&#x2F;p&gt;
&lt;p&gt;A couple of images in the first trial didn&#x27;t get a mask at all and were instead exposed for much longer. I don&#x27;t know the cause for this.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;firefox2.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I also did the same thing in Chrome 62.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Specified time (ms)&lt;&#x2F;th&gt;&lt;th&gt;Expected frames&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 full&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 partial&lt;&#x2F;th&gt;&lt;th&gt;Trial 2 full&lt;&#x2F;th&gt;&lt;th&gt;Trial 2 profile (ms)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;2.4&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;23.5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;4.8&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;24.3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;7.2&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;26.6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;9.6&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;36.9&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;14.4&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;58.1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;70&lt;&#x2F;td&gt;&lt;td&gt;16.8&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;61.4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;19.2&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;74.6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;21.6&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;82.9&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;93.8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The last column shows the time measured by the Chrome profiler during the second trial.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;chrome2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The profiler shows the same rough pattern as the recording, but it fails to capture all of the variance eg from 80ms to 90ms the recording showed the number of frames dropped from 24 to 20 but the profiler reported that the frame duration increased from 74.6ms to 82.9ms. Clearly, if you care about actual exposure time on the screen it&#x27;s not enough to rely on the profiler.&lt;&#x2F;p&gt;
&lt;p&gt;I also tried a slightly-older-but-still-high-end laptop with an internal IPS monitor.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Specified time (ms)&lt;&#x2F;th&gt;&lt;th&gt;Expected frames&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 full&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 partial&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;2.4&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;4.8&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;7.2&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;9.6&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;14.4&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;70&lt;&#x2F;td&gt;&lt;td&gt;16.8&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;19.2&lt;&#x2F;td&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;21.6&lt;&#x2F;td&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;And an external IPS monitor over HDMI.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Specified time (ms)&lt;&#x2F;th&gt;&lt;th&gt;Expected frames&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 full&lt;&#x2F;th&gt;&lt;th&gt;Trial 1 partial&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;2.4&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;4.8&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;7.2&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;9.6&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;14.4&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;70&lt;&#x2F;td&gt;&lt;td&gt;16.8&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;80&lt;&#x2F;td&gt;&lt;td&gt;19.2&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;90&lt;&#x2F;td&gt;&lt;td&gt;21.6&lt;&#x2F;td&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The external monitor shows a slightly different update pattern, but otherwise the results are similar.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;external.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, I don&#x27;t have immediate access to any slower machines or to any other display technologies. I suspect that a cheap webbook or university lab thin-client might be more susceptible to dropping frames. But even on the high-end machines I&#x27;ve tested, I&#x27;m seeing a request for 100ms exposure produce actual exposures of 71-133ms plus additional partially-obscured exposures of 42-83ms.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not sure if this is a problem for priming experiments. The exact exposure time maybe doesn&#x27;t affect the results that much.&lt;&#x2F;p&gt;
&lt;p&gt;It may be a problem though for reaction time experiments, where the reaction time is measured from when the software believes the image is first displayed. On top of the variance in display time, there are similar sources of variance on the input side in keyboard polling intervals, device drivers and event queues. And I&#x27;ve seen a fair few experiments where the mean difference between conditions is &amp;lt;40ms, so the effects are small enough that this noise could at the very least reduce power.&lt;&#x2F;p&gt;
&lt;p&gt;So the next step is to figure out how to externally measure the accuracy of a reaction time experiment.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Staged interpreters in Rust</title>
                <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/staged-interpreters-in-rust/</link>
                <guid>http%3A//scattered-thoughts.net/writing/staged-interpreters-in-rust/</guid>
                <description>&lt;p&gt;Last week I was writing an interpreter for a query language. On arithmetic-heavy queries the interpreter overhead was &amp;gt;10x compared to a compiled baseline. I tried staging the interpreter to move the overhead out of the inner loops. In the end the results weren&#x27;t worth the complexity compared to just writing a compiler so I didn&#x27;t end up finishing it. But I think it&#x27;s a neat idea anyway so I wrote a much simpler example to demonstrate.&lt;&#x2F;p&gt;
&lt;p&gt;(It&#x27;s essentially a &lt;a href=&quot;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;tagless-final&#x2F;JFP.pdf&quot;&gt;tagless staged interpreter&lt;&#x2F;a&gt; with the addition of shared mutable state).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at a much simpler example that I actually finished (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;rust-tagless&#x2F;blob&#x2F;master&#x2F;src&#x2F;main.rs&quot;&gt;source code&lt;&#x2F;a&gt;). It&#x27;s an interpreter for a rather pointless little language that has just enough features to illustrate the idea.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    Constant(Value)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Add(Box&amp;lt;Expr&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Box&amp;lt;Expr&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; e1 + e2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;    LessThan(Box&amp;lt;Expr&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Box&amp;lt;Expr&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; e1 &amp;lt; e2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;    Let(Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Box&amp;lt;Expr&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Box&amp;lt;Expr&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; let v::t = e1 in e2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;    Get(Name)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;    Set(Name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Box&amp;lt;Expr&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; v = e
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;    While(Box&amp;lt;Expr&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Box&amp;lt;Expr&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; while e1 { e2 }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is enough to write a rather pointless little program:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; let i = 1 {
&#x2F;&#x2F;   while i &amp;lt; 1000 {
&#x2F;&#x2F;     i = i + 1
&#x2F;&#x2F;   }
&#x2F;&#x2F; }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Let(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;i&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Constant(Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;While(
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;LessThan(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;i&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Constant(Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Set(
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;i&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;i&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Constant(Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;expr))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s look at what happens in the interpreter when we run this program.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Variable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    Number(Cell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Bool(Cell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;HashMap&amp;lt;Name, Variable&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Value {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;expr {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; value1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; value2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(value1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; value2) {
                (Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(
                    number1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Type error!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
        }
        Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(name)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(bool_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
        }
        Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Set(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(name)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value) {
                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    number_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(number)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                    value
                }
                (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Variable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    bool_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                    value
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Type error!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
        }
        Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;While(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1) {
                    Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;interpret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
                    Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Type error!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
            }
            Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The loop in our program executes &lt;code&gt;i = i + 1&lt;&#x2F;code&gt; on each iteration, and on each iteration we:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Check what to do with each expression: &lt;code&gt;match *expr { ... }&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Get the variable &lt;code&gt;i&lt;&#x2F;code&gt; from the environment hashtable twice: &lt;code&gt;env.get(name)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Check that the types of &lt;code&gt;i&lt;&#x2F;code&gt; and &lt;code&gt;1&lt;&#x2F;code&gt; are the same: &lt;code&gt;match (value1, value2) { ... }&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Check that the types of &lt;code&gt;i&lt;&#x2F;code&gt; and &lt;code&gt;i + 1&lt;&#x2F;code&gt; are the same: &lt;code&gt;match (env.get(name).unwrap(), &amp;amp;value) { ... }&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This is all wasted work. We know at the start of the loop that each of these decisions is going to come out the same way on every iteration. How can we avoid doing them on every iteration?&lt;&#x2F;p&gt;
&lt;p&gt;Suppose we have one pass that makes the decisions and another pass that actually runs the program. Something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Staged &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;expr)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(staged)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is &lt;code&gt;Staged&lt;&#x2F;code&gt;? It&#x27;s a thing that we can run and get back a &lt;code&gt;Value&lt;&#x2F;code&gt;. So the most general type we could use is a closure that returns &lt;code&gt;Value&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Staged &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Box&amp;lt;Fn() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Value&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we actually need a bit more information to build these efficiently. Remember we want to know the type of things ahead of time so that we don&#x27;t have to check on every loop. So we need to pull the tag out of the &lt;code&gt;Value&lt;&#x2F;code&gt; and wrap the entire closure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Staged &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    Number(Box&amp;lt;Fn() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Bool(Box&amp;lt;Fn() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These closures are going to close over variables, so we also need to make the variables shareable between multiple closures by adding a reference counted pointer:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;StagedVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
    Number(Rc&amp;lt;Cell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    Bool(Rc&amp;lt;Cell&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can just glue together bits of code to make these closures:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;HashMap&amp;lt;Name, StagedVariable&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Staged {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;expr {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Add(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; staged1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; staged2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(staged1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; staged2) {
                (Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number1)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number2)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;number1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;number2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
                })&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Type error!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
        }
        Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; name) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(name)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;StagedVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;StagedVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())
                }
            }
        }
        Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Set(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; staged &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(name)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;StagedVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; staged {
                        Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; number &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                                number_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(number)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                                number
                            })
                        }
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Type error!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;StagedVariable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; staged {
                        Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; bool_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
                                bool_cell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;})
                        }
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Type error!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
                }
            }
        }
        Expr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;While(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr1) {
                Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(bool1) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                    Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; expr2) {
                        Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bool(bool2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;bool1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;bool2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
                        }
                        Staged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Number(number2) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;bool1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
                                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;number2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false
                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
                        }
                    })
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Type error&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compared to before, on each iteration we now:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Call a function pointer to find out what to do with each expr&lt;&#x2F;li&gt;
&lt;li&gt;Close over the variable &lt;code&gt;i&lt;&#x2F;code&gt; and just need to dereference a pointer&lt;&#x2F;li&gt;
&lt;li&gt;Have already checked that the types of &lt;code&gt;i&lt;&#x2F;code&gt; and &lt;code&gt;1&lt;&#x2F;code&gt; are the same&lt;&#x2F;li&gt;
&lt;li&gt;Have already checked that the types of &lt;code&gt;i&lt;&#x2F;code&gt; and &lt;code&gt;i + 1&lt;&#x2F;code&gt; are the same&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Calling a function pointer is cheaper than a single hashtable lookup. The actual interpreter I was working had much more overhead per bytecode and typically executed heavily nested loops, so this was a clear win.&lt;&#x2F;p&gt;
&lt;p&gt;It wasn&#x27;t all positive though. I struggled with the increasing complexity of the code:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;I needed to read external data, so the actual type was &lt;code&gt;type Staged&amp;lt;&#x27;a&amp;gt; = Box&amp;lt;Fn() -&amp;gt; Value + &#x27;a&amp;gt;&lt;&#x2F;code&gt;. The lifetimes infected everything else.&lt;&#x2F;li&gt;
&lt;li&gt;Even though the closures themselves are typically polymorphic, we need to dispatch on type to get a specialized version of the closure for each type. In the example above we are only dispatching on a single two-way type so it isn&#x27;t so bad. In the real version I had some MxN dispatches that created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;3f442d30bd845a39f5cbeb7f5360529af068bc69&#x2F;src&#x2F;interpreter.rs#L660-L793&quot;&gt;astonishing amounts of boilerplate&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The compiled baseline keeps all state on the stack. To do the same in the staged interpreter we would have to allow each closure to take arguments instead of closing over shared mutable state. The trouble is that while we know the size of each argument in advance, we can&#x27;t write code that is generic over the number of arguments. So we&#x27;d still end up having to heap-allocate a &lt;code&gt;Vec&amp;lt;Argument&amp;gt;&lt;&#x2F;code&gt; or similar. Unless we dispatched on the size too...&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the end the whole thing was nixed by the fact that the staged interpreter had already become way more complex than the compiler I had written previously and that the improvements in compile time were more than lost by the slower run time.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m still curious whether the complexity can be circumvented, but I don&#x27;t have time to explore it further myself.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Contrast codes are an implementation detail</title>
                <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/contrast-coding-is-an-implementation-detail/</link>
                <guid>http%3A//scattered-thoughts.net/writing/contrast-coding-is-an-implementation-detail/</guid>
                <description>&lt;script type=&quot;text&#x2F;x-mathjax-config&quot;&gt;
MathJax.Hub.Config({
  tex2jax: {inlineMath: [[&#x27;$&#x27;,&#x27;$&#x27;]]}
});
&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;javascript&quot; async
  src=&quot;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.0&#x2F;MathJax.js?config=TeX-MML-AM_SVG&quot;&gt;
&lt;&#x2F;script&gt;
&lt;p&gt;I found &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Contrast_(statistics)&quot;&gt;contrast codes&lt;&#x2F;a&gt; really confusing on first contact. In hindsight, this is because they are typically presented as being part of the model, but it seems much more ergonomic to me to consider them part of the inference algorithm, as I&#x27;ll explain here.&lt;&#x2F;p&gt;
&lt;p&gt;If you haven&#x27;t encountered contrast codes before - good. Stay there. You are not missing out.&lt;&#x2F;p&gt;
&lt;p&gt;If you have encountered contrast codes and are confused, maybe this will help.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s set the scene. A typical instance of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;General_linear_model&quot;&gt;General Linear Model&lt;&#x2F;a&gt; looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;\begin{align}
y = a + \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix} \begin{pmatrix}x_1\\x_2\end{pmatrix} + e
\end{align}&lt;&#x2F;p&gt;
&lt;p&gt;Where $\begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix}$ is chosen to minimize error on the training data.&lt;&#x2F;p&gt;
&lt;p&gt;We want to ask questions like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q1: Is knowing $x_1$ useful if we already know $x_2$?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can answer this by comparing the prediction accuracy of this model against a simpler model:&lt;&#x2F;p&gt;
&lt;p&gt;\begin{align}
\text{full model: } &amp;amp; y = a + \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix}\begin{pmatrix}x_1\\x_2\end{pmatrix} + e \cr
\text{null model: } &amp;amp; y = a + \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix}\begin{pmatrix}x_1\\x_2\end{pmatrix} + e \text{ where } b_1 = 0 \cr
\end{align}&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q1*: Does assuming that $x_1$ has no effect ($b_1 = 0$) lead to less prediction error on unseen data?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The null model is a restricted version of the full model, so it will always have at least as much error on the training data as the full model. But if that is purely due to over-fitting then the null model will probably have less error on as-yet unseen data than the full model will.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately in many fields we &lt;a href=&quot;http:&#x2F;&#x2F;datacolada.org&#x2F;20&quot;&gt;usually don&#x27;t have enough data&lt;&#x2F;a&gt; to begin with, so we can&#x27;t afford to leave any data unseen. Instead we ask a different question:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q2: If reality behaved exactly according to the fitted null model, what is the probability that the full model would have this much less error on the training data?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this case we can give an exact analytic answer to Q2. (Whether that answer has any bearing on the answer to Q1 is another, much more complicated matter).&lt;&#x2F;p&gt;
&lt;p&gt;So where do contrast codes come in?&lt;&#x2F;p&gt;
&lt;p&gt;Suppose we are testing a drug and measuring some patient outcome $y$. We want to know the answer to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q1: Do patients in the treatment group have better outcomes than patients in the control group?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If we code the data as $X=\begin{pmatrix}1\\0\end{pmatrix}$ for subjects in the treatment group and $X=\begin{pmatrix}0\\1\end{pmatrix}$ for subjects in the control group, we can rephrase this question as:&lt;&#x2F;p&gt;
&lt;p&gt;\begin{align}
\text{full model: } &amp;amp; y = a + \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix}\begin{pmatrix}x_1\\x_2\end{pmatrix} + e \cr
\text{null model: } &amp;amp; y = a + \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix}\begin{pmatrix}x_1\\x_2\end{pmatrix} + e &amp;amp; \text{ where } b_1 = b_2 \cr
\end{align}&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q1*: Does assuming that the treatment group and the control group have the same outcome distribution ($b_1 = b_2$) lead to less prediction error on unseen data?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Again, answering this question is hard so we&#x27;re going to substitute a different question:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Q2: If reality behaved exactly according to the fitted null model, what is the probability that the full model would have this much less error on the training data?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unfortunately the nice analytic answer &lt;strong&gt;only works for constraints of the form $b_i = 0$&lt;&#x2F;strong&gt;. To apply it here, we need to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Change_of_basis&quot;&gt;transform the data&lt;&#x2F;a&gt; so that our model has the correct form:&lt;&#x2F;p&gt;
&lt;p&gt;\begin{align}
L &amp;amp; = \begin{pmatrix}1 &amp;amp; {-1}\\1 &amp;amp; 1\end{pmatrix} \cr
\text{full model: } y &amp;amp; = a + \begin{pmatrix}c_1 &amp;amp; c_2\end{pmatrix} L \begin{pmatrix}x_1\\x_2\end{pmatrix} + e  \cr
&amp;amp; = a + \begin{pmatrix}c_1 &amp;amp; c_2\end{pmatrix} \begin{pmatrix}x_1 - x_2\\x_1 + x_2\end{pmatrix} + e  \cr
\text{null model: } y &amp;amp; = a + \begin{pmatrix}c_1 &amp;amp; c_2\end{pmatrix} L \begin{pmatrix}x_1\\x_2\end{pmatrix} + e &amp;amp; \text{ where } c_1 = 0 \cr
&amp;amp; = a + \begin{pmatrix}c_1 &amp;amp; c_2\end{pmatrix} \begin{pmatrix}x_1 - x_2\\x_1 + x_2\end{pmatrix} + e &amp;amp; \text{ where } c_1 = 0 \cr
\end{align}&lt;&#x2F;p&gt;
&lt;p&gt;Now we can apply the same analytic solution as before.&lt;&#x2F;p&gt;
&lt;p&gt;The rows of $L$ are called &lt;strong&gt;contrast codes&lt;&#x2F;strong&gt;. But where do they come from? Well, I picked $\begin{pmatrix}1 &amp;amp; {-1}\end{pmatrix}$ for the first row because I wanted to restrict the null model to $(1)b_1 + (-1)b_2 = 0$, and I picked whatever second row would make $L$ invertible.&lt;&#x2F;p&gt;
&lt;p&gt;Since the rows of $L$ are orthogonal, we can interpret the confidence interval of $c_1$ as the confidence interval of the difference between the mean outcome in the control group and the mean outcome in the treatment group, which is exactly what we care about. (If the rows were not orthogonal the difference would get spread out across $c_1$ and $c_2$. Equivalently, the confidence intervals for $c_1$ and $c_2$ would not be independent.)&lt;&#x2F;p&gt;
&lt;p&gt;Additionally, since $L$ is invertible there is a 1-1 mapping between the transformed model and the original model:&lt;&#x2F;p&gt;
&lt;p&gt;\begin{align}
&amp;amp; \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix} = \begin{pmatrix}c_1 &amp;amp; c_2\end{pmatrix} L \cr
&amp;amp; \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix} L^{-1} = \begin{pmatrix}c_1 &amp;amp; c_2\end{pmatrix} \cr
\end{align}&lt;&#x2F;p&gt;
&lt;p&gt;(It doesn&#x27;t seem to be common to care about this though - I see many examples of non-invertible contrast codes.)&lt;&#x2F;p&gt;
&lt;p&gt;Importantly, none of this changes the fact the comparison we actually care about is still:&lt;&#x2F;p&gt;
&lt;p&gt;\begin{align}
\text{full model: } &amp;amp; y = a + \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix}\begin{pmatrix}x_1\\x_2\end{pmatrix} + e \cr
\text{null model: } &amp;amp; y = a + \begin{pmatrix}b_1 &amp;amp; b_2\end{pmatrix}\begin{pmatrix}x_1\\x_2\end{pmatrix} + e \text{ where } b_1 = b_2 \cr
\end{align}&lt;&#x2F;p&gt;
&lt;p&gt;Contrast codes are just an implementation detail by which we transform the comparison we care about into a comparison we can easily calculate the answer to. They don&#x27;t belong in the interface. In a world where we cared about ergonomics in statistics, we would just write the model above and our stats library would take care of the transformation itself.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>A UI library for a relational language</title>
                <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/relational-ui/</link>
                <guid>http%3A//scattered-thoughts.net/writing/relational-ui/</guid>
                <description>&lt;p&gt;TLDR:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;relational-ui&#x2F;#imp&quot;&gt;I&#x27;m working on a relational programming language intended for rapid GUI dev.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;relational-ui&#x2F;#templates&quot;&gt;Having tried a couple of different approaches to describing GUIs, I&#x27;ve settled on a React-like library that binds relational data to HTML templates.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;relational-ui&#x2F;#patching&quot;&gt;The library has very simple semantics, including an easy mental model for patching the DOM.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;relational-ui&#x2F;#implementation&quot;&gt;The template language can be implemented almost entirely by compiling to relational queries.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;relational-ui&#x2F;#performance&quot;&gt;The current implementation has been used to build a few simple examples, with performance on par with similar libraries in OOPy languages.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;The typical architecture for a small web or native app looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;datastore (relations) &amp;lt;-&amp;gt; application logic (objects) &amp;lt;-&amp;gt; GUI (trees)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Moving data back and forth between the first two layers is painful because of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object-relational_impedance_mismatch&quot;&gt;object-relational mismatch&lt;&#x2F;a&gt;. Developers typically try to solve this by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object-relational_mapping&quot;&gt;hiding&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NoSQL&quot;&gt;getting rid off&lt;&#x2F;a&gt; relations.&lt;&#x2F;p&gt;
&lt;p&gt;But relational data models have a lot of great qualities, so it&#x27;s interesting to try getting rid off the objects instead by making a datastore query language that can comfortably express the application logic.&lt;&#x2F;p&gt;
&lt;p&gt;But that still leaves us with another data model mismatch - between the relational model in the application logic and the tree model that almost every GUI uses.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;datastore + application logic (relations) &amp;lt;-&amp;gt; GUI (trees)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s what we&#x27;re going to deal with in this post.&lt;&#x2F;p&gt;
&lt;p&gt;To keep things concrete, we&#x27;ll use this very simple chat app as a running example.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;chat.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Yes, it is hideous, but it illustrates all the important cases while being small enough to show large chunks of the internal dataflow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;imp&quot;&gt;Imp&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;&quot;&gt;Imp&lt;&#x2F;a&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Datalog&quot;&gt;datalog&lt;&#x2F;a&gt;-ish language in the same family as &lt;a href=&quot;http:&#x2F;&#x2F;evelang.com&#x2F;&quot;&gt;Eve&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;www.logicblox.com&#x2F;&quot;&gt;LogicBlox&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;bloom-lang.net&#x2F;&quot;&gt;Bloom&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;www.cs.jhu.edu&#x2F;%7Enwf&#x2F;datalog20-paper.pdf&quot;&gt;Dyna&lt;&#x2F;a&gt; etc.&lt;&#x2F;p&gt;
&lt;p&gt;Imp is focused on reducing the number of layers and concepts involved in writing GUI apps - prioritizing simplicity over scale&#x2F;power.&lt;&#x2F;p&gt;
&lt;p&gt;The goal is to build apps that run on one machine or that serve small number of users on a local network, and not so much to build public apps that scale to large numbers of users. Think &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rstudio&#x2F;shiny&quot;&gt;shiny&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;nitrogenproject.com&#x2F;learn&quot;&gt;nitrogen&lt;&#x2F;a&gt;, not &lt;a href=&quot;http:&#x2F;&#x2F;rubyonrails.org&#x2F;&quot;&gt;rails&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Imp data is stored in relations. The schema is usually &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Sixth_normal_form&quot;&gt;highly normalized&lt;&#x2F;a&gt; - this has some important advantages that we will see later.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the relations used in the chat example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Session &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Int64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Int64

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Message)
@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_at&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DateTime
@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Message)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And a direct translation into sql:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;primary key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (session));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;primary key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (id));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;text varchar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;primary key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (id));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;primary key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (id));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_at&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;time timestamp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;primary key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (id));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;create table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;primary key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (username, id));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Imp programs are built out of relational queries. Each line within the query refers to a single relation and its columns. Whenever the same variable name is used for more than one column, those columns are joined together. Subqueries begin with &lt;code&gt;@query&lt;&#x2F;code&gt; and return an array of results for each column.&lt;&#x2F;p&gt;
&lt;p&gt;Here is a query that records data for each new message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new_message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session, text)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;username
  @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, _)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new_message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(new_message)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;new_message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;new_message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;username
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_at&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;new_message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And again, a direct translation into sql:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;;
create temporary table results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;new_message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;as text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; username, ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; next_message
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; new_message, username
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;new_message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; next_message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;insert into text select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; next_message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;text from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sent_by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; next_message, username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;insert into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sent_at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; next_message, now() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Imp is built on top of &lt;a href=&quot;https:&#x2F;&#x2F;julialang.org&#x2F;&quot;&gt;Julia&lt;&#x2F;a&gt;. The queries are &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;a-practical-relational-query-compiler-in-500-lines&#x2F;&quot;&gt;compiled to Julia code&lt;&#x2F;a&gt; and can use any Julia types and functions. The &lt;code&gt;DateTime&lt;&#x2F;code&gt; type and the &lt;code&gt;now()&lt;&#x2F;code&gt; function used above are part of the Julia standard library.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;previous-approaches&quot;&gt;Previous approaches&lt;&#x2F;h2&gt;
&lt;p&gt;In a typical OOPy language we would probably build these trees using a template language like this one:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;table&amp;gt;
  {% for message in messages %}
    &amp;lt;tr&amp;gt;
      &amp;lt;td&amp;gt;{% message.sent_by %}:&amp;lt;&#x2F;td&amp;gt;
      &amp;lt;td&amp;gt;{% message.text %}&amp;lt;&#x2F;td&amp;gt;
      &amp;lt;td&amp;gt;
        {% for like in message.likes %}
          &amp;lt;div&amp;gt;{% like.liker %} likes this&amp;lt;&#x2F;div&amp;gt;
        {% endfor %}
      &amp;lt;&#x2F;td&amp;gt;
      &amp;lt;td&amp;gt;
        &amp;lt;button onclick=&amp;quot;new_like({% session %}, {% message.id %})&amp;quot;&amp;gt;
          like!
        &amp;lt;&#x2F;button&amp;gt;
      &amp;lt;&#x2F;td&amp;gt;
    &amp;lt;&#x2F;tr&amp;gt;
  {% endfor %}
&amp;lt;&#x2F;table&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are all kinds of template languages, but what they generally have in common is that their visual appearance mimics the mental model of the tree they are producing. This makes them much easier to read and navigate.&lt;&#x2F;p&gt;
&lt;p&gt;In previous versions of Imp, I&#x27;ve tried two different approaches to building trees. Both are pretty hard to follow, so just let your eyes glaze over and see the rough outline.&lt;&#x2F;p&gt;
&lt;p&gt;The first approach was to just use an existing tree datatype and use subqueries and aggregation to build it up:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hiccup &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# virtual DOM library

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hiccup.Node

@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session)
  @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text
    @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, message)
      like_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;like_node
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(sent_by),
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(text),
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(like_node...),
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    )
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message_node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message_node...)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table_node
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The second was to represent the tree as a set of relations, using hashes to create unique node ids:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;UInt64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Node
@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Node
@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sort_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Any
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@relation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;attribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session)
  table_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table_node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;table_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;table&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text
  table_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session))
  tr_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;tr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, message))
  td_node_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  td_node_2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  td_node_3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  button_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, message))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tr_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table_node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tr_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tr&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tr_node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;attribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;textContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sort_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tr_node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;attribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;textContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sort_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tr_node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sort_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;td_node_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;button_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tr_node
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;button_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;button&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;attribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;button_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;textContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;attribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;button_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sort_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;button_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, message)
  td_node_3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;td&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  liker_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;like&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, message, liker))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;td_node_3
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;div&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sort_key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this!&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;attribute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker_node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;textContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The extreme verbosity of the second approach can be tamed with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;witheve&#x2F;eve-starter&#x2F;blob&#x2F;master&#x2F;programs&#x2F;todomvc.eve#L99-L103&quot;&gt;a little syntax sugar&lt;&#x2F;a&gt;, but both approaches still suffer from the lack of visual similarity between the code structure and the UI structure.&lt;&#x2F;p&gt;
&lt;p&gt;The core problem is these nested &lt;code&gt;for&lt;&#x2F;code&gt; loops in the OOPy template:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;{% for message in messages %}
  ...
      {% for like in message.likes %}
        ...
      {% endfor %}
  ...
{% endfor %}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can try to emulate this structure with a relational query:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; message, likes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;where &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this query does not return any results for messages which have no likes. To generate the correct UI tree we have to break this up into multiple queries, use subqueries or use &lt;a href=&quot;https:&#x2F;&#x2F;blog.heapanalytics.com&#x2F;postgresqls-powerful-new-join-type-lateral&#x2F;&quot;&gt;lateral joins&lt;&#x2F;a&gt;. That leads to tangled query code that is hard to visually match up to the resulting tree.&lt;&#x2F;p&gt;
&lt;p&gt;So I created a relational analogue to the OOPy template language, that expresses these nested joins in a way that visually mimics the structure of the resulting HTML tree.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;templates&quot;&gt;Templates&lt;&#x2F;h2&gt;
&lt;p&gt;Imp templates look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[table
  @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
        @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Templates are made up of four kinds of elements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DOM nodes like &lt;code&gt;[table ...]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;DOM attributes like &lt;code&gt;onclick=&amp;quot;new_like($session, $message)&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Text nodes like &lt;code&gt;&amp;quot;$liker likes this!&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Query fragments like &lt;code&gt;@query likes(liker, message) begin ... end&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Query fragments like &lt;code&gt;@query likes(liker, message) begin ... end&lt;&#x2F;code&gt; acts much like a &lt;code&gt;for&lt;&#x2F;code&gt; loop. For each row in the &lt;code&gt;likes&lt;&#x2F;code&gt; relation, we create a copy of everything between &lt;code&gt;begin&lt;&#x2F;code&gt; and &lt;code&gt;end&lt;&#x2F;code&gt;. But any variables that have already appeared in an enclosing query fragment are already bound to some value, so we keep only the rows that have matching values. In this case, &lt;code&gt;message&lt;&#x2F;code&gt; already appeared the in the enclosing query fragment &lt;code&gt;message(message) begin ... end&lt;&#x2F;code&gt;. The equivalent code in the OOPy template would be &lt;code&gt;{% for like in likes if like.message == message.id %}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The order the rows appear in is determined by sorting them by their variables in lexicographic order. So rows from &lt;code&gt;likes(liker, message)&lt;&#x2F;code&gt; are sorted first by &lt;code&gt;liker&lt;&#x2F;code&gt; and then by &lt;code&gt;message&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see how this works out in practice. Here is the data behind the screenshot from the beginning of this post:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hi&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;greetings&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;free tacos all round!&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we run the query fragments in our templates on this data, we get:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[table
  @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hi&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;greetings&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;free tacos all round!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
        @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we take all the text nodes, such as &lt;code&gt;&amp;quot;$liker likes this!&amp;quot;&lt;&#x2F;code&gt;, and replace the &lt;code&gt;$&lt;&#x2F;code&gt;-interpolated variables with their values.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[table
  @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 1)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hi&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 2)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;greetings&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;greetings&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 3)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;free tacos all round!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;free tacos all round!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td
        @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
      [td
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 4)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that the interpolated variables have been filled in we don&#x27;t need the query fragments anymore, so they are each removed and replaced by their children, yielding our final DOM tree:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[table
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 1)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 2)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;greetings&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 3)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;free tacos all round!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
      [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 4)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;patching&quot;&gt;Patching&lt;&#x2F;h2&gt;
&lt;p&gt;As described so far, this is only good for one-off rendering. We need to define what happens when the underlying data changes. Suppose Alice retracts her liking of free tacos, Bob deletes his message entirely and Chia sends a new message complaining about their fickleness.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;message(1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-message(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message(3)
message(4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+message(5)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
sent_by(1) =&amp;gt; &amp;quot;alice&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-sent_by(2) =&amp;gt; &amp;quot;bob&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by(3) =&amp;gt; &amp;quot;chia&amp;quot;
sent_by(4) =&amp;gt; &amp;quot;chia&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+sent_by(5) =&amp;gt; &amp;quot;chia&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
text(1) =&amp;gt; &amp;quot;hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-text(2) =&amp;gt; &amp;quot;hi&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text(3) =&amp;gt; &amp;quot;greetings&amp;quot;
text(4) =&amp;gt; &amp;quot;free tacos all round!&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+text(5) =&amp;gt; &amp;quot;who doesn&amp;#39;t like free tacos?&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-likes(&amp;quot;alice&amp;quot;, 4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;likes(&amp;quot;bob&amp;quot;, 4)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the new data, the template now specifies this DOM tree:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[table
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 1)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;greetings&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 3)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;free tacos all round!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
      [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bob likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 4)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
  [tr
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;chia:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;who doesn&amp;#39;t like free tacos?&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    [td
    ]
    [td
      [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 5)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    ]
  ]
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Obviously, we want to guarantee that changes are made to the DOM in the browser so that the end result matches the new results from the template.&lt;&#x2F;p&gt;
&lt;p&gt;But it&#x27;s not enough to specify only the end result. Some DOM nodes have their own state that is not reflected in the template, such as scroll position or text entered by the user. It&#x27;s not practical to manage this state from the server, both because of the latency involved and the inability to block the client or save up keystrokes. But deleting and recreating a node will erase its state. So as part of the semantics of the template library we have to specify exactly what changes it makes to the DOM on the way to the correct end result.&lt;&#x2F;p&gt;
&lt;p&gt;Libraries like &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;&quot;&gt;React&lt;&#x2F;a&gt; do this by &lt;a href=&quot;https:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;docs&#x2F;reconciliation.html&quot;&gt;specifying&lt;&#x2F;a&gt; an algorithm that compares the old and new DOM trees and computes a set of changes that will turn one into the other. When comparing large lists of elements, it recommends that users supply a unique key for each element to help React decide whether to mutate an old list element or delete and replace it. It warns:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is important to remember that the reconciliation algorithm is an implementation detail... We are regularly refining the heuristics in order to make common use cases faster.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Keys should be stable, predictable, and unique. Unstable keys ... will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Given that varying the heuristics can result in lost state in child components, I&#x27;m reluctant to endorse describing them as an implementation detail. But it&#x27;s difficult for React to do much better because the mapping from data to virtual DOM is defined by opaque javascript code.&lt;&#x2F;p&gt;
&lt;p&gt;In our templates we have much better information about how data maps to the filled out template, so we can adopt a much simpler set of rules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When a new row is added to a relation, everything under the corresponding query fragment is created from scratch.&lt;&#x2F;li&gt;
&lt;li&gt;When a row is removed from a relation, everything under the corresponding query fragment is deleted.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Updating a row is the same as removing the old row and adding the new row. Since the schema is so heavily normalized this generally doesn&#x27;t affect any values other than the one that was changed.&lt;&#x2F;p&gt;
&lt;p&gt;So if the change to our data is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;message(1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-message(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message(3)
message(4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+message(5)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
sent_by(1) =&amp;gt; &amp;quot;alice&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-sent_by(2) =&amp;gt; &amp;quot;bob&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by(3) =&amp;gt; &amp;quot;chia&amp;quot;
sent_by(4) =&amp;gt; &amp;quot;chia&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+sent_by(5) =&amp;gt; &amp;quot;chia&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
text(1) =&amp;gt; &amp;quot;hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-text(2) =&amp;gt; &amp;quot;hi&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text(3) =&amp;gt; &amp;quot;greetings&amp;quot;
text(4) =&amp;gt; &amp;quot;free tacos all round!&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+text(5) =&amp;gt; &amp;quot;who doesn&amp;#39;t like free tacos?&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-likes(&amp;quot;alice&amp;quot;, 4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;likes(&amp;quot;bob&amp;quot;, 4)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then the change to the DOM will be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[table
  [tr
    [td &amp;quot;alice:&amp;quot;]
    [td &amp;quot;hello&amp;quot;]
    [td
    ]
    [td
      [button &amp;quot;like!&amp;quot; onclick=&amp;quot;new_like(42, 1)&amp;quot;]
    ]
  ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-  [tr
-    [td &amp;quot;bob:&amp;quot;]
-    [td &amp;quot;hi&amp;quot;]
-    [td
-    ]
-    [td
-      [button &amp;quot;like!&amp;quot; onclick=&amp;quot;new_like(42, 2)&amp;quot;]
-    ]
-  ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;  [tr
    [td &amp;quot;chia:&amp;quot;]
    [td &amp;quot;greetings&amp;quot;]
    [td
    ]
    [td
      [button &amp;quot;like!&amp;quot; onclick=&amp;quot;new_like(42, 3)&amp;quot;]
    ]
  ]
  [tr
    [td &amp;quot;chia:&amp;quot;]
    [td &amp;quot;free tacos all round!&amp;quot;]
    [td
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-      [div &amp;quot;alice likes this!&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;      [div &amp;quot;bob likes this!&amp;quot;]
    ]
    [td
      [button &amp;quot;like!&amp;quot; onclick=&amp;quot;new_like(42, 4)&amp;quot;]
    ]
  ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+  [tr
+    [td &amp;quot;chia:&amp;quot;]
+    [td &amp;quot;who doesn&amp;#39;t like free tacos?&amp;quot;]
+    [td
+    ]
+    [td
+      [button &amp;quot;like!&amp;quot; onclick=&amp;quot;new_like(42, 5)&amp;quot;]
+    ]
+  ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That is, we delete the &lt;code&gt;[tr ...]&lt;&#x2F;code&gt; subtree containing Bobs message, we delete the &lt;code&gt;[div ...]&lt;&#x2F;code&gt; containing Alices like and we create a new subtree for Chias new message.&lt;&#x2F;p&gt;
&lt;p&gt;That may seem obvious, but we could just as correctly have decided to leave the four message subtrees intact but change the text of each. Without unique keys to help match up the old and new subtrees, React might decide to do exactly that.&lt;&#x2F;p&gt;
&lt;p&gt;Tying the identity of each subtree to the rows that feed them data provides a simple mental model that is easy to map to the visual appearance of the template.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;events&quot;&gt;Events&lt;&#x2F;h2&gt;
&lt;p&gt;We also need to be able to react to user input.&lt;&#x2F;p&gt;
&lt;p&gt;In Imp, we can tag relations as event relations:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@event &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new_like&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Session, Message)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For every event relation, a matching javascript function is created that will insert a row into that relation. Event handlers in the template can call these functions to send data back to the server.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then we can write Imp queries to react to these events:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new_like&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session, message)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;username
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(username, message)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also still allow arbitrary javascript in event handlers, which is useful for eg reading state from the DOM.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[input
  style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;width: 100%; height: 2em&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;placeholder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;What do you want to say?&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onkeydown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;if (event.which == 13) {new_message(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, this.value); this.value=&amp;#39;&amp;#39;}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, if this was running in the browser itself or we were using a native UI toolkit it might be useful to manage such state directly. But in the current server&#x2F;client implementation it&#x27;s more practical to leave low-latency interactions such as typing and scrolling to the browser.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sessions&quot;&gt;Sessions&lt;&#x2F;h2&gt;
&lt;p&gt;We give each browser tab a unique session key. The template is implicitly wrapped in &lt;code&gt;@query session(session) begin ... end&lt;&#x2F;code&gt; so that it can behave differently for each session.&lt;&#x2F;p&gt;
&lt;p&gt;For example, when someone clicks &lt;code&gt;like!&lt;&#x2F;code&gt; we record their session id so we can later display their username in the likes list.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;As much as possible we want to do the work in Imp queries. This lets us take advantage of the query compiler for efficient joins. It also means that when I get around to implementing &lt;a href=&quot;http:&#x2F;&#x2F;blogs.evergreen.edu&#x2F;sosw&#x2F;files&#x2F;2014&#x2F;04&#x2F;Green-Vol5-DBS-017.pdf&quot;&gt;incremental view maintenance&lt;&#x2F;a&gt;, I&#x27;ll get incremental template evaluation for free.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s walk through how the template compiler deals with our example.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing the compiler does is number all the nodes (in pre-order) to make it easier to refer to them.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;[table &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 3
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 8
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 9
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 6
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 12
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, for each query fragment we create a corresponding query that performs a join against all the data produced by the enclosing queries. We also create an id for each filled out query fragment by hashing together the node id and all the variable values. (This id is just used as a shorthand reference - if hash collisions are worrying you could use some kind of lookup table or even just use the list of variable values directly.)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# special dummy query for the root of the tree
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(session)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my_hash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message, sent_by)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(sent_by, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my_hash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message, text)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(text, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my_hash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, message)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my_hash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we run these queries on the original data, we get something like this (but with real hashes):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;query_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x00

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x01
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x02
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x03
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x04

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x05
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x06
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;chia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x07
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;chia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x08

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x09
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;greetings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;free tacos all round!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x12

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x13
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x14
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we need to calculate what order the remaining nodes will be in after the query fragments are removed. Doing this in a way that is amenable to efficient incremental maintenance is tricky eg if we just calculate positions of each child within its parent, inserting one child would mean updating the positions of all the children that came after it.&lt;&#x2F;p&gt;
&lt;p&gt;But I eventually hit upon an elegant solution. The position of each node can be described by the positions and variable values of all the query nodes between it and its eventual parent:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# --- template ---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;

[table &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 3
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 8
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 9
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 6
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 12
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
]

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# --- filled out template ---&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;

[table &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# node 1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [tr &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1st child of node 1 -&amp;gt; 1st child of node 2 -&amp;gt; message=1
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1st child of node 1 -&amp;gt; 1st child of node 2 -&amp;gt; message=1 -&amp;gt; 1st child of node 3 -&amp;gt; sent_by=&amp;quot;alice&amp;quot; -&amp;gt; 1st child of node 4
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1st child of node 1 -&amp;gt; 1st child of node 2 -&amp;gt; message=1 -&amp;gt; 2nd child of node 3 -&amp;gt; text=&amp;quot;hello&amp;quot; -&amp;gt; 1st child of node 5
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1st child of node 1 -&amp;gt; 1st child of node 2 -&amp;gt; message=1 -&amp;gt; 3rd child of node 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1st child of node 1 -&amp;gt; 1st child of node 2 -&amp;gt; message=1 -&amp;gt; 4th child of node 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 1)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# 1st child of node 1 -&amp;gt; 1st child of node 2 -&amp;gt; message=1 -&amp;gt; 4th child of node 3 -&amp;gt; 1st child of node 7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      ]
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# etc...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(A potential confusion - when we say &amp;quot;nth child of node x&amp;quot; we mean the nth child in the &lt;em&gt;template&lt;&#x2F;em&gt;, not in the resulting DOM tree. We can&#x27;t use the positions in the DOM tree because those are exactly what we are trying to calculate.)&lt;&#x2F;p&gt;
&lt;p&gt;If we represent these paths as tuples and use them as sort keys, the nodes at each level will end up sorted in the correct order:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td]
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 1)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we insert new nodes around an existing one its key doesn&#x27;t change, so whatever incremental maintenance algorithm I end up using will only have to deal with inserting and deleting rows for each node and not updating any additional bookkeeping information elsewhere.&lt;&#x2F;p&gt;
&lt;p&gt;Julia can avoid dynamic dispatch when given stable types. To make sure all the sort keys have the same type, we can just fill in dummy columns.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;alice:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;hello&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td]
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [td [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(42, 1)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now for each DOM node in the template we create a query that calculates the correct sort key, as well as the node id, the parent node id, the type of DOM node and the content.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_hash
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;UInt64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;table&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(sent_by, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(text))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;button&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;div&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;query_parent_hash
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  my_hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, query_parent_hash)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (fixed_parent_hash, my_hash, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot; likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we run these queries on the original data, we get something like this (but with real hashes):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;group_0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;table&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;alice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x06&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x07&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x08&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x09&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;bob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;chia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;greetings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x04&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;chia&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;free tacos all round!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x19&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x21&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# etc...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have a list of every DOM node together with a (probably) unique id and the id of its parent node. Since they are sorted in the correct order we can also easily find the siblings of each node. That will come in handy later when we patch the DOM tree.&lt;&#x2F;p&gt;
&lt;p&gt;DOM attributes like &lt;code&gt;onclick=&amp;quot;new_like($session, $message)&amp;quot;&lt;&#x2F;code&gt; are handled similarly to DOM nodes, except that their order doesn&#x27;t matter so there is no sort key.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;group_7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (_, fixed_parent_hash, _, _)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;attribute_16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;fixed_parent_hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, session, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, message, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now lets consider again what happens when our source data changes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;message(1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-message(2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message(3)
message(4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+message(5)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
sent_by(1) =&amp;gt; &amp;quot;alice&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-sent_by(2) =&amp;gt; &amp;quot;bob&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by(3) =&amp;gt; &amp;quot;chia&amp;quot;
sent_by(4) =&amp;gt; &amp;quot;chia&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+sent_by(5) =&amp;gt; &amp;quot;chia&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
text(1) =&amp;gt; &amp;quot;hello&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-text(2) =&amp;gt; &amp;quot;hi&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text(3) =&amp;gt; &amp;quot;greetings&amp;quot;
text(4) =&amp;gt; &amp;quot;free tacos all round!&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+text(5) =&amp;gt; &amp;quot;who doesn&amp;#39;t like free tacos?&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-likes(&amp;quot;alice&amp;quot;, 4)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;likes(&amp;quot;bob&amp;quot;, 4)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This results in downstream changes in the compiled queries:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;group_0(42, 1) =&amp;gt; (0x00, 0x01, Html, &amp;quot;table&amp;quot;)

group_1(42, 1, 1, 1) =&amp;gt; (0x01, 0x02, Html, &amp;quot;tr&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-group_1(42, 1, 2, 1) =&amp;gt; (0x01, 0x03, Html, &amp;quot;tr&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;group_1(42, 1, 3, 1) =&amp;gt; (0x01, 0x04, Html, &amp;quot;tr&amp;quot;)
group_1(42, 1, 4, 1) =&amp;gt; (0x01, 0x05, Html, &amp;quot;tr&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+group_1(42, 1, 5, 1) =&amp;gt; (0x01, 0x22, Html, &amp;quot;tr&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
group_3(42, 1, 1, &amp;quot;alice&amp;quot;, 1, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x02, 0x06, Html, &amp;quot;td&amp;quot;)
group_3(42, 1, 2, &amp;quot;&amp;quot;, 0, &amp;quot;hello&amp;quot;, 1) =&amp;gt; (0x02, 0x07, Html, &amp;quot;td&amp;quot;)
group_3(42, 1, 3, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x02, 0x08, Html, &amp;quot;td&amp;quot;)
group_3(42, 1, 4, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x02, 0x09, Html, &amp;quot;td&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;-group_3(42, 2, 1, &amp;quot;bob&amp;quot;, 1, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x03, 0x10, Html, &amp;quot;td&amp;quot;)
-group_3(42, 2, 2, &amp;quot;&amp;quot;, 0, &amp;quot;hi&amp;quot;, 1) =&amp;gt; (0x03, 0x11, Html, &amp;quot;td&amp;quot;)
-group_3(42, 2, 3, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x03, 0x12, Html, &amp;quot;td&amp;quot;)
-group_3(42, 2, 4, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x03, 0x13, Html, &amp;quot;td&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;group_3(42, 3, 1, &amp;quot;chia&amp;quot;, 1, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x04, 0x14, Html, &amp;quot;td&amp;quot;)
group_3(42, 3, 2, &amp;quot;&amp;quot;, 0, &amp;quot;greetings&amp;quot;, 1) =&amp;gt; (0x04, 0x15, Html, &amp;quot;td&amp;quot;)
group_3(42, 3, 3, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x04, 0x16, Html, &amp;quot;td&amp;quot;)
group_3(42, 3, 4, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x04, 0x17, Html, &amp;quot;td&amp;quot;)
group_3(42, 4, 1, &amp;quot;chia&amp;quot;, 1, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x05, 0x18, Html, &amp;quot;td&amp;quot;)
group_3(42, 4, 2, &amp;quot;&amp;quot;, 0, &amp;quot;free tacos all round!&amp;quot;, 1) =&amp;gt; (0x05, 0x19, Html, &amp;quot;td&amp;quot;)
group_3(42, 4, 3, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x05, 0x20, Html, &amp;quot;td&amp;quot;)
group_3(42, 4, 4, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x05, 0x21, Html, &amp;quot;td&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;+group_3(42, 5, 1, &amp;quot;chia&amp;quot;, 1, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x22, 0x23, Html, &amp;quot;td&amp;quot;)
+group_3(42, 5, 2, &amp;quot;&amp;quot;, 0, &amp;quot;who doesn&amp;#39;t like free tacos?&amp;quot;, 1) =&amp;gt; (0x22, 0x24, Html, &amp;quot;td&amp;quot;)
+group_3(42, 5, 3, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x22, 0x25, Html, &amp;quot;td&amp;quot;)
+group_3(42, 5, 4, &amp;quot;&amp;quot;, 0, &amp;quot;&amp;quot;, 0) =&amp;gt; (0x22, 0x26, Html, &amp;quot;td&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
# etc...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First, for each old node that is not in the new output we instruct the browser to delete the node.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;deleteNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x03&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;deleteNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;deleteNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;deleteNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;deleteNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# etc...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Second, for each new node that is not in the old output we find its sibling, if it has one, and instruct the browser to create the new node and insert it in the appropriate place.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;insertAtEnd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x22&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;tr&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;insertAtEnd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;insertBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x26&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;insertBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;insertBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x24&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0x23&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Html, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;td&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# etc...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The nodes in each group are sorted in the order they will appear in the DOM and the groups themselves are sorted in depth-first order, so if we generate these instructions by order of group and then reverse order within the group, we can be sure that by the time each instruction is run the parent and sibling will always exist.&lt;&#x2F;p&gt;
&lt;p&gt;(What about html escaping? Well, the only way we ever create DOM nodes is via &lt;code&gt;document.createElement&lt;&#x2F;code&gt; or &lt;code&gt;document.createTextNode&lt;&#x2F;code&gt; so injection attacks are not possible there. It &lt;em&gt;is&lt;&#x2F;em&gt; currently possible to inject javascript into interpolated values in event handlers. I plan to deal with that by jsonifying data before interpolating it into javascript strings.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;expressiveness&quot;&gt;Expressiveness&lt;&#x2F;h2&gt;
&lt;p&gt;All the examples in this post only spliced data into text nodes, but the implementation allows splicing anywhere:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dynamic_tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(tag) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dynamic_attributes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(key, val) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The templates are just Julia ASTs, so it&#x27;s possible to create components using ordinary Julia code:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  [table
    @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [tr
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message_template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)...)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes_template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
        [td
          [button &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;like!&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;onclick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;new_like(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        ]
      ]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;message_template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [
    @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sent_by&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      [td &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  ] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end

function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes_template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;quote&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    [td
      @query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;likes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(liker, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;message) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;liker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; likes this!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    ]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It should be trivial to provide a macro that makes the syntax more direct.&lt;&#x2F;p&gt;
&lt;p&gt;Currently templates are limited to a fixed depth, so they can&#x27;t express eg a file browser where the depth depends on the data. Allowing components to include themselves recursively would fix this, but it&#x27;s non-obvious how to combine recursion with the query-based implementation I described earlier. It&#x27;s probably not impossible, but I won&#x27;t attempt to deal with it until I definitely need it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance&lt;&#x2F;h2&gt;
&lt;p&gt;I won&#x27;t know for sure how well this will perform until I&#x27;ve built something more substantial, but for early feedback I ran some simple timings on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;old-experiments&#x2F;examples&#x2F;Todo.jl&quot;&gt;Todomvc example&lt;&#x2F;a&gt; and compared it the &lt;a href=&quot;http:&#x2F;&#x2F;todomvc.com&#x2F;examples&#x2F;react&#x2F;#&#x2F;&quot;&gt;official React implementation&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;swannodette.github.io&#x2F;todomvc&#x2F;labs&#x2F;architecture-examples&#x2F;om&#x2F;index.html&quot;&gt;some old Om implementation&lt;&#x2F;a&gt;. This is not intended to be a pissing contest - I&#x27;m just trying to get a handle on whether performance is likely to be a problem.&lt;&#x2F;p&gt;
&lt;p&gt;My approach is not particularly rigorous. I just ran through all the benchmarks a few times to warmup, and then recorded a profile and eyeballed the time from the user event until the start of layout&#x2F;rendering&#x2F;painting.&lt;&#x2F;p&gt;
&lt;p&gt;Imp does all the hard work on the server, so its profiles just show the initial message send and then the patching at the end. React does all the work at once, leading to single long trace. Om does some work to update the app model, and then calculates the diff and patches the DOM on the next animation frame, resulting in two traces.&lt;&#x2F;p&gt;
&lt;p&gt;Times in ms:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;adding 1st todo&lt;&#x2F;th&gt;&lt;th&gt;adding 200 todos at once&lt;&#x2F;th&gt;&lt;th&gt;adding 201st todo&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;imp&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;imp-1.png&quot;&gt;10&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;imp-200.png&quot;&gt;22&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;imp-201.png&quot;&gt;12&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;react&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;react-1.png&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;x&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;react-201.png&quot;&gt;14&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;om&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;om-1.png&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;om-200.png&quot;&gt;100&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;a href=&quot;&#x2F;img&#x2F;om-201.png&quot;&gt;28&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;(I couldn&#x27;t be bothered to download and compile the React version myself to add a button to add 200 todos at once.)&lt;&#x2F;p&gt;
&lt;p&gt;I won&#x27;t bother reading too much detail into those numbers, but it&#x27;s clear that Imp is at least in the same ballpark as React and Om for this simple example, which means that this approach could feasibly work.&lt;&#x2F;p&gt;
&lt;p&gt;I also tested how the server scales with multiple sessions connected. This table shows the total time taken by the server to add the 201st todo and update every client (mean of 100 runs).&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;tabs&lt;&#x2F;th&gt;&lt;th&gt;time (ms)&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;100&lt;&#x2F;td&gt;&lt;td&gt;168&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1000*&lt;&#x2F;td&gt;&lt;td&gt;2056&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;(*Chrome has a cunning optimization where after ~150 tabs it just stops loading pages, so the last row is 100 real tabs and 900 fake sessions.)&lt;&#x2F;p&gt;
&lt;p&gt;This is the cost to recalculate everything from scratch and is not proportional to the number of events processed, so if I add some kind of event batching it looks like I could handle up to 100 clients with reasonable latency.&lt;&#x2F;p&gt;
&lt;p&gt;Breaking down the costs at 100 tabs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The marginal cost per tab is about 1.6ms. The bulk of the time is spent sorting and resorting relations, rather than solving queries.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The marginal allocation rate per tab is 1mb across 5373 allocations. This is almost entirely in the template queries. Most of the individual allocations are from creating identical event strings on each of 200 todos x 100 tabs, but the bulk of the allocation size is from many, many copies of the columns in these relations.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So there is probably a lot of margin for improvement in the control flow layer that binds the queries together and handles sorting&#x2F;indexing relations. Which is unsurprising, because one of the top items on my todo list is &lt;code&gt;control flow is a pile of poop - make it not that&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Bear in mind also that this is recalculating the UI for each tab from scratch on each event. The UI calculation is built up entirely out of simple joins and maps so in theory it should be easy to maintain incrementally.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, I&#x27;m pleasantly surprised that it&#x27;s already this fast.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;status&quot;&gt;Status&lt;&#x2F;h2&gt;
&lt;p&gt;The current implementation is not pretty, but it works well enough to demonstrate that this is feasible for simple examples.&lt;&#x2F;p&gt;
&lt;p&gt;I targeted the browser purely for familiarity. The same approach should work with native UI toolkits too, and I may well switch in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Running everything on the server has obvious limitations wrt latency and maximum load. I &lt;em&gt;think&lt;&#x2F;em&gt; this approach could be scaled to handle public webapps with many users, but it would require a much more sophisticated implementation, with some way to run parts of the logic on the client.&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t given much thought to security yet. A good start would be to track what events are present in the template and refuse to allow clients to submit any events that aren&#x27;t on the list.&lt;&#x2F;p&gt;
&lt;p&gt;The implementation strategy here produces non-recursive views which only use simple joins, string concatenation and hashing. It should be possible to target pretty much any relational system. I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;tree&#x2F;eea5f31a07e8d33b01d059ca491dd6cceb74d752&#x2F;lb&quot;&gt;implemented the underlying layers&lt;&#x2F;a&gt; in &lt;a href=&quot;http:&#x2F;&#x2F;logicblox.com&#x2F;&quot;&gt;LogicBlox&lt;&#x2F;a&gt; and I&#x27;m just waiting on some upcoming features before doing the work to compile templates automatically. It would be useful to target something like sqlite too.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to rtnz for extensive feedback on the first drafts.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Decision points and utility</title>
                <pubDate>Sat, 08 Jul 2017 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/decision-points-and-utility/</link>
                <guid>http%3A//scattered-thoughts.net/writing/decision-points-and-utility/</guid>
                <description>&lt;p&gt;I want to start getting up in the morning, rather then in the afternoon. It seems like a pretty clear choice:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Sleep in all morning and be grumpy&lt;&#x2F;li&gt;
&lt;li&gt;Get up early and be happy&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So afternoon-me makes a plan to get up early every morning, sets an alarm and calls it a day.&lt;&#x2F;p&gt;
&lt;p&gt;And that would be the end of it, except that when morning rolls around morning-me discovers a third option.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Sleep in all morning and be grumpy&lt;&#x2F;li&gt;
&lt;li&gt;Get up early and be happy&lt;&#x2F;li&gt;
&lt;li&gt;Sleep five more minutes, then get up early and be happy&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The best part about option 3 is that morning-me gets to choose it &lt;em&gt;every five minutes&lt;&#x2F;em&gt;. He never actually makes the decision to sleep in all morning. It just spontaneously coalesces in a totally blame-free fashion.&lt;&#x2F;p&gt;
&lt;p&gt;But afternoon-me is wily too, and has figured out a way to close this loophole by &lt;strong&gt;specifying a specific moment in time at which the decision has to be made&lt;&#x2F;strong&gt;. I set a particular song as the alarm and plan to get up on the first line of the first chorus.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Sleep in all morning and be grumpy&lt;&#x2F;li&gt;
&lt;li&gt;Get up early and be happy&lt;&#x2F;li&gt;
&lt;li&gt;Sleep five more minutes, feel a bit conflicted about not sticking to the plan, then get up early and be happy&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This actually works! Morning-me concedes and gets out of bed at the agreed point in time.&lt;&#x2F;p&gt;
&lt;p&gt;This is &lt;a href=&quot;https:&#x2F;&#x2F;chrisguillebeau.com&#x2F;how-to-be-decisive&#x2F;&quot;&gt;not&lt;&#x2F;a&gt; a &lt;a href=&quot;http:&#x2F;&#x2F;lesswrong.com&#x2F;lw&#x2F;o7c&#x2F;making_intentions_concrete_triggeraction_planning&#x2F;&quot;&gt;new idea&lt;&#x2F;a&gt; and I&#x27;m not writing a self-help article here. What I&#x27;m actually interested in talking about is this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Option 3 is a lie.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I have never, ever slept in for five minutes and then gotten up. I am well aware that this is a vanishingly unlikely possibility, at every time of day except for the five minutes after my alarm goes off. So the actual options are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Sleep in all morning and be grumpy&lt;&#x2F;li&gt;
&lt;li&gt;Get up early and be happy&lt;&#x2F;li&gt;
&lt;li&gt;Sleep in all morning but believe I&#x27;m going to get up early, because I&#x27;m either deliberately lying to myself or temporarily insane&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;All I&#x27;m doing by sharpening the decision point to a specific moment in time is penalizing option 3 to make it slightly less attractive.&lt;&#x2F;p&gt;
&lt;p&gt;Why is this interesting?&lt;&#x2F;p&gt;
&lt;p&gt;The dominant theory of decision making in behavioral economics is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Utility&quot;&gt;utility theory&lt;&#x2F;a&gt;, which basically asserts that we have some inner function that assigns utility to every future outcome and we pick the outcome that maximizes utility. Reversals of preferences are often explained by &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Temporal_discounting&quot;&gt;temporal discounting&lt;&#x2F;a&gt; - afternoon-me wants to get up early, but morning-me prefers the guaranteed reward of sleeping in now to the uncertain reward to getting up and feeling good about it ten minutes from now.&lt;&#x2F;p&gt;
&lt;p&gt;Even if we put aside the prospect of a temporal horizon so short that it won&#x27;t carry me down the stairs to breakfast, the only ways I see to explain my revealed preferences (sleep-but-pretend &amp;gt; get-up &amp;gt; sleep) with utility theory are to either assign utility to lying to myself or accept that my utility-predicting module is so detached from reality that it really believes I&#x27;m going to get up in five minutes.&lt;&#x2F;p&gt;
&lt;p&gt;Both explanations work - all the epicycles line up - but it seems to challenge the prospect of utility as a predictive theory. How do you predict the actions of a utility-maximizer that is allowed to invent impossible futures to justify its decisions?&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Monolog</title>
                <pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/monolog/</link>
                <guid>http%3A//scattered-thoughts.net/writing/monolog/</guid>
                <description>&lt;p&gt;Suppose I want to track how I spend my day. There are plenty of existing time-tracking apps, but none of them were invented here.&lt;&#x2F;p&gt;
&lt;p&gt;I could build an app from scratch. I would just need to write code for displaying entries, adding new entries, editing old entries, summarizing data, storing data, tracking changes...&lt;&#x2F;p&gt;
&lt;p&gt;Or I could just dump it in a spreadsheet, add a few formulas and call it a day.&lt;&#x2F;p&gt;
&lt;p&gt;This is the real magic of spreadsheets - there is a large class of problems where just pasting the data into an editable grid provides 90% of the necessary interactions, and adding a few formulae and charts handles the remaining 10%.&lt;&#x2F;p&gt;
&lt;p&gt;And having noticed that, you have to also wonder if there are other classes of problems where a similar 90%-done UI paradigm might exist.&lt;&#x2F;p&gt;
&lt;p&gt;As it turns out, putting my time-tracker in a spreadsheet doesn&#x27;t quite solve the problem, because the biggest problem I have with time-trackers is that I forget to use them. I want a time-tracker that can pop up a notification to ask me if I&#x27;ve really been writing a blog post for 27 hours or if I just forgot to check out.&lt;&#x2F;p&gt;
&lt;p&gt;The same goes for todo lists, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Experience_sampling_method&quot;&gt;experience samplers&lt;&#x2F;a&gt;, lab journals, quantified-self shenanigans etc. They all need to record when things happen and prompt actions from the user at specific times.&lt;&#x2F;p&gt;
&lt;p&gt;So I made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;monolog&quot;&gt;monolog&lt;&#x2F;a&gt;: a semi-successful experiment in making a 90%-done UI for journal-like problems.&lt;&#x2F;p&gt;
&lt;p&gt;The core data model is a log of timestamped plain-text entries.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog1.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The entries and the timestamp are both editable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog2.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Snippets of code can annotate entries with arbitrary html.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(when (= :todo (@todos (:ix message)))
  [:button {:style {:margin &amp;quot;0px 5px 0px 5px&amp;quot;
                    :padding &amp;quot;0px 10px 0px 10px&amp;quot;}
            :on-click #(log! {:contents (.replace (:contents message) &amp;quot;#todo&amp;quot; &amp;quot;#task&amp;quot;)})}
   &amp;quot;↻&amp;quot;])
(when (= :todo (@todos (:ix message)))
  [:button {:style {:margin &amp;quot;0px 5px 0px 5px&amp;quot;
                    :padding &amp;quot;0px 10px 0px 10px&amp;quot;}
          :on-click #(log! {:contents (str &amp;quot;#done #&amp;quot; (:ix message))})}
   &amp;quot;✓&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog3.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clicking on the tick button marks the todo as done.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog4.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Clicking on the refresh button turns the todo into a current task.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog5.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Other code snippets can annotate the entries with interpretations of their contents, such as parsing durations and times.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(doseq [message messages
        :when (nil? (@natty message))]
  (xhrio&#x2F;send &amp;quot;&#x2F;natty&amp;quot;
              #(swap! natty assoc message (read-string (-&amp;gt; % .-target .getResponseText)))
              &amp;quot;POST&amp;quot;
              (pr-str {:message message})
              (structs&#x2F;Map. #js {:Content-Type &amp;quot;application&#x2F;edn&amp;quot;})))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog6.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And another snippet uses the estimated durations of tasks to decide when to nudge the user about overrunning.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(when-let [last-task (first (for [task (reverse @tasks)
                                  :when task]
                              task))]
  (when (&amp;gt; (:duration last-task) (:estimate last-task))
    [nudge-ui (str &amp;quot;Your last &amp;quot; (-&amp;gt; last-task :kind name) &amp;quot; is at &amp;quot; (:duration last-task) &amp;quot; &#x2F; &amp;quot; (:estimate last-task) &amp;quot; mins! What are you up to?&amp;quot;) &amp;quot;#task &amp;quot;]))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog7.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The nudge can be cleared by adding a new task or break.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog8.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Nudges also work for experience sampling. Clicking on this experience sampling nudge partially fills out a new log entry.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(let [last-sample (first (for [sample (reverse @samples)
                               :when sample]
                           sample))]
  (when (or (nil? last-sample) (&amp;gt; @now (:next-sample last-sample)))
    [nudge-ui (str &amp;quot;It&amp;#39;s sampling time!&amp;quot;) (str &amp;quot;#sample  (next sample &amp;quot; (time-&amp;gt;string (js&#x2F;Date. (+ (.getTime @now) (* (js&#x2F;Math.random) 1000 60 60 8)))) &amp;quot;)&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog9.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Finally, filters can produce task-specific views of the log, like uncompleted todos or chargeable hours.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(def filters
  {:all #(do true)
   :todo #(= :todo (@todos (:ix %)))
   :projectx #(contains (:contents %) &amp;quot;#projectx&amp;quot;)})
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(when (= :projectx @current-filter)
  [:div {:style {:font-weight &amp;quot;bold&amp;quot;
                  :text-align &amp;quot;center&amp;quot;
                  :flex 1}}
   (format &amp;quot;%.0f hours - £%.2f&amp;quot; (&#x2F; @projectx-minutes 60) (* (&#x2F; @projectx-minutes 60 6) 400))])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog10.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;monolog12.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s ~200 loc for the base functionality plus ~200 loc for a time tracker, todo list, experience sampler and even a little repl. Since the only mutable state is the log and it&#x27;s only mutated by direct user actions, I can safely use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bhauman&#x2F;lein-figwheel&quot;&gt;figwheel&lt;&#x2F;a&gt; to live-update the app whenever I hit save in the code. Adding new apps usually only takes a couple of minutes from idea to live implementation.&lt;&#x2F;p&gt;
&lt;p&gt;To be really useful though it needs to be a mobile app, and I never got around to figuring out to get the same live-coding experience that I get as a locally-served figwheel app. If I have to plug my phone in and run some build and deploy step it defeats a lot of the quick-and-hacky magic that I was aiming for. I&#x27;m sure it&#x27;s doable though - maybe someone can suggest a nice approach?&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I posted this mainly to illustrate this idea of a 90%-done UI and hopefully to prompt people to look at other classes of problems that might have good solutions. &lt;a href=&quot;http:&#x2F;&#x2F;people.csail.mit.edu&#x2F;ebakke&#x2F;sieuferd&#x2F;index.html&quot;&gt;SIEUFERD&lt;&#x2F;a&gt; is trying to do this for CRUD apps. &lt;a href=&quot;https:&#x2F;&#x2F;camlistore.org&#x2F;&quot;&gt;Camlistore&lt;&#x2F;a&gt; and co seem to want to do the same for unstructured data, but they don&#x27;t provide much in the way of interaction. What else is out there?&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Quick and dirty review of Psychology of Programming Interest Group 1989-2015</title>
                <pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/qnd-review-of-ppig-1989-2015/</link>
                <guid>http%3A//scattered-thoughts.net/writing/qnd-review-of-ppig-1989-2015/</guid>
                <description>&lt;p&gt;Inspired by Ji Yi&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;yijisoo&#x2F;qndreview-read-100-chi-papers-in-7-hours&quot;&gt;homework assignment&lt;&#x2F;a&gt;, I decided to skim all 360-odd papers in the Psychology of Programming Interest Group &lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;library&#x2F;paper&quot;&gt;archives&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Yi reports his students taking ~10 hours to skim 100 papers over a single weekend. His students are clearly way more disciplined than I am. I dragged it out for months. It was brutal.&lt;&#x2F;p&gt;
&lt;p&gt;Towards the end I did finally get up to about 50 papers a day, so if I do this again for other journals I&#x27;ll probably just take a random sample of 50 papers and try to do the whole lot in one go.&lt;&#x2F;p&gt;
&lt;p&gt;What did I learn?&lt;&#x2F;p&gt;
&lt;p&gt;Not a great deal about the psychology of programming itself. For the most part the field doesn&#x27;t feel like a stumbling progression towards enlightenment, but just plain stumbling.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some common failure modes that frustrated me:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plain bad science, especially in the early years where a lot of the experiments are &#x27;my pet project vs the world&#x27; and somehow the pet project always comes out looking good. My favorite example has a graph where &lt;a href=&quot;&#x2F;img&#x2F;control.png&quot;&gt;the control group are clearly performing better&lt;&#x2F;a&gt;, and the author explains this away, saying it&#x27;s because the control group were cheating, and in the conclusion of the paper declares the treatment a success. And it was published!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Failing to validate instruments. In particular, a lot of papers that involve coding qualitative data didn&#x27;t bother to have two people code the data independently to check for agreement.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&#x27;We have to do some science, and this is science&#x27;. Many of the experiments are from the start clearly incapable of answering the original question. I realize that getting good data for these subjects is hard, but the opportunity cost still stings. Do a different experiment!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Theoryless science. For example, one paper had programmers read programs under an eye-tracker and found there was a significant difference in the gaze patterns between the more experienced group and the less experienced group. So what? There&#x27;s no suggestions as to what it means or how it can be used or under what conditions it&#x27;s expected to be replicable. These papers typically end with &amp;quot;further research is required&amp;quot; and then no further research materializes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The last point is often detectable right at the beginning. If I read the description of the experiment and I can&#x27;t even make up an interesting result, that&#x27;s not a good sign.&lt;&#x2F;p&gt;
&lt;p&gt;There were also a lot of papers that read like &amp;quot;I found this in a book, we should apply it to programming&amp;quot;. I don&#x27;t know if it&#x27;s fair to call that a failure mode, but I rarely found anything enlightening in these and most of them were not followed up with papers where they actually apply the idea.&lt;&#x2F;p&gt;
&lt;p&gt;On the positive side:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are a ton of negative results. PPIG seems to be totally willing to publish failed experiments, which is awesome.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Things get better over time. Somewhere around the mid-2010s I started finding papers that actually seemed like results. The series of papers on testing whether students form consistent models is a particular highlight - it starts with an interesting correlation, then some failed replications, then refinements of the test, then some successful replications, then more refinements, then combining it with interviews to test validity. It&#x27;s not sexy, but it does seem to be actual progress towards a reliable measure of one specific leak in the education pipeline.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I have a sort of vague idea that most of this work is just attacking things at too high a level. Programming is a big, diverse, complex skill and we don&#x27;t really understand really basic subskills yet, or even know how to break it down into subskills. Without that it&#x27;s impossible to know whether it makes sense to extrapolate any one set of results. If barely trained students benefit from syntax highlighting, does that mean professional programmers will? Or programmers in other languages? Or programmers dealing with programs longer than 50 lines? We have no idea.&lt;&#x2F;p&gt;
&lt;p&gt;Much of this reminds me of &lt;a href=&quot;http:&#x2F;&#x2F;calteches.library.caltech.edu&#x2F;51&#x2F;2&#x2F;CargoCult.htm&quot;&gt;Feynman&#x27;s stories about rat experiments&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;...his papers are not referred to, because he didn’t discover anything about the rats. In fact, he discovered all the things you have to do to discover something about rats.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;What are the things we have to discover before we can discover things about programming? I have no idea.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, here are the full notes. They&#x27;re highly opinionated and I made no attempt to be fair to the authors. If I said something mean about your research, don&#x27;t worry - I barely read it anyway :)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1989&quot;&gt;1989&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;1990&quot;&gt;1990&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1990-PPIG-2nd-Segal_0.pdf&quot;&gt;Using Systematic Errors to Investigate the Developing Knowledge of Programming Language Learners&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two year programming class. 100 engineers. Errors in semicolon use concentrated on specific contexts, even though students have learned explicit syntax rules. Later errors become uniformly distributed ie attention lapses rather than misunderstanding.&lt;&#x2F;p&gt;
&lt;p&gt;Students don&#x27;t learn syntax from specification of syntax - need contextualized experience. Parallel to natural language learning.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1990-PPIG-2nd-Visser_0.pdf&quot;&gt;Opportunistic Planning in the Specification Stage of Design&lt;&#x2F;a&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;hal.archives-ouvertes.fr&#x2F;inria-00633544&#x2F;document&quot;&gt;full paper&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;Single engineer observed writing spec in the wild for three weeks. Claimed to be following hierarchical plan but was observed deviating opportunistically.&lt;&#x2F;p&gt;
&lt;p&gt;Tools should allow interrupting planning of one component to jump to another.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1990-PPIG-2nd-Detienne_1.pdf&quot;&gt;Empirical Study of Design in an Object-Oriented Environment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;8 experienced programmers - 4 OOP beginners, 4 OOP experienced. Up to one day to solve two problems. Observed heavy resuse of solutions&#x2F;schemas once discovered.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1991&quot;&gt;1991&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;1992&quot;&gt;1992&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Zarmer_0.pdf&quot;&gt;ACE - An Application Construction Environment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Framework for building end-user programming environments. Aims for progressive specialization where programmers hand-off partially finished environments to end-users. No study on actual users.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Bell-NC_0.pdf&quot;&gt;Addressing the psychology of programming in programming language design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Judge programming language by breaking writing down into steps, and look at how much knowledge required to choose between options at each step. Novel language, observe four paper writers working through problems. Example of a macro feature where the correct choice is not clear.&lt;&#x2F;p&gt;
&lt;p&gt;Provides a method for evaluating how natural&#x2F;obvious a given language or feature is.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Scholtz_0.pdf&quot;&gt;An analysis of novice programmers learning a second language&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Studies transfer of &#x27;plans&#x27; learned in Pascal to Ada or Icon. 13 students with Pascal experience. 3 work in Pascal, 5 in Ada, 5 in Icon. Observed, broken into episodes, episodes classified by consensus.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Dawson_0.pdf&quot;&gt;GPT&#x27;s preparation of students for programming in the real world&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two week industrial course for new graduate hires. Subjects forced to work only in company hours - no last-minute rush - teaches important of planning&#x2F;scheduling. Role-play vague and unhelpful customer. Uni courses have to be fair =&amp;gt; perfect environment - better learning from realistic disruptions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Hook_0.pdf&quot;&gt;Possible extensions to the Byrd Box tracer aimed at experts&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes study of how expert Prolog programmers use tracer. Didn&#x27;t actually perform study.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-OShea_0.pdf&quot;&gt;Programming in the Real World: Computer Science students&#x27; perceptions of the values and difficulties of learning formal methods&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;2nd and 3rd year students. 51 returned questionnaire and some were interviewed? Focused on four courses that use formal methods.&lt;&#x2F;p&gt;
&lt;p&gt;Students struggle to manipulate formal expressions by hand. Need automated tools. Only realized relevance of early course much later, when it was too late. Don&#x27;t believe that formal methods are used &#x27;in the real world&#x27;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Davies_0.pdf&quot;&gt;Restricting manipulations within a device space: Effects upon strategy, errors and display-based problem solving&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Do expert programmers develop better working memory, or do they learn to use external memory more effectively? Notice that experts jump around more often, while beginners tend towards linear program generation.&lt;&#x2F;p&gt;
&lt;p&gt;10 professionals. 12 2nd year undergrads.&lt;&#x2F;p&gt;
&lt;p&gt;Experiment 1. Have to program while speaking strings of digits - strains working memory. Expert performance did not suffer. Novices have more errors under suppression, and jump around code more often.&lt;&#x2F;p&gt;
&lt;p&gt;Experiment 2. Write a program using a program that doesn&#x27;t allow lines to be edited after hitting enter. Experts produce more errors than novices in this environment.&lt;&#x2F;p&gt;
&lt;p&gt;Suggests that experts don&#x27;t develop more working memory, but instead switch to strategies that use external memory more.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Ramadhan_0.pdf&quot;&gt;Some thoughts on designing an intelligent system for discovery programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Plan for a dynamic visualization of code execution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Stone_0.pdf&quot;&gt;Teaching formal software engineering at Loughborough&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Incoherent.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Patel-NC_0.pdf&quot;&gt;Text vs graphics in Prolog tracers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;13 subjects solve problems using one of three tracers. No clear differences noted.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Humphreys_0.pdf&quot;&gt;The Design and Application of Visually-Oriented Tools for the Use During Software Development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Seems to be research proposal, not a paper.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;wrap.warwick.ac.uk&#x2F;60896&#x2F;6&#x2F;WRAP_cs-rr-207.pdf&quot;&gt;The interpretation of states: a new foundation for computation?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes a model of computation based on agents which make discrete observations of state?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1992-PPIG-4th-Holland_0.pdf&quot;&gt;Visual programming &amp;amp; visualisation of program execution in Prolog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Graphical version of prolog. Slides only.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1993&quot;&gt;1993&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;1994&quot;&gt;1994&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1994-PPIG-6th-Brayshaw_0.pdf&quot;&gt;An Experimental Evaluation of Different Proposals for Teaching Prolog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two axes. #1 whether common patterns are taught. #2 whether explicit mappings are given between example and exercises. Shipped experiment as free online class. No results yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1994-PPIG-6th-Waterson_0.pdf&quot;&gt;Cognitive and Organisational Issues in Programming in the Large: Preliminary Findings from a Case Study&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Case study in UK bank. Large team. Interviews and questionnaire. Early results only. Nothing notable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1994-PPIG-6th-Beynon_0.pdf&quot;&gt;Computer Programming for Noughts and Crosses: New Frontiers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Agent-based model of programming for OXO games. No experimental results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1994-PPIG-6th-Bielaczyc_0.pdf&quot;&gt;Learning Computer Programming: The Effects of Collaborative Explanations and Metacognition on Skill Acquisition&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Self-paced LISP course. 25 students, no programming experience. Taped sessions and students think aloud. Analyses student explanations.&lt;&#x2F;p&gt;
&lt;p&gt;Better-performing students made more complex and more connected explanations of LISP concepts, and asked more questions of other students. No data or statistics given.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1994-PPIG-6th-Borne_0.pdf&quot;&gt;Moilère: A Visual Programming Environment Based on a Theatre Metaphor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Visual OOP env built on smalltalk. Based around theatre metaphor. Abstract only.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1994-PPIG-6th-Booth_0.pdf&quot;&gt;Towards an Experiential Description of Programming and Learning to Program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;14 students x 6 interviews. Self-reported experience of programming. No results.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1995&quot;&gt;1995&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Ford_0.pdf&quot;&gt;A model of programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Studies of visual programming useless because they focus on toy problems. Personal model of how OOP programming works.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Carswell_0.pdf&quot;&gt;A pilot study on novice Pascal programmers on vocational courses in further education in Northern Ireland&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Questionnaire to explore connection between programming ability and math ability. No results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Siddiqi_0.pdf&quot;&gt;An investigation into strategies employed in solving a programming task using Prolog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;32 2nd year undergrads. Experience with procedural programming. Asked to solve problem in Prolog.&lt;&#x2F;p&gt;
&lt;p&gt;Two different strategies observed. Both were procedural.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Petre_0.pdf&quot;&gt;Comparing program comprehension in different cultures and different representations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;R-technology - visual control flow developed in Soviet Union. 24 professional R-tech programmers. Comprehension test for two 150loc programs. Then asked to write a program in either C or R-tech.&lt;&#x2F;p&gt;
&lt;p&gt;No results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Ormerod_0.pdf&quot;&gt;Control strategies used by expert program designers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wrong link.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Johnson_0.pdf&quot;&gt;Courseware design support&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Case library tool for existing courseware design suite. Designed by observing users on mockups. Tool was not effective.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Good_0.pdf&quot;&gt;Do diagrams make us smart(ER)?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Study how multiple representations of logic helps. No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Rouet_0.pdf&quot;&gt;Documentation skills in novice and expert programmers: an empirical comparison&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;20 novice students. 7 faculty members. Add comments to ADA program.&lt;&#x2F;p&gt;
&lt;p&gt;Falsified hypothesis that experts would produce semantic comments and beginners would produce paraphrases of code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Reiser_0.pdf&quot;&gt;Facilitating the acquisition of mental models of programming with GIL: an integrated planning and debugging learning environment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Graphical version of LISP supporting execution of partial programs. No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Burnett_0.pdf&quot;&gt;Forms&#x2F;3, a declarative graphical language&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Sonnenwald_0.pdf&quot;&gt;Knowledge exploration in design: communicating across boundaries&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Case studies of multi-disciplinary design problems. Unclear results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Gilmore_0.pdf&quot;&gt;Learning graphical programming: an evaluation of KidSim&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Kids programming environment. 56 children, 10-13yo. Varied problems, class schedule and instruction.&lt;&#x2F;p&gt;
&lt;p&gt;Clear enjoyment, but no good evidence of transferable learning.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Scott_0.pdf&quot;&gt;MADLab: masking and multiple bug diagnosis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Toolkit for studying debugging of programs with multiple bugs. Little information.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Hillegersberg_0.pdf&quot;&gt;Maintenance of object-oriented systems: an empirical analysis of the performance and strategies of programmers new to object-oriented techniques&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;14 grad students. Experienced in structured programming, 6 months experience with OO. Procedural and OO program with identical spec. Asked to make changes.&lt;&#x2F;p&gt;
&lt;p&gt;Worse performance on 4&#x2F;6 tasks for the OO group.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Canas_0.pdf&quot;&gt;Mental representation and computer use&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Mulholland_0.pdf&quot;&gt;Prolog without tears: an evaluation of the effectiveness of a non Byrd Box model for students&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;New Prolog tracer based on different mental model of evaluation. 48 cogsci students. Given printed program, worked through modified versions in one of three tracers and asked to identify differences.&lt;&#x2F;p&gt;
&lt;p&gt;Exposure to language predicts success more than exposure to tracer tool. Students were more successful with Plater tracer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Budgen_0.pdf&quot;&gt;Software Design using GOOSE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Dev environment based on observing what programmers actually do, rather than what models prescribe.&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Ormerod_1.pdf&quot;&gt;The evaluation of TED, a techniques editor for Prolog programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;32 students. 10 week course. Standardized teaching methodology. Group 1 got standard course. Group 2 got standard course with different method of teaching recursion. Group 3 got same course as 2 but also used the TED editor.&lt;&#x2F;p&gt;
&lt;p&gt;Group 3 made less mistakes overall. Mixed results for different problems. TED editor not described.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Saariluoma_0.pdf&quot;&gt;Transforming verbal descriptions into mathematical formulas in spreadsheet calculation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Argues that this process goes through an intermediate imagery step.&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Visser_0.pdf&quot;&gt;Using episodic knowledge in design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1995-PPIG-7th-Domingue_0.pdf&quot;&gt;Validating knowledge based systems with software visualization technology&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1996&quot;&gt;1996&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;1997&quot;&gt;1997&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;1998&quot;&gt;1998&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1998-PPIG-10th-benari_0.pdf&quot;&gt;The Software Factory&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sarcastic faux history.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1998-PPIG-10th-retowsky_0.pdf&quot;&gt;Software reuse from an external memory: the cognitve issues of support tools&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Examines process of finding software to reuse. No data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1999&quot;&gt;1999&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Skipping the doctoral consortium - no bodies.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-jackson.pdf&quot;&gt;The need for computer scientists to receive training on people skills&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two environments experienced by the authors where people skills were lacking.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-douce.pdf&quot;&gt;Spatial measures of software complexity&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes metrics on callable-from graph. No evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-iliadis.pdf&quot;&gt;Representation and structure in the re-use of design rationale by novice analysts&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;18 1st year undergrads. Graphical vs tabular vs narrative representation of design rationale. Options-based vs criteria-based (unclear on meaning).&lt;&#x2F;p&gt;
&lt;p&gt;Narrative format had slower response times, fewer correct answers. Graphical and tabular were matched. Criteria-based had similar times to option-based but more correct answers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-mulholland.pdf&quot;&gt;Programming with a purpose: Hank, gardening and schema theory&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Visual language for cognitive modeling. Focus is not on building models but on understanding them. Used for student project. Questionnaire at end of course, qualitative analysis.&lt;&#x2F;p&gt;
&lt;p&gt;Students liked having no textual syntax. Found it easier to understand Hank models than Prolog models. Able to understand each others programs. Could understand execution process. Hank was useable with pen and paper.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-navarro.pdf&quot;&gt;Mental representation and imagery in program comprehension&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;32 c programmers. 32 spreadsheet programmers. Checking whether programmers build mental models based on control flow or data flow. Used recognition task with priming to see whether recognition is improved by primes nearby in control flow or nearby in data flow. Not clear what language the test program was in or how distance is judged in each model.&lt;&#x2F;p&gt;
&lt;p&gt;Interpretation of results is not clear to me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-blackwell_0.pdf&quot;&gt;Investment of attention as an analytic approach to cognitive dimensions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Considering user action in terms of choosing where to invest limited resource of attention eg spend attention looking up api call vs just hope that memory is correct.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-good.pdf&quot;&gt;Getting a GRiP on the comprehension of data-flow visual programming languages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Investigating visual programming languages for novices.&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-romero.pdf&quot;&gt;Focal structures in Prolog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Program comprehension in Prolog. 10 experts, 10 novices, 10 non-programmers. Asked to read program, reconstruct from memory and then explain purpose. Programs are very short.&lt;&#x2F;p&gt;
&lt;p&gt;Considered 4 different ways of choosing key points of program. Only way for which difference in recall was significant was &#x27;schemas&#x27; - common patterns of computation in prolog eg build list and then aggregate.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-collins_0.pdf&quot;&gt;Evaluating Hank&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Describing future studies proposed for Hank. No results yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-birch_0.pdf&quot;&gt;EPSRC and support for the psychology of programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Something about funding decisions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-harrop.pdf&quot;&gt;ENCAL: a prototype computer-based learning environment for teaching calculator representations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Piaget-ian construction of mental imagery. Traditional calculators and algebra notation don&#x27;t provide mapping to any concrete imagery, so children struggle to map classroom math to their own experiences. Proposes a computer environment with multiple representations, at different levels of abstraction, running simultaneously.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-kadoda.pdf&quot;&gt;Desirable features of educational theorem provers - a cognitive dimensions viewpoint&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Questionnaire on usability of theorem provers. Subjects complained about vague and sometimes inapplicable questions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-aczel_0.pdf&quot;&gt;Computer science undergraduates learning logic using a proof editor: work in progress&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;170 1st year students in logic course. Post-course questionnaire.&lt;&#x2F;p&gt;
&lt;p&gt;Students preferred to memorize rules rather than practice with Jape. No other results yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;1999-PPIG-11th-benari_0.pdf&quot;&gt;Bricolage Forever!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;10 science teachers. Five problems in Word, where knowledge of underlying implementation would allow easy solution.&lt;&#x2F;p&gt;
&lt;p&gt;Most subjects resorted to trial and error, and out-loud gave incorrect explanations of underlying mechanics. No attempts to falsify their models.&lt;&#x2F;p&gt;
&lt;p&gt;Proposes that experiments in programming would produce similar results.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2000&quot;&gt;2000&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-tukiainen.pdf&quot;&gt;Uncovering effects of programming paradigms: Errors in two spreadsheet systems&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Want to see if changing naming scheme in spreadsheets from individual cells to named blocks of cells changes the kinds of errors that users make. 154 1st year undergrads, various subjects. Four different spreadsheet tasks, given in various orders. Compared Excel vs Basset (home-grown system). Errors are categorised by author.&lt;&#x2F;p&gt;
&lt;p&gt;Lower number of errors for some tasks, higher for others. No clear numbers for categories.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-thomas.pdf&quot;&gt;Tools for observing study behaviour&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tool for recording student interactions with a Smalltalk environment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-pane.pdf&quot;&gt;The influence of the psychology of programming on a language design: Project status report&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Developed a language based on review of past psychology of programming results. Experimented with different forumulations of boolean queries. Found confusion over &#x27;AND&#x27;, precedence&#x2F;grouping and users totally ignoring parens.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-mciver.pdf&quot;&gt;The effect of programming language on error rates of novice programmers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;GRAIL vs LOGO. 26 1st year undergrads, no experience. Similar exercises for both groups, but not identical.&lt;&#x2F;p&gt;
&lt;p&gt;Fewer errors for GRAIL. Difference larger for syntax errors than for logic errors. Presumably graded by author.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-bilotta.pdf&quot;&gt;Some problems of programming in robotics&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Theorising about how to teach robotics to children.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-gabriele.pdf&quot;&gt;Programmer education in Arts and Humanities course degree&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Questionnaire given to 14 students. Self-reported background &#x2F; computer use. Programming quiz.&lt;&#x2F;p&gt;
&lt;p&gt;Structured interview given to ? students assessing learning style, development process.&lt;&#x2F;p&gt;
&lt;p&gt;Concludes that sample is too small to say anything of interest.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-dastous.pdf&quot;&gt;On the use of functional and interactional approaches for the analysis of technical review meetings&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Transcribed 7 design meetings. Cut up into speech acts, classified according to coding scheme developed &lt;em&gt;during analysis&lt;&#x2F;em&gt;. Classifies into 5 kinds of exchanges, using unclear methodology.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-yang.pdf&quot;&gt;How do people check polymorphic types?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Questions: 34 what is the type of this, 34 why is this an error. 6 subjects, all of whom at least post-grad. Video categorised by the methods subjects used to answer, unclear methodology.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-lattu.pdf&quot;&gt;How a visualization tool can be used: Evaluating a tool in a research &amp;amp; development project&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Jeliot - animations for understanding algorithms.&lt;&#x2F;p&gt;
&lt;p&gt;Programming intro w&#x2F; 564 undergrads, didn&#x27;t regularly use Jeliot. Short programming course w&#x2F; 37 high school students, course based around Jeliot. Semi-structured interviews for small numbers of students in each group, not explained how they were selected.&lt;&#x2F;p&gt;
&lt;p&gt;Rejected by group 1 lecturer because of library issues. Students found UI confusing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-marshall.pdf&quot;&gt;Gotos Considered Harmful and Other Programmers&#x27; Taboos&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Discusses how taboos spread socially. Argues that all the notable taboos are about crossing abstraction boundaries.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-davies.pdf&quot;&gt;Expertise and the comprehension of object-oriented programs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;16 novices. 16 experts. Showed a program for 2 or 10 seconds. Asked 5 comprehension questions. Experts perform better in both 2s and 10s cases. Data- and control- flow questions benefit from 10s more than function, operation and state questions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-george.pdf&quot;&gt;Experiences with novices: The importance of graphical representations in supporting mental mode&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Trying to teach beginners the mental representation of recursion used by experts.&lt;&#x2F;p&gt;
&lt;p&gt;49 students taught to use a diagrammatic representation of recursive programs. Test mental model by giving a list of possible solutions and asking which ones work correctly. Students who were tested with diagrams made fewer errors than students who tested with diagrams ie model was learned but failed to transfer to normal code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-kutar.pdf&quot;&gt;Cognitive Dimensions: An experience report&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Design of real-time temporal logic language using cognitive dimensions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-cox.pdf&quot;&gt;Cognitive Dimensions of Use Cases: Feedback from a student questionnaire&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Questionnaire on UML use cases, covering cognitive dimensions. 14 students.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-chattratichart.pdf&quot;&gt;An assessment of visual representations for the &#x27;flow of control&#x27;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Testing whether to use arrows, lines or juxtaposition for control flow. 84 students. Given maze in each style and have to follow paths. Measured response time. Arrows were fastest and most accurate.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-holmboe.pdf&quot;&gt;A framework for knowledge: Analysing high school students&#x27; understanding of data modelling&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;How well are mental representations transmitted to students via verbal discussions? 3x groups of 7-9 high school students, oral interview + written questionnaire, questions on syllabus material.&lt;&#x2F;p&gt;
&lt;p&gt;High school students suck at definitions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-kadoda.pdf&quot;&gt;A Cognitive Dimensions view of the differences between designers and users of theorem proving assistants&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Questionnaire sent to users and designers of a prover assistant. Answers on numerical scale. Minor differences in responses between the two groups.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2000-PPIG-12th-blackwell.pdf&quot;&gt;A Cognitive Dimensions questionnaire optimised for users&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Generalised CD questionnaire. Tested on users of various systems. Not clear whether this is useful.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2001&quot;&gt;2001&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-snook.pdf&quot;&gt;Using a Graphical Design Tool for Formal Specification&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Adapt UML for formal specs. No evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-khazaei.pdf&quot;&gt;The Usability of Formal Specification Representations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;51 students, 4 questions, each a choice of two implementations of simple problem. After four weeks of Z classes, given same set of questions described in Z.&lt;&#x2F;p&gt;
&lt;p&gt;Claims strong shift in approach, but just eyeballing the numbers doesn&#x27;t look like much.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-stone.pdf&quot;&gt;The Science of Web-Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Functional programming in templates. Maybe misunderstood, but seems incredibly trivial.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-diaper.pdf&quot;&gt;The Model Matters: Constructing and Reasoning with Heterarchical Structural Models&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Compares 4 formal modeling methods. Evaluated directly by authors on a single example. Prefer tables over trees.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-paine.pdf&quot;&gt;The Coach - Supporting students in the area of error reports&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Smalltalk env. Made a &#x27;coach&#x27; with list of recent actions and error messages. No evaluation yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-hazzan.pdf&quot;&gt;The Application of reflective Practitioner to Software Engineering&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Advocates for using this practice. Not totally clear on process or goal, but seems related to the problem of not begin able to teach implicit knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-hause.pdf&quot;&gt;Team Performance Factors in Distributed Collaborative Software Development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Comparing two teams of students, high vs low performance. Coded email and irc histories.&lt;&#x2F;p&gt;
&lt;p&gt;Concludes that communication is important.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-chattratichart.pdf&quot;&gt;Some Evidence for Graphical Readership, Paradigm Preference, and the Match-Mismatch Conjecture in Graphical Programs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Experiments with graphical languages.&lt;&#x2F;p&gt;
&lt;p&gt;Different graphical layouts for programs. 21 students tested on comprehension of graphical vs textual. 60 students tested on comprehension of different graphical layouts. No main effect in either.&lt;&#x2F;p&gt;
&lt;p&gt;Additional cognitive skills test, no correlation with main experiment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-yeshno.pdf&quot;&gt;Salvation for Bricoleurs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Switching between RLT and LTR writing in Word is confusing. Gave students an explicit conceptual model.&lt;&#x2F;p&gt;
&lt;p&gt;Control group exam was under different conditions. Used to explain their better performance.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-holmboe.pdf&quot;&gt;Research Agenda for Computer Science Education&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Argues for more empirical research in CSE.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-logan.pdf&quot;&gt;Observations of student working practices in an online distance education learning environment in relation to time&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Patterns in working hours for remote learners in an OU course.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-patil.pdf&quot;&gt;Native-End User Languages: A Design Framework&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Plans for end-user programming in languages other than English.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-douce.pdf&quot;&gt;Long Term Comprehension of Software Systems: A Methodology for Study&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;there is little in a way of a conclusion, other than the common oft repeated call of, ‘we
need to do more research in this area&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-yang.pdf&quot;&gt;Human and &amp;quot;human-like&amp;quot; type explanations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Comparing human approach to explaining type errors to approach of authors&#x27; new type-checker. Coded by author, without explanation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-tukiainen.pdf&quot;&gt;Evaluation of the Cognitive Dimensions Questionnaire and Some Thoughts about the Cognitive Dimensions of Spreadsheet Calculation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Gave (translation of) general CD questionnaire to 10 spreadsheet users.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-clarke.pdf&quot;&gt;Evaluating a new programming language&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CD questionnaire to evaluate new language, given to 5 professional programmers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-blackwell.pdf&quot;&gt;Designing a Programming Language for Home Automation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Media Cubes. Physical cubes that correspond to (dataflow?) operators. Placed together to create program. Provides direct referencing eg place cube on tv to reference tv.&lt;&#x2F;p&gt;
&lt;p&gt;Iota.HAN. ML &#x2F; Pi-calc based language.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-britton.pdf&quot;&gt;Cognitive Dimensions Profiles: A Cautionary Tale&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ignoring some cognitive dimensions in analysis can lead to missing effects on those dimensions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-obrien.pdf&quot;&gt;An Open-Source Analysis Schema for Identifying Software Comprehension Processes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Protocol for analyzing spoken transcripts to determine whether programmers are understanding a given program by comparing against preexisting domain knowledge or by recognizing patterns of code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-gittins.pdf&quot;&gt;A Study of Human Solutions in eXtreme Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mostly XP advocacy. Little in the way of actual numbers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-berglund.pdf&quot;&gt;A phenomenographic view on the socio-cultural activity theory in research concerning university students&#x27; learning of computer science in an internationally distributed environment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Planned data collection from student projects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2001-PPIG-13th-levy.pdf&quot;&gt;&amp;quot;It&#x27;s just like the whole picture, but smaller&amp;quot;: Expressions of gradualism, self-similarity, and other pre-conceptions while classifying recursive phenomena&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Studying language high-school students use.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2002&quot;&gt;2002&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-Sodan-Capretz-mbti.pdf&quot;&gt;Shared Data or Message-Passing - A Human Factor in Technical Choices?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;How do people choose between the two? Give parallel programming problems to students along with Myers-Brigg test.&lt;&#x2F;p&gt;
&lt;p&gt;Hugely forking paths. Only 0-3 students per MBTI &#x2F; shared-mv-messaging intersection.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-blackwell.pdf&quot;&gt;What is Programming?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Trying to define programming in light of rising end-users.&lt;&#x2F;p&gt;
&lt;p&gt;Ideas on difficulties - loss of direct manipulation, use of notation, abstraction.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-sajaniemi.pdf&quot;&gt;Visualizing Roles of Variables to Novice Programmers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Break variables into different types - constant, counter, control etc. Apply different graphics when visualizing program.&lt;&#x2F;p&gt;
&lt;p&gt;No evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-crosby.pdf&quot;&gt;The Roles Beacons Play in Comprehension for Novice and Expert Programmers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;45 students. Given single line, judge how likely it is to have come from a binary search. Ratings(?) influenced by expertise.&lt;&#x2F;p&gt;
&lt;p&gt;30 students. Given single line, map it to one of three algorithms. Unclear results.&lt;&#x2F;p&gt;
&lt;p&gt;19 students. Shown algorithm and asked to comprehend&#x2F;memorize (under eyetracker). Then given comprehension test. Divide sections of code into categories, normalize time in each category by screen area. Experienced group focused more on &#x27;complex&#x27; category.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-marshall.pdf&quot;&gt;The Misplaced Comma: Programmers&#x27; Tales and Traditions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Speculation on programmer folklore.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-lynch.pdf&quot;&gt;Softening the Complexity of Intelligent Systems Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Students struggle surprisingly with symbolic systems. May be caused by overhead of manipulating data-structures. Suggest pattern-matching support in language to help.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-holmboe.pdf&quot;&gt;Revitalising Old Thoughts: Class diagrams in Light of the Early Wittgenstein&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-tukiainen.pdf&quot;&gt;Programming Aptitude Testing as a Prediction of Learning to Program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;33 students. No significant correlation between VB course final exam grade and high-school grades or SAT grades. Huoman programming aptitude test explains 25% of final grade.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-fincher.pdf&quot;&gt;Patterns for HCI and Cognitive Dimensions: Two Halves of the Same Story?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;HCI researcher compares pattern languages to cognitive dimensions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-mostrom.pdf&quot;&gt;On Concurrency in Educational Software Authoring Systems&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Educators given animations of systems and asked to describe how they work.&lt;&#x2F;p&gt;
&lt;p&gt;No coding or statistical analysis.&lt;&#x2F;p&gt;
&lt;p&gt;Inexperienced subjects tended to describe each entity until influenced by external event. Suggests describing systems in terms of individual behaviors and cross-entity conditions for behavior change.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-hales_0.pdf&quot;&gt;Modelling Software Organisations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes agent-based modeling of software organizations.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-dunican.pdf&quot;&gt;Making the Analogy: Alternative Delivery Techniques for First Year Programming Courses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anecdotal reports from lecturer of first-year programming course.&lt;&#x2F;p&gt;
&lt;p&gt;3 main problems. Students have no prior exposure to computational thinking, or even basic logic. No familiar experience to compare most programming concepts to. Unused to rigid syntax rules.&lt;&#x2F;p&gt;
&lt;p&gt;Suggests several analogies for use in teaching.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-logan.pdf&quot;&gt;Learning Styles in Distance Education Students Learning to Program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Distance learning students. Given questionnaire to assess learning style.&lt;&#x2F;p&gt;
&lt;p&gt;Many forks. Significant gender differences.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-walenstein.pdf&quot;&gt;HASTI: A Lightweight Framework for Cognitive Reengineering Analysis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Presents simple computational model of human cognition. Suggests studying software tools in terms of how their use maps onto this model.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-mciver.pdf&quot;&gt;Evaluating Languages and Environments for Novice Programmers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Common-sense ideas for comparing languages and IDEs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-roast.pdf&quot;&gt;Dimension Driven Re-Design - Applying Systematic Dimensional Analysis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Unclear. Map language spec into this tool and automatically compute CDs?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-rodden.pdf&quot;&gt;Class Libraries: A Challenge for Programming Usability Research&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Library design should be treated as a usability problem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-triffitt.pdf&quot;&gt;A Study of Usability of Z Formalism Based on Cognitive Dimensions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CD questionnaire given to students in Z course reveals many issues, too many to list here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2002-PPIG-14th-kutar.pdf&quot;&gt;A Comparison of Empirical Study and Cognitive Dimensions Analysis in the Evaluation of UML Diagrams&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two different notations for UML diagrams. CD analysis favours one. Multiple-choice exam given to students shows no significant difference.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2003&quot;&gt;2003&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-tucker.pdf&quot;&gt;A development study of cogntive problems in learning to program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anecdotal reports from programming course.&lt;&#x2F;p&gt;
&lt;p&gt;Students can often give the correct code without understanding how it works. Often mislearn concepts, while making the correct noises.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-sharp-robinson.pdf&quot;&gt;An ethnography of XP practice&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Very similar to previous paper.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-shaffer.pdf&quot;&gt;Applying Cognitive load theory to computer science education&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ideas for how to reduce cognitive load when teaching programming.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-buckley.pdf&quot;&gt;Characterising software comprehension for programmers in practice&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Empirical studies of programmers tend to take place in very artificial settings. Plans to study programmers in-situ.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-blackwell.pdf&quot;&gt;Cognitive Dimensions of tangible programming techniques&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At lexical level TUIs provide no advantage - too small a vocabulary, no established conventional symbols, no significant improvement in interaction speed or recall.&lt;&#x2F;p&gt;
&lt;p&gt;At syntactic level - more possible kinds of relationships (position, orientation, proximity...), input-only interface (eg no undo).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-bobkowska.pdf&quot;&gt;Cognitive Dimensions questionnaire applied to visual languages evaluation - a case study&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CD questionnaire given to 2(!) subjects. Both were critical of the questionnaire.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-oshea_0.pdf&quot;&gt;Does the empirical evidence support visualisation?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Brief survey finds mixed support for visualization in programming tools.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-kuittinen.pdf&quot;&gt;First results of an experiment on using roles of variables in teaching&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Categorize variables into one of 10 roles.&lt;&#x2F;p&gt;
&lt;p&gt;Taught 80 students with a) normal methods b) variable roles c) variable roles + animated simulator which shows roles.&lt;&#x2F;p&gt;
&lt;p&gt;Conclusion is confusing - raw data looks to me like roles group did worse in their final exam, but author claims that poor grading was the cause.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-kutar.pdf&quot;&gt;Investigating the influence of structure of user performance with UML interaction diagrams&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tries again with the two different UML notation. Three different studies show no difference in performance.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-romero.pdf&quot;&gt;Java Debugging strategies in multi-representational environments&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Java debugger with ghetto eye-tracking. 49 novice students. Given spec and test cases, then given 10 mins in debugger to fix program.&lt;&#x2F;p&gt;
&lt;p&gt;Numbers are in a different paper. This one only discusses verbalizations from 2 subjects.&lt;&#x2F;p&gt;
&lt;p&gt;Subjects started by reading code almost top-to-bottom. Debugging switched between forward and backward reasoning.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-jadud.pdf&quot;&gt;Little Languages for Little Robots&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Teaching language design by working with students to build a language for programming Mindstorms robots.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-molokken.pdf&quot;&gt;Software Effort Estimation: unstructured group discussion as a method to reduce individual biasis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Groups of programmers produce less over-optimistic estimates than individual programmers (effect size 1.25).&lt;&#x2F;p&gt;
&lt;p&gt;Seems similar to proposed mechanism in Superforecasters - if estimate is ideal time + list of things-that-might-go-wrong, then compiling things-that-might-go-wrong from whole group should provide better coverage.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-segal.pdf&quot;&gt;Some parallels between empirical software engineering and research in human computer interaction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Current experiments in psych-prog do not inform practice. HCI faced similar criticism in previous decades and changed focus from lab experiments to field studies.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-petre.pdf&quot;&gt;Team coordination through externalised mental imagery&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Several observed cases of mental imagery originating in one dev and spreading throughout an entire team.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-sharp.pdf&quot;&gt;Tensions in the adoption and evolution of software quality management systems&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;4 companies. (4?) quality managers. Semi-structured interviews on department structure, history, responsibilities, practices.&lt;&#x2F;p&gt;
&lt;p&gt;Not clear what the conclusions are.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-good.pdf&quot;&gt;Towards authentic measures of program comprehension&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Scheme for grading student explanations of programs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-dearden.pdf&quot;&gt;Using cognitive dimensions to compare prototyping techniques&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CD analysis suggests that existing categorization of prototyping tools into lo- and hi-fidelity is not enough.&lt;&#x2F;p&gt;
&lt;p&gt;Identifies 4 key activities: authoring, validation, implementation, confirmation. Not clear how these relate to categorization.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-sherlock.pdf&quot;&gt;Using laddering and on-line self-report to elicit design rationale for software&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Design rationale may not be available as explicit, conscious, verbalizable knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;Authors elicit rationale from students designing web pages using real-time self-reporting and laddering. (Laddering seems similar to root-cause analysis, but for exploring knowledge rather than causes).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2003-PPIG-15th-clarke.pdf&quot;&gt;Using the cognitive dimensions framework to measure the usability of a class library&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Suggests a variant CD specifically designed for evaluating libraries.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2004&quot;&gt;2004&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-byckling-doc.pdf&quot;&gt;Roles of variables and strategic programming knowledge&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Variable roles again. No new results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-brand_0.pdf&quot;&gt;Programming without code: a work in-progress paper&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposal for natural language programming for kids.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-bryant-doc.pdf&quot;&gt;Extreme programming: all of the elegance but none of the models?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Plans for studying extreme programming.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-bryant.pdf&quot;&gt;XP: Taking the psychology of programming to the eXtreme&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Review of previous XP studies.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-bednarik.pdf&quot;&gt;Visual attention and representation switching in Java program debugging: a study using eye movement tracking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Same as previous paper, but with a real eye-tracker this time. Similar results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-ratcliffe.pdf&quot;&gt;Understanding our students: incorporating the results of several experiments into a student learning environment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Collaborative IDE for teaching. Anonymous group work was popular.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-traynor.pdf&quot;&gt;Towards the development of a cognitive model of programming: a software engineering proposal&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes teaching system that tracks students weaknesses down to the level of individual concepts. (Not unlike Khan academy).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-doyle.pdf&quot;&gt;PicoVis: a dynamic visualisation tool for simulating a Bluetooth communication environment enhancing student understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Bluetooth network simulation for teaching. No evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-douce.pdf&quot;&gt;Metaphors we program by&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Many examples of metaphorical language used by devs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-kaasboll.pdf&quot;&gt;Learning object-oriented programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anecdotal observation of students. Students were reluctant to draw object diagrams before coding. Instructor didn&#x27;t approve of their modelling choices.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-cox.pdf&quot;&gt;Learning and using formal language&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;36 psych students, later 64 vaguely-sourced adults. Tested on &#x27;does regex match string&#x27; and &#x27;make a regex to match this class&#x27;. Exposure to former doesn&#x27;t improve performance in latter (but only 6 questions per person?).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-oshea.pdf&quot;&gt;Investigating patterns and task type correlations in open source mailing lists for programmer comprehension&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Collected program snippets from Java mailing lists (mostly from bug reports and patches). Don&#x27;t really follow the results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-wiedenbeck.pdf&quot;&gt;Factors affecting course outcomes in introductory programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;75 students. Computer Programming Self-Efficacy Scale questionnaire. Program comprehension test. Program recall test. Weak correlations between self-efficacy at end of course and test scores.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-hughes.pdf&quot;&gt;Evaluating algorithm animation for concurrent systems: a comprehension-based approach&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes evaluating understanding of concurrent systems with a particular talk-aloud protocol and coding system.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-romero.pdf&quot;&gt;Dynamic rich-data capture and analysis of debugging processes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes using restricted focus viewer and other recording methods.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-lynch.pdf&quot;&gt;Design diagrams for multi-agent systems&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes an extension of UML to handle multiple agents.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-ryan.pdf&quot;&gt;CORBAview: a visualisation tool to aid in the understanding of CORBA-based distributed applications&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Visualisation tool for CORBA. Records events, allows replay. No evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-nevalainen.pdf&quot;&gt;Comparison of three eye tracking devices in psychology of programming research&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;3 commercial eye-trackers. 12 subjects given program comprehension tests. Head-mounted device took longer to setup and was less accurate but allowed subjects to move around.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-mancy.pdf&quot;&gt;Aspects of cognitive style and programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;~150 students. Modified Witkin field-dependency test. Digit span test for working memory. Correlation to exam results 0.1-0.2 for working memory, 0.2-0.4 for field-independency.&lt;&#x2F;p&gt;
&lt;p&gt;(Would effect of field-independency be explained away by spatial IQ?)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-byckling.pdf&quot;&gt;An Inter-Rater Reliability Analysis of Good&#x27;s Program Summary Analysis Scheme&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Coding scheme for program summaries shows ~80% agreement between 3 users. Suggests refinements to the scheme to reduce differences.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-tzanidou.pdf&quot;&gt;An Examination of E-Commerce Homepage Design Guidelines by Measuring Eye Movements&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;11 subjects visit ecommerce pagers under eye-tracker. Self-reported data agreed with eye-tracker - users look at top-left or top-middle first.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2004-PPIG-16th-jadud.pdf&quot;&gt;A first look at novice compilation behavior using BlueJ&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;63 students. Record full source code every time they hit compile. More than half of errors accounted for by missing semicolons, misspelled variables, missing brackets, illegal start of expression, misspelled class. Majority of recompiles after error take place within 20s. Vast majority of recompiles after success take place after &amp;gt; 5 minutes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2005&quot;&gt;2005&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-dunican.pdf&quot;&gt;A Framework for Evaluating Qualitative Research Methods in Computer Programming Education&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&#x27;Grounded Theory&#x27;. Framework for guiding qualitative research.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-farkas.pdf&quot;&gt;Attitudes Toward Computers, the Introductory Course and Recruiting New Majors: Preliminary Results&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Computer literacy course. Computer Attitude Scale questionnaire. Attitudes became increasingly negative over the duration of the course.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-turner.pdf&quot;&gt;Attuning: A Social and Technical Study of Artist-Programmer Collaborations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviews with 4 programmers and 2 artists. Conclusions unclear.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-kahn.pdf&quot;&gt;Concretising Computational Abstractions: What works, what doesn&#x27;t, and what is lost&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;ToonTalk. No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-bednarik.pdf&quot;&gt;Effects of Experience on Gaze Behavior during Program Animation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;18 high-school students in undergrad programming course. Animate three short programs. Comprehension task. Gaze-tracking.&lt;&#x2F;p&gt;
&lt;p&gt;No significant variation in behaviour wrt experience.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-chaparro.pdf&quot;&gt;Factors Affecting the Perceived Effectiveness of Pair Programming in Higher Education&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;58 students pair-programming. Observation, questionnaires, semi-structure interviews, field notes.&lt;&#x2F;p&gt;
&lt;p&gt;Differences in skill level affect collaboration. Debugging tasks reported as particularly tiring &#x2F; unenjoyable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-romero.pdf&quot;&gt;Graphical Visualisations and Debugging: A Detailed Process Analysis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;29 undergrads. 1 modification task, 1 comprehension task, 6 debugging tasks.&lt;&#x2F;p&gt;
&lt;p&gt;Forking paths. Questionable interpretations of results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-church.pdf&quot;&gt;Introducing #Dasher, A Continuous Gesture IDE&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Language model for writing C# with Dasher. No evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-beckwith.pdf&quot;&gt;Mining Qualitative Behavioral Data from Quantitative Data: A Case Study from the Gender HCI Project&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;27 male and 24 female subjects. Self-efficacy questionnaire. Spreadsheet with extensions for testing. 2 spreadsheets with bugs.&lt;&#x2F;p&gt;
&lt;p&gt;Female subjects had lower self-efficacy about debugging ability. Less likely to use new debugging features, although no difference in learning time. Introduced more new bugs, but also correlates highly with use of new debugging features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-chong.pdf&quot;&gt;Pair Programming: When and Why it Works&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ethnographic study of pair programming at two companies. No results yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-eisenstadt.pdf&quot;&gt;PP2SS - From the Psychology of Programming to Social Software&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-carew.pdf&quot;&gt;Preliminary Study to Empirically Investigate the Comprehensibility of Requirements Specifications&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pilot to study whether Java implementation of Irish electoral system is easier to understand than the legal language.&lt;&#x2F;p&gt;
&lt;p&gt;8 software eng postgrads. Comprehension questionnaire. Java group scored worse and expressed more confusion and frustration in talk-aloud.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-ivins.pdf&quot;&gt;Psychometric Assessment of Computing Undergraduates&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Aptitude Profile Test Series (sounds like an IQ test) administered to 34 students. Correlates 0.4 with exam results.&lt;&#x2F;p&gt;
&lt;p&gt;Demographic survey of 197 students. Country of birth and first language significantly affecte exam results - non-english students fare worse.&lt;&#x2F;p&gt;
&lt;p&gt;APTS and demographic survey of 80 students. Students with prior experience in programming fared better. APTS correlates 0.3-0.4 with exam results.&lt;&#x2F;p&gt;
&lt;p&gt;Notes sample bias - students that volunteered are much more motivated than those that didn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-bryant.pdf&quot;&gt;Rating Expertise in Collaborative Software Development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;45 pair programmers asked to rate ability and experience for themselves and for peers. Unclear results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-sung.pdf&quot;&gt;Representation-Oriented Software Development: A Cognitive Approach to Software Engineering&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Deja vu. Published effectively the same paper a few years earlier.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-sajaniemi.pdf&quot;&gt;Roles of Variables in Experts&#x27; Programming Knowledge&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;13 professional programmers asked to sort variables into groups based on similarity. Claims that grouping agrees with roles, but not clearly falsifiable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-nevalainen.pdf&quot;&gt;Short-Term Effects of Graphical versus Textual Visualisation of Variables on Program Perception&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;12 students. Field-dependency test. Taught variable roles. Visualisation of pascal program, asked to write program summaries. Questionnaire about tools.&lt;&#x2F;p&gt;
&lt;p&gt;Unconvincing analysis.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-sturdy.pdf&quot;&gt;Sidebrain: A Sidekick for the Programmer&#x27;s Brain&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tool that records stack of open tasks, notes and queue of pending tasks.&lt;&#x2F;p&gt;
&lt;p&gt;(Particularly interesting, because I made a similar tool for myself but didn&#x27;t use it for very long.)&lt;&#x2F;p&gt;
&lt;p&gt;No evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-woodcock.pdf&quot;&gt;Software Authoring as Design Conversation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Talk-aloud of subjects working on sheep-dog game. No real results yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-rosen.pdf&quot;&gt;The influence of Intra-Team Relationships on the Systems Development Process: A Theoretical Framework of Intra-Group Dynamics&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes framework for studying social dynamics in teams.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-bergin.pdf&quot;&gt;The Influence of Motivation and Comfort-Level on Learning to Program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;57 students. Motivated Strategies For Learning Questionnaire. Modified version of Rosenberg Self-esteem questionnaire. Modified version of Computer Programming Self-Efficacy Scale.&lt;&#x2F;p&gt;
&lt;p&gt;Samples test scores were representative of whole class.&lt;&#x2F;p&gt;
&lt;p&gt;Intrinsic motivation and self-efficacy both correlated with performance at ~0.5.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-blackwell.pdf&quot;&gt;The Programming Language as a Musical Instrument&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Argues that live coding is an interesting topic for PPIG.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-leach.pdf&quot;&gt;The Psychology of Invention in Computer Science&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mines existing published interviews with famous computer scientists for quotes on creativity.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-oshea.pdf&quot;&gt;The Role of Source Code within Program Summaries describing Maintenance Activities&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Studying code excerpts from Java mailing lists. Couldn&#x27;t reject the null hypothesis. Not sure I understand the null hypothesis anyway.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-cox.pdf&quot;&gt;Theoretical Considerations on Navigating Codespace with Spatial Cognition&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Plans to study whether mental models of code build on existing spatial navigation strategies.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2005-PPIG-17th-byckling.pdf&quot;&gt;Using Roles of Variables in Teaching: Effects on Program Construction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;20 students. Group 1 taught traditionally. Group 2 taught using roles. Group 3 taught using roles and animator. Only group 3 had any students who successfully completed programming task.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2006&quot;&gt;2006&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-liblit.pdf&quot;&gt;Cognitive Perspectives on the Role of Naming in Computer Programs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Unsurprising observations on names.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-stylos.pdf&quot;&gt;Comparing API Design Choices with Usability Studies: A Case Study and Future Directions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Plans to study general principles of api design rather than just specific apis.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-buckley.pdf&quot;&gt;Empirically Refining a Model of Programmers&#x27; Information-Seeking Behavior during Software Maintenance&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;2 programmers talk-aloud at work. Try to generalize from this a model of how programmers look for information.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-dunican.pdf&quot;&gt;Initial Experiences of Using Grounded Theory Research in Computer Programming Education&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Still talking about grounded theory without yet reporting any results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-blackwell.pdf&quot;&gt;Metaphors we Program By: Space, Action and Society in Java&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Studying spatial and social metaphors in javadocs. Don&#x27;t see any actual examples, just graphs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-bednarik.pdf&quot;&gt;Program Visualization: Comparing Eye-Tracking Patterns with Comprehension Summaries&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Does gaze predict comprehension? Highly forking, no strong signal.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-rooksby.pdf&quot;&gt;Reading as an Ordinary and Available Skill in Computer Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ethnographic studies at software company. I don&#x27;t really know how to summarize this, but it was interesting.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-hunt.pdf&quot;&gt;Stories from the Mobile Workplace: An Emerging Narrative Ethnography&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ethnographic study. No real information.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-dondero.pdf&quot;&gt;Subsetability as a New Cognitive Dimension?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Studying programming environments by the extent to which one can make useful programs without leaving various subsets of features.&lt;&#x2F;p&gt;
&lt;p&gt;Demonstrates that eg hello world in C or Java involves a large subset of the language features.&lt;&#x2F;p&gt;
&lt;p&gt;Arrange feature subsets as a lattice and examine what can be done in each subset.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-sajaniemi.pdf&quot;&gt;Teaching Programming: Going beyond &amp;quot;Objects First&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Object-first teaching leads to students who can&#x27;t code for-loops. Proposes variable-first teaching - start with teaching variable roles and control flow.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-dehnadi.pdf&quot;&gt;Testing Programming Aptitude&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Previous study noted that consistency of mental model in early tests was predictive of long-term success in programming courses. Criticized for being too vague to replicate. Introduces a new marking scheme that doesn&#x27;t require marker judgment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-white.pdf&quot;&gt;The Development Designer Perspective&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;15 devs and product managers interviewed on design decision process. Little input from professional designers during process. Main factor in decisions was consistency with existing design.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-kumar.pdf&quot;&gt;The Effect of Using Problem-Solving Tutors on the Self-Confidence of Students&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tutor program combines explanation with multiple-choice tests. Improvement in test results after use was significant but effect size is small.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-khalife.pdf&quot;&gt;Threshold for the Introduction of Programming: Providing Learners with a Simple Computer Model&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Somewhat unclear. Talks about &#x27;threhold concepts&#x27; - concepts that once learnt change the way the student views computing. Then presents a simplified model of a computer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-delaney.pdf&quot;&gt;Towards understanding Source and Configuration Management tools as a method of introducing learners to the culture of software development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes vocab for discussing scm in terms of Vygotskyian model. I don&#x27;t actually see any vocab though.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-barcellini.pdf&quot;&gt;Users&#x27; participation to the design process in a Free Open Source Software online community&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Studies Python Enhancement Proposals. Interviewed 10 active python community members. No obvious conclusions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-schwarz.pdf&quot;&gt;Why Don&#x27;t They Do What We Want Them to Do&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviewed (all 60?) students. Asked why they didn&#x27;t use state diagrams for their concurrent systems homework.&lt;&#x2F;p&gt;
&lt;p&gt;Students who used state diagrams did better on their homework.&lt;&#x2F;p&gt;
&lt;p&gt;Widespread reports that state diagrams take too much effort.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-Sharp.pdf&quot;&gt;Collaboration in mature XP teams&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ethnographic study of XP team. Nothing surprising.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-Detienne.pdf&quot;&gt;Open source software communities: current issues&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Argues OSS communities need to be studied more.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-Bryant.pdf&quot;&gt;XP and Pair Programming practices&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Survey of existing work on XP and pairing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-Hunt.pdf&quot;&gt;Agile Stories: Agile Systems and Narrative Research&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anecdote about a programmer with poor communication skills.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-Petre.pdf&quot;&gt;A gentle overview of software visualisation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Does what it says on the tin.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-scaffidi.pdf&quot;&gt;Challenges, Motivations, and Success Factors in the Creation of Hurricane Katrina &amp;quot;Person Locator&amp;quot; Web Sites&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviewed team leaders of 6 person locator websites. None looked for existing sites or teams before starting. All resisted aggregators combining their content.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-hakala.pdf&quot;&gt;An Experiment on the Effects of Program Code Highlighting on Visual Search for Local Patterns&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;21 students. Asked to find various program fragments. Two syntax highlighting schemes had no significant effect vs black-on-white control.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-sturdy.pdf&quot;&gt;Abstraction levels in editing programs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Comparing structured editing to text editing. No results yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2006-PPIG-18th-bennedsen.pdf&quot;&gt;A Competence Model for Object-Interaction in Introductory Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes hierarchy of understanding for OOP execution model. 125 students given questionnaire followed by test. Results appear to agree with hierarchy, but some questionable change to data before analysis.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2007&quot;&gt;2007&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Razali.pdf&quot;&gt;Usability Assessment of a UML-based Formal Modelling Method&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Model that combines UML and B. Compared to B alone. 41 students assigned comprehension and modification tasks. UML-B scored higher.&lt;&#x2F;p&gt;
&lt;p&gt;10 students given CD questionnaire on UML-B.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-daRosa.pdf&quot;&gt;The Learning of Recursive Algorithms from a Psychogenetic Perspective&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Give students recursive definition of a language, ask them various questions about it and then ask them to write various recursive functions on the language.&lt;&#x2F;p&gt;
&lt;p&gt;Talks up the benefits of this approach but it&#x27;s not clear to me from a quick reading what the difference is.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Tokola.pdf&quot;&gt;Student Attitude Towards Automatic and Manual Exercise and Evaluation Systems&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Survey given to 455 students with 23% reply rate. Students trust automated systems more. Worried that human contact would be reduced.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Wray.pdf&quot;&gt;SQ Minus EQ can Predict Programming Aptitude&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;19 students given Autism Research Centres EQ and SQ tests. Both correlate with programming test (.44, -.45, p~=.05), combined score correlates more (.67, p=.002). (Combined score also known to correlate with autism spectrum).&lt;&#x2F;p&gt;
&lt;p&gt;Suggested explanation is that high SQ-EQ makes students more likely to rack up hours messing with computers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Jones.pdf&quot;&gt;Spatial Ability and Learning to Program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;49 students in MSc IT. Mental rotation test correlates with success at 0.48. Acknowledges that students with high spatial ability are known to be more likely to pick engineering courses.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Gomes.pdf&quot;&gt;Problem Solving in Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Argues that students struggly in programming because they lack basic problem solving skills ala Polya. Propses tool that nudges students through the basic process eg making them list what data is known and what unknowns need to be solved.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Khan.pdf&quot;&gt;Moods and Programmers&#x27; Performance&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Make 72 programmers watch short video clips before debugging test. Small effect on arousal axis, but poor power.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Gerdt.pdf&quot;&gt;Introducing Learning into Automatic Program Comprehension&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Use machine learning for understanding programs. Example of extracting variable roles. Not clear what the learning algorithm is or how it&#x27;s applied.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Sajaniemi.pdf&quot;&gt;From Procedures to Objects: What Have We (Not) Done?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Procedural to OO has been a big shift for teaching. Can&#x27;t assume that psych results will carry over.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the that is claims are totally unstudied seem to have been published in previous PPIG papers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Petre.pdf&quot;&gt;Expert strategies for dealing with complex and intractable problems&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In-field observation and interviews of 10 programmers working on large complex problems. No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Timcenko.pdf&quot;&gt;Example of Using Narratives in Teaching Programming: Roles of Variables&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anecdotal observations of teaching kids to program using narratives and variable roles - placing kids in the role of a particular variable and playing out live.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Buckley.pdf&quot;&gt;ESCAPE Meta Modelling in Software Engineering: When Premature Commitment is Useful in Representations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Advocates for process of explicitly stating models and (manually or automatically) looking for contradictions in reality to refine the model.&lt;&#x2F;p&gt;
&lt;p&gt;Main example is software tool for expressing explicit models of how software operates. User maps model to code. Tool shows where system violates their model eg calls between two components that don&#x27;t have a dependency in the model.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Cleary.pdf&quot;&gt;Assisting Concept Location in Software Comprehension&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Code search that is aware of documentation? Too much jargon, no idea what the tool actually does.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Bednarik.pdf&quot;&gt;Analysing and Interpreting Quantitative Eye-Tracking Data in Studies of Programming: Phases of Debugging with Multiple Representations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Eye-tracking data is hard to analyze. Complex tasks, difficult to map into simple components for hypothesis testing.&lt;&#x2F;p&gt;
&lt;p&gt;Broke previous data into small chunks and looked at trends over time and switching patterns between activities.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Nevalainen.pdf&quot;&gt;An Experiment on the Effects of Engagement and Representation in Program Animation Perception&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;PlanAni again. 24 students. Two tests under eye-tracking - 1) predict variable values 2) choose inputs to produce particular values.&lt;&#x2F;p&gt;
&lt;p&gt;Various numbers produced but no idea what they were actually trying to find out.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Exton.pdf&quot;&gt;An Experiential Report on the Limitations of Experimentation as a Means of Empirical Investigation&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Failed experiment. Subject sampling&#x2F;participation messed up by other commitments. Much of the data is missing because subjects didn&#x27;t get around to writing it down. Two groups behaved so differently in collaborative stage as to be effectively different experiments.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Sorva.pdf&quot;&gt;A Roles-Based Approach to Variable-Oriented Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes language design to focus on variable roles.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Detienne.pdf&quot;&gt;A multidimensional framework for analysing collaborative design: emergence and balance of roles&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No body.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Salinger.pdf&quot;&gt;A Coding Scheme Development Methodology Using Grounded Theory for Qualitative Analysis of Pair Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Attempting to use GT initially failed. Transcription of recording was impractical so directly annotated the video. Overwhelmed by possible choice of features because they had no actual goal.&lt;&#x2F;p&gt;
&lt;p&gt;Suggests choosing feature categories before starting coding, using structured names for concepts, making a UML model for results, pair coding.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2007-PPIG-19th-Lahtinen.pdf&quot;&gt;A Categorization of Novice Programmers: A Cluster Analysis Study&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Want to be able to group students by current skill level for better targeted teaching.&lt;&#x2F;p&gt;
&lt;p&gt;Give a test to 254 students that follows Blooms Taxonomy. Cluster students by results - observed non-linear skill progression.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2008&quot;&gt;2008&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-lechner.pdf&quot;&gt;XP Team Psychology - An Inside View&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anecdotal report from team of PhD students using XP.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-salinger.pdf&quot;&gt;What Happens During Pair Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;GT concepts for pair programming.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-budgen.pdf&quot;&gt;Using Mapping Studies in Software Engineering&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Several examples of mapping studies. Notes that coverage is low, both in the mapping studies themselves and in the areas they address.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-kahn.pdf&quot;&gt;Towards a Computer Interaction-Based Mood Measure Instrument&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Trying to determine mood from mouse and keyboard logs. Analysis is awful.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-exton.pdf&quot;&gt;Thinking about Thinking in Objects: Methods, Findings and Implications from a Psychological Perspective&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OOPy folks argue that thinking in terms of objects is innate. Relates various psych findings that don&#x27;t seem to actually be related to OOP objects. Confusion over the word.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-douce.pdf&quot;&gt;The Stores Model of Code Cognition&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Models code cognition in terms of various memory types.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-carneiro.pdf&quot;&gt;The Importance of Cognitive and Usability Elements in Designing Software Visualization Tools&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Designing software with multiple views. Not strongly justified.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-blackwell.pdf&quot;&gt;The Abstract is an Enemy: Alternative Perspectives to Computational Thinking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reality is messy, has to be abstracted away to fit in tidy computers. What could go wrong?&lt;&#x2F;p&gt;
&lt;p&gt;Not very convincing examples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-church.pdf&quot;&gt;Structured Text Modification Using Guided Inference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tools that infers regexes from positive&#x2F;negative examples. Evaluation with 6 subjects vs manual editing with Word and vs manual rename with Adobe Bridge. Large effect size.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-segal.pdf&quot;&gt;Scientists and Software Engineers: A Tale of Two Cultures&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Culture clashes between devs and scientists, especially in waterfall style dev.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-sharif.pdf&quot;&gt;Observing Open Source Programmers&#x27; Information Seeking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;More mailing list data-mining. Conclusions are banal.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-greathead.pdf&quot;&gt;MBTI Personality Type and Student Code Comprehension Skill&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;74 students take MBTI test and code comprehension test. Introversion slightly predicts success.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-beynon.pdf&quot;&gt;Intuition in Software Development Revisited&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Philosophizing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-hussain.pdf&quot;&gt;Integrating Extreme Programming and User-Centered Design&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Largely seems to be about integrating mock-ups and end-user testing into XP workflow.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-kankuzi.pdf&quot;&gt;An MCL Algorithm Based Technique for Comprehending Spreadsheets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Using Markov Clustering to try to retrieve logical cell blocks. Minimal evaluation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-kasurinen.pdf&quot;&gt;A Study of Visualization in Introductory Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;LOGO clone. Slight improvement in course participation in same year.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-milner.pdf&quot;&gt;A Loop is a Compression&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Suggests that loops are hard because there is not a 1-1 mapping between text and execution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-creegan.pdf&quot;&gt;A Longitudinal Study of Depth of Inheritance and its Effects on Programmer Maintenance Effort&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Data-mining Eclipse repo. Inheritance depth did not predict refactorings.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-turner.pdf&quot;&gt;A Lightweight Systematic Literature Review of Studies about the Use of Pair Programming to Teach Introductory Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Testing out systematic lit review with 1 student. Seems to work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2008-PPIG-20th-plonka.pdf&quot;&gt;A Comparison Between Student and Professional Pair Programmers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;10 students and 6 professionals recorded pair programming. Significant differences in their behavior mean that past studies on students probably can&#x27;t be extrapolated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2009&quot;&gt;2009&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-vitale.pdf&quot;&gt;Using computerized procedures for testing and training abstract comparative relations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Subjects given two comparisons eg A&amp;gt;B and B&amp;gt;C and have to report what mapping from A,B,C to small,medium,large can be deduced. Success rates between 50% and 100% depending on class of problem.&lt;&#x2F;p&gt;
&lt;p&gt;10 subjects. Three sessions. Small but significant increase in performance over time.&lt;&#x2F;p&gt;
&lt;p&gt;10 subjects. Replaced middle session with &#x27;training session&#x27; - same interface but explains answers. Near 100% success rates on last session.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-exton.pdf&quot;&gt;Good Programmers: Nature or Nurture? (The bed of Procrustes)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;General discussion of nature vs nurture as it pertains to psychometrics. Doesn&#x27;t really say anything specific about programming.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-prechelt.pdf&quot;&gt;Types of Cooperation Episodes in Side-by-Side Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Observation of 10 grad students learning Java. GT concepts again.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-downey.pdf&quot;&gt;Software Architects: A Different Type of Software Practitioner&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviewed software architects about projects. Found that they weren&#x27;t really focused on the projects so the interviews were pointless.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-delorey.pdf&quot;&gt;Mining Programming Language Vocabularies from Source Code&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Text-mining JDK. Doesn&#x27;t seem to have any new results from their past paper.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-dehnadi_0.pdf&quot;&gt;Meta-analysis of the effect of consistency on success in early learning of programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;6 attempted replications of consistent-mental-model-predicts-programming-ability experiment.&lt;&#x2F;p&gt;
&lt;p&gt;First failure had too very high pass rates - almost all of the students were consistent. Second failure was a test given after the course - expect that a programming course should teach students to pass the test (this objection doesn&#x27;t actually seem to me to make sense).&lt;&#x2F;p&gt;
&lt;p&gt;Improved protocol, detailed in previous paper.&lt;&#x2F;p&gt;
&lt;p&gt;Next four replications from author and collaborators. All seem to be somewhat successful.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-pietinen.pdf&quot;&gt;Initial Exploration of Eye Movements in Collaborative Work: Case Pair Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Eye-tracking during pair programming. Method and results are not really clear.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-sharif.pdf&quot;&gt;Further Observation of Open Source Programmers’ Information Seeking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Yet more mailing list mining. Low response rate. No other interesting observations.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-english.pdf&quot;&gt;Examining the Structural Features of Systems Developed in C++ and Java&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;10 C++ and 10 Java projects out of top 100 sourceforge downloads. Conclusions seem to be far too strong given the metrics examined eg low number of protected methods -&amp;gt; not enough use of information hiding.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-rosik.pdf&quot;&gt;Design Requirements for an Architecture Consistency Tool&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Reflexion modeling for fighting architectural drift. 2 year longitudinal study at IBM Dublin. Discovered many violations of the model, but they generally weren&#x27;t removed. Designed a CI version of the tool to catch violations as they happen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-nicholson.pdf&quot;&gt;Concrete Thoughts on Abstraction&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tries to break effective use of abstraction down into subskills.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-dubochet.pdf&quot;&gt;Computer Code as a Medium for Human Communication: Are Programming Languages Improving?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;12 subjects given code comprehension task in either Java or Scala under eye-tracker. The dense Scala code was more quickly understood.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-paakkonen.pdf&quot;&gt;Communication in Testing: Improvements for Testing Management&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Survey answered by 23&#x2F;60 professionals in single company. Reported poor overall visibility of test state, poor coordination between departments.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-kelly.pdf&quot;&gt;Cognitive levels and Software Maintenance Sub-tasks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;6 professionals talk-aloud in maintenance tasks at work. Tries to code utterances into Bloom taxonomy. Not clear what they are looking for.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-mckeever.pdf&quot;&gt;Can Named Ranges Improve the Debugging Performance of Novice Spreadsheet Users?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;21 students asked to debug spreadsheet that uses named ranges. Uses previous experiment as control. Worse performance than control.&lt;&#x2F;p&gt;
&lt;p&gt;Tries to justify use of separate control by comparing error distribution to control group in a different (and properly randomized) experiment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-desmond.pdf&quot;&gt;An Evaluation of inline source code browsing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tool opens source code inline instead of jumping to different file.&lt;&#x2F;p&gt;
&lt;p&gt;7 subjects given various comprehension tasks. 14% faster with inline. No significance test.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2009-PPIG-21st-muller.pdf&quot;&gt;A Course Dedicated to Developing Algorithmic Problem Solving Skills - Design and Experiment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Problem-solving course. Students reportedly approve. No other evaluation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2010&quot;&gt;2010&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Parnin.pdf&quot;&gt;A Cognitive Neuroscience Perspective on Memory for Programming Tasks&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Basic overview of memory models.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Blackwell.pdf&quot;&gt;A Logical Mind, not a Programming Mind: Psychology of a Professional End-User&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Case study - 3 years, electronic patient record system in ICU. Customised in the field by users. Hired a professional programmer for 5 days to contrast their mental model with users.&lt;&#x2F;p&gt;
&lt;p&gt;Modifications made live with little version control tooling. Users willing to make long-term learning efforts, but only when there is a clear need&#x2F;payoff. Not interested in understanding for it&#x27;s own sake.&lt;&#x2F;p&gt;
&lt;p&gt;Programmer spent a lot of time trying to teach inheritance and talking about OOPy models of cars. Users completely exasperated at this apparent waste of time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-McLean.pdf&quot;&gt;Bricolage Programming in the Creative Arts&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Philosophizing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Li.pdf&quot;&gt;Characterizing Comprehension of Concurrency Concepts&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;UML diagrams for concurrency. 15 students given comprehension test on concurrent system. Miscomprehensions are tangled chains of mistakes. Tries to categorize them by semantic level at which they occur.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Calikli.pdf&quot;&gt;Confirmation Bias in Software Development and Testing: An Analysis of the Effects of Company Size, Experience and Reasoning Skills&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tendency to write tests that confirm hypotheses rather than refute them.&lt;&#x2F;p&gt;
&lt;p&gt;88 subjects drawn from 4 companies and from grad school. Watson&#x27;s rule discovery task and selection task. Students did better. Don&#x27;t see a control for IQ or similar.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Dinmore.pdf&quot;&gt;Empirically-Observed End-User Programming Behaviors in Yahoo! Pipes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mined 30k pipes. Most pipes are DAGs (ie no use of looping constructs). Most pipes use a small subset of the available constructs. Most pipes are hardwired - number of exposed parameters fits exponential distribution.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Mselle.pdf&quot;&gt;Enhancing Comprehension by Using Random Access Memory (RAM) Diagrams in Teaching Programming: Class Experiment&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;39 students in control group taught with trace tables. 61 students taught with diagrams of memory layout. Different teachers. (Numbers suggest not randomly assigned?).&lt;&#x2F;p&gt;
&lt;p&gt;Simple programming exam. Tiny but significant effect size.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Leitner.pdf&quot;&gt;Enhancing User-Centredness in Agile Teams: A Study on Programmer&#x27;s Values for a better Understanding on how to Position Usability Methods in XP&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviewing XP programmers to determine their goals. No attempt to determine reliability or validity of their methods.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Wilson.pdf&quot;&gt;Evaluating Scratch to Introduce Younger Schoolchildren to Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Case study with Scratch. Given LOGO test at middle and end - small improvement. Main upside is more enthusiasm, less frustration (compared to?).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Church.pdf&quot;&gt;Liveness in Notation Use: From Music to Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Breaks liveness into levels. Compares different tasks in programming and music.&lt;&#x2F;p&gt;
&lt;p&gt;Neat diagrams of feedback loops in various systems.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Daughtry.pdf&quot;&gt;Perceived Self-Efficacy and APIs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Designed self-efficacy questionnaire for APIs. Don&#x27;t understand their attempt to prove that the test is reliable. They note that their other experiments have terrible power.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Rosen.pdf&quot;&gt;Project Kick-off with Distributed Pair Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Case study of distributed pair programming. Small number of sessions, small number of subjects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Moffat.pdf&quot;&gt;Students’ Early Attitudes and Possible Misconceptions about Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ask students about recollections of efficacy at various points in time. Results are confused.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Kaplan.pdf&quot;&gt;Teaching Novice Programmers Programming Wisdom&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;List of heuristics novices might benefit from.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-daRosa.pdf&quot;&gt;The Construction of the Concept of Binary Search Algorithm&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Teaching binary search. Same as previous paper, I can&#x27;t figure out what the contribution is.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Sach.pdf&quot;&gt;The use of MBTI in Software Engineering&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looks at previous studies of distribution of MBTI types in devs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2010-PPIG-22nd-Letondal.pdf&quot;&gt;Usability Requirements of User Interface Tools&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Programming interactive apps is hard. Proposed advances from academia have not taken off. Big list of properties that make interactive software different to purely computational software.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2011&quot;&gt;2011&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Ambrosio.pdf&quot;&gt;Study attitudes and behaviour of CS1 students – two realities&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;IACHE inventory given to 72 high school students in Brazil and 258 in Portugal. No conclusive differences between the two.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Kutar.pdf&quot;&gt;The cognitive dimensions questionnaire: adapting for non-expert users&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Specializing CD questionnaire to POS software.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Alardawi.pdf&quot;&gt;The influence of class structure on program comprehension&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;211 undergrads from 3 schools. Comprehension test on OOPy and non-OOPy programs in VB and Java. Students given non-OOPy did worse, but looking at the graph the only major difference is in the &#x27;Class&#x27; category of questions, which seems like an obvious conclusion?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Roast.pdf&quot;&gt;The programming-like-analysis of a innovative media tool&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Media designers often need to reuse &#x27;code&#x27; eg designing same dvd menu for many different markets. Presents a tool that separates style from content.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Douce.pdf&quot;&gt;Understanding program complexity: an approach for study&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes trying to relate eye-tracker data to complexity metrics.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Flood.pdf&quot;&gt;Useful but tedious: An evaluation of mobile spreadsheets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Subjects asked to query or edit typical office spreadsheets on a phone. Problems with cell selection, character selection, inconsistency between platforms, having to focus on keyboard while editing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Stead.pdf&quot;&gt;User configurable machine vision for mobiles&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Software that lets users train classifier on their own visual syntax, map properties of syntax to synth inputs and then play music by pointing the camera at notation.&lt;&#x2F;p&gt;
&lt;p&gt;Many usability complaints.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Mselle.pdf&quot;&gt;Using formal logic to define the grammar for memory transfer language (MTL) on the mould of register transfer language (RTL) and high level languages&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes a sort of high-level virtual machine with visualization + replay as a teaching tool.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Sach.pdf&quot;&gt;What makes software engineers go that extra mile?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviews with 13 professionals. Motivated by the work itself, and the aesthetics for their code. Demotivated by external obstacles to producing satisfying code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Church.pdf&quot;&gt;Why PPIG matters beyond the P&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No body&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;PPIG2011_DC_Fuqun.pdf&quot;&gt;Systematically Improving Software Reliability: Considering Human Errors of Software Practitioners&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CS should borrow ideas from human error research.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Nguyen.pdf&quot;&gt;A case study on the usability of NXT-G programming language&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;12 students of various ages. Even experienced programmers struggled with the tasks. Loop blocks confused most subjects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Khazei.pdf&quot;&gt;An empirical study of the influence of OCL on early learners&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;36 students taught an OOPy UML. When asked to choose between two models, more preference for simple models when expressed as UML vs informal.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Taherkhani.pdf&quot;&gt;Automatic algorithm recognition based on programming schemas&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Classifier for sort algorithms with 87% accuracy on student submissions. Wants to improve it so it can give automatic feedback to students.&lt;&#x2F;p&gt;
&lt;p&gt;(One of the MIT MOOCs uses a semi-interactive classifier to help grade and give feedback on the huge number of student submissions, so it&#x27;s plausible in practice.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Rimmer.pdf&quot;&gt;Class participation and shyness: affect and learning to program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CS students are often shy, and report difficulties with asking questions in class or asking for help from tutors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Bobowska.pdf&quot;&gt;Evaluation of multimedia stream processing modeling language from the perspective of cognitive dimensions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Applying CD to design to a language.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Afshan.pdf&quot;&gt;Investigation of qualitative human oracle costs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Make generative testing map to more concrete natural inputs where appropriate eg random names rather than random strings. No evaluation yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Merriam.pdf&quot;&gt;Measurement and visualisation of software timing properties&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Timing visualisation tool for hard real-time. Proposes researching such.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Monteiro.pdf&quot;&gt;On the cognitive foundations of modularity&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Trying to relate OOP to cognitive uses of abstraction, I think?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Saha.pdf&quot;&gt;Origins of poor code readability&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Speculates on reasons for poor code. Nothing surprising.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Alexandron.pdf&quot;&gt;Programming with the user in mind&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Live Sequence Charts. Seems like programming in terms of user stories.&lt;&#x2F;p&gt;
&lt;p&gt;Interviews with students suggest that it leads them to view the system from the outside rather than from the inside.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Martin.pdf&quot;&gt;Robot dance: edutainment or engaging learning&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Single session outreach. 135 school students in total.&lt;&#x2F;p&gt;
&lt;p&gt;Pre&#x2F;post programming tests show improvements in most areas, but suspicious that it had to be broken down into areas to isolate the negative area.&lt;&#x2F;p&gt;
&lt;p&gt;Focus on knowledge seems weird for outreach anyway, would have expected them to survey attitudes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2011-PPIG-23rd-Good.pdf&quot;&gt;Self-Reporting emotional experiences in computing lab sessions: an emotional regulation perspective&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Students report emotional state in class either via desktop widget or via a hand-held ball gadget thing. Students liked the ball as a fidget toy and as a signaling mechanism.&lt;&#x2F;p&gt;
&lt;p&gt;I kind of want one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2012&quot;&gt;2012&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Prause.pdf&quot;&gt;A Field Experiment on Gamiﬁcation of Code Quality in Agile Development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tool that assigns reputation to code, and then to programmers based on their interaction history with that code.&lt;&#x2F;p&gt;
&lt;p&gt;Past experiments found correlations of .64 and .88 with actual reputation (from surveying peers?).&lt;&#x2F;p&gt;
&lt;p&gt;Field study in postgrad lab. Does not appear to increase actual code quality. Students reported perception of unfairness and opacity. Reputation score not seen as a high priority.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Rosa.pdf&quot;&gt;A Study about Students’ Knowledge of Inductive Structures&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Piaget strikes again. Still have no idea what I&#x27;m supposed to be learning from these stories.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Crabbe.pdf&quot;&gt;Computer Anxiety and the Big Five&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Computer Anxiety Rating Scale and five-factor personality test given to &amp;gt;100 biz students. Agreeableness and emotional stablity negatively correlated with computer anxiety, explaining 38% of variance.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Yates.pdf&quot;&gt;Conducting Field Studies in Software Engineering: An Experience Report&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Common problems with field studies. Some are surprising, eg the need for extension cables.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Afonso.pdf&quot;&gt;Evaluating application programming interfaces as communication artefacts&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Not clear.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Mckay.pdf&quot;&gt;Evaluation of Subject-Specific Heuristics for Initial Learning Environments: A Pilot Study&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes list of qualities to bear in mind when designing learning environments.&lt;&#x2F;p&gt;
&lt;p&gt;Gave either old list or new list to 9 students and ask them to do usability reviews. No clear conclusions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Raffaillac.pdf&quot;&gt;Exploring the design of compiler feedback&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Prototype compilers that give feedback on possible performance problems. Hard to evaluate because users mostly disabled the popups.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Sharma.pdf&quot;&gt;Gaze Evidence for Different Activities in Program Understanding&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pair programming under eye-tracking. Different gaze patterns between experts and novices.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Ollis.pdf&quot;&gt;In search of practitioner perspectives on ‘good code’&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Software craftmanship.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Bednarik.pdf&quot;&gt;Investigating the role of programmers’ peripheral vision: a gaze-contingent tool and an experiment proposal&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposes testing whether restricted focus tools alter programmers behavior.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Mselle.pdf&quot;&gt;Learning Programming by using Memory Transfer Language (MTL) without the Intervention of an Instructor&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;92 students get normal instructor. 14 volunteer students get MTL tool instead. Course score very slightly higher for volunteers.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Bornat.pdf&quot;&gt;Observing Mental Models in Novice Programmers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Adjusted consistent-model test for online testing.&lt;&#x2F;p&gt;
&lt;p&gt;126 high school students in UK. Almost a third scored highly, mostly with an underlying model of parallel execution of lines. Post-test interviews confirmed the models recognized by the test by were accurate. Students who were labeled unrecognized reported multiple models, switching models partway or &#x27;shrug&#x27;.&lt;&#x2F;p&gt;
&lt;p&gt;92 undergrad students in Mexico. Around half marked algorithmic, similar to original experiment.&lt;&#x2F;p&gt;
&lt;p&gt;Interviews used to refine questions and marking scheme for future tests.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Taherkhani.pdf&quot;&gt;Schema Detection and Beacon-Based Classiﬁcation for Algorithm Recognition&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Expanding their algorithm classifier. On 222 implementations from textbooks and webpages, gets 94% accuracy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Church.pdf&quot;&gt;Sketching by Programming in the Choreographic Language Agent&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interesting. Not sure what to summarize.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Kirby.pdf&quot;&gt;Some Reflections on Knowledge Representation in the Semantic Web&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Semantic web ontologies organized around strict hierarchies. Probably not a good map to human knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Major.pdf&quot;&gt;Teaching Novices Programming Using a Robot Simulator: Case Study Protocol&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Planning to use virtual robots for teaching.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2012-PPIG-24th-Lopez.pdf&quot;&gt;Thrashing, Tolerating and Compromising in Software Development&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviews with 7 devs from a single (academic?) institution. Tries to categorize response to errors. Thrashing - undirected, random. Tolerating - just ignore the error. Compromising - hack something together for the sake of progress.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2013&quot;&gt;2013&lt;&#x2F;h3&gt;
&lt;p&gt;I don&#x27;t know why there is only one paper listed for 2013.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2013-daSilva-Capretz-ESEM.pdf&quot;&gt;Using meta-ethnography to synthesize research: A worked example of the relations between personality and software team processes&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Not totally clear on what meta-ethnography entails. Description is surprisingly similar to the research process described in How To Read A Book.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2014&quot;&gt;2014&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Ahadi.pdf&quot;&gt;Applying Educational Data Mining to the Study of the Novice Programmer, within a Neo-Piagetian Theoretical Perspective&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposed data-collection PhD project.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Mernagh.pdf&quot;&gt;Google Sheets v Microsoft Excel: A Comparison of the Behaviour and Performance of Spreadsheet Users&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Biz students given spreadsheet tasks. Text and number entry was faster in google sheets, eyeballed at about 2&#x2F;3 mean time. Formula entry faster in Excel.&lt;&#x2F;p&gt;
&lt;p&gt;Kind of a pointless comparison.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Teague.pdf&quot;&gt;Neo-Piagetian Theory and the Novice Programmer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No new results in here.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Aureliano.pdf&quot;&gt;Self-explaining from Videos as a Methodology for Learning Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposed PhD project.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Church.pdf&quot;&gt;A case of computational thinking: The subtle effect of hidden dependencies on the user experience of version control&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Interviews with devs at Google and Autodesk on their use of VCS. Common themes: high understanding of concepts, ritualized interaction staying with narrow paths, signs of fear and uncertainty. (Slapping down the oft repeated assertion that git is only confusing if you don&#x27;t understand the underlying model).&lt;&#x2F;p&gt;
&lt;p&gt;Speculates that dependencies on undisplayed state (eg staging area, current branch) and premature commitment (eg many operations are potentially destructive to the working tree) are the main culprits, which is why existing guis don&#x27;t alleviate the problem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Bellingham.pdf&quot;&gt;A cognitive dimensions analysis of interaction design for algorithmic composition software&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Suggests representation of time as the most problematic area.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Lohmeier.pdf&quot;&gt;Activation and the Comprehension of Indirect Anaphors in Source Code&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposed experiment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Kumar.pdf&quot;&gt;Affective Learning with Online Software Tutors for Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two online tutors. &amp;gt;2000 students from 56 schools. Affective learning questionnaire - no significant interactions with gender, race or subject. Male students and caucasian&#x2F;asian students scored better on pre-tests for arithmetic tutor. Non-CS students improved more between pre- and post-test.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Teague-Lister.pdf&quot;&gt;Blinded by their Plight: Tracing and the Preoperational Programmer&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ask students to trace code, and what the code is supposed to do. Identifies a group of students who can trace code and can&#x27;t explain it. In talk-aloud, these students struggle to move from concrete value to abstract sets.&lt;&#x2F;p&gt;
&lt;p&gt;(Implies that laddering up is a additional skill on top of execution models.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Leinikka.pdf&quot;&gt;Cognitive Flexibility and Programming Performance&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;298 subjects. Task-switching test. Results comparable to similar published tests.&lt;&#x2F;p&gt;
&lt;p&gt;65 students with some experience + 45 novices. Significant correlation between task switching test score and average grade at -.34, but no significant correlation with final exam grade or credits received.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Rice2.pdf&quot;&gt;Concept Vocabularies in Programmer Sociolects&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;40 C++ samples from 14 students. Extract identifiers. No correlation between years of experience and number of not-in-stdlib concepts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Busjahn.pdf&quot;&gt;Developing Coding Schemes for Program Comprehension using Eye Movements&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We don&#x27;t know how to interpret all this eye-tracking data. Proposes a scheme for developing coding schemes for eye-tracking data.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Sinclair.pdf&quot;&gt;Educational Programming Languages: The Motivation to Learn with Sonic Pi&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;12 novices. Given tutorials on either Sonic Pi or Kids Ruby. Questionnaire on motivation and background. Sonic Pi users typed more, recalled more commands. No notable differences in qualitative questions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Williams.pdf&quot;&gt;Evaluation of a Live Visual Constraint Language with Professional Artists&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Anecdotal reports. Not summarizable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Ambrosio.pdf&quot;&gt;Exploring Core Cognitive Skills of Computational Thinking&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looking for tests that predict computational thinking. Tried D.48 (abstraction, relation, analagy), spatial reasoning test, GATB (arithmetic reasoning and tool matching subsets only).&lt;&#x2F;p&gt;
&lt;p&gt;12 students. Used raw test scores only. Sample too small to obtain significant results, but D.48 and spatial reasoning show correlations ~.5 with exam grades.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Blackwell.pdf&quot;&gt;Exploring Creative Learning for the Internet of Things era&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Project helping 5 artists work with RPi. Frustration with setup cost and lack of portability.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Hosseini.pdf&quot;&gt;Exploring Problem Solving Paths in a Java Programming Course&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;101 students in intro course with 100 assignments, broken into 170 tasks. Automated test system collects snapshots every time it is run.&lt;&#x2F;p&gt;
&lt;p&gt;Majority of students build programs up incrementally and pass tests one by one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Ahadi-Lister_0.pdf&quot;&gt;Falling Behind Early and Staying Behind When Learning to Program&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Similar consistent-model test. 360 students at 2 unis. High and significant correlations with eventual grades.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Boyatt.pdf&quot;&gt;Ghosts of programming past, present and yet to come&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Live programming, computers as personal expression.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Stead.pdf&quot;&gt;Learning Syntax as Notational Expertise when using DrawBridge&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Programming environment that supports both direct manipulation, block editing and raw text editing.&lt;&#x2F;p&gt;
&lt;p&gt;21 school students. Taught in 4 groups, each introducing interactions in different orders. Pre&#x2F;post-test of syntax knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;Analysis is confusing, but conclusion suggests that introducing block editing before text editing was beneficial.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Rice1.pdf&quot;&gt;Linking Linguistics and Programming: How to start?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sociolinguistics? Demonstrates that natural language approaches don&#x27;t carry over directly.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Lewis.pdf&quot;&gt;Nonvisual Visual Programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Noodle, a VPL for blind children. Work in progress.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Lynch.pdf&quot;&gt;Reasoning about Complexity - Software Models as External Representations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Distributed cognition. Anecdotal reports from users of NetLogo.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2014-PPIG-25th-Benvenuti.pdf&quot;&gt;The Object-Relational impedance mismatch from a cognitive point of view&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Trying to tease out what people in various domains mean by &#x27;object&#x27; by showing them tables of data and asking how many objects are in view.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2015&quot;&gt;2015&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Marasoiu.pdf&quot;&gt;An empirical investigation of code completion usage by professional software developers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;6 devs, first given programming task and then later asked to narrate the recording. Code completion used for checking method names, api exploration, catching bugs (eg if completion list looks wrong, look for bugs in code leading up this line).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Butler.pdf&quot;&gt;Analysing Java Identifier Names in the Wild&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Mining names in 60 java projects. Not sure what the point is.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Sarkar-2.pdf&quot;&gt;Confidence, command, complexity: metamodels for structured interaction with machine intelligence&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Properties that need to be exposed in end-user machine learning tools. How sure is the answer, how well does the program understand the domain, how complex was the method used to arrive at the answer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Rostami.pdf&quot;&gt;Evaluation of Mental Workload and Familiarity in Human Computer Interaction with Integrated Development Environments using Single-Channel EEG&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Using EEG to measure cognitive load. Not clear how useful it is compared to just asking.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Basman.pdf&quot;&gt;Harmonious Authorship from Different Representations&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Describes a programming model meant to allow many different editing representations. Without either examples or formal specs it&#x27;s hard to understand how it&#x27;s intended to work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Daka.pdf&quot;&gt;Improving Readability of Automatically Generated Unit Tests&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Trains a readability model for tests. Outperforms generic readability models. Develop optimization process that produces average readability improvement of 1.9%.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Isaac.pdf&quot;&gt;Intuitive NUIs for Speech Editing of Structured Content&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Proposed redesign of speech-controlled tool for writing math formulae (which is a weird idea in the first place - even between humans face-to-face there is a still a preference for writing formulae).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Winder.pdf&quot;&gt;Tales from the Workshops: A sequence of vignettes, episodes, observations, and reflections on many years of trying to teach people programming&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hard to find small problems - even experienced programmers can&#x27;t do as much as they think in 40 min class.&lt;&#x2F;p&gt;
&lt;p&gt;Adults struggle to learn because afraid of &#x2F; unwilling to make mistakes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-daRosa.pdf&quot;&gt;The construction of knowledge of basic algorithms and data structures by novice learners&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Again, where is the content.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Peyton.pdf&quot;&gt;The dream of a lifetime: an opportunity to shape how our children learn computing&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ideas &amp;gt; tech. Computational thinking &amp;gt; programming. Progress in new UK curriculum.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Sarkar.pdf&quot;&gt;The impact of syntax colouring on program comprehension&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;10 subjects under eye-tracker. Mental execution task. Syntax highlighting reduces completion time. Stats are a bit suspect.&lt;&#x2F;p&gt;
&lt;p&gt;Notably, under syntax highlighting there are much fewer fixations on keywords. (Maybe colour enables peripheral vision?)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Dimitri.pdf&quot;&gt;The impact of Syntax Highlighting in Sonic Pi&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;10 subjects. Writing and debugging tasks. Significantly faster completion with syntax highlighting (looks like ~25% faster, weird lack of numbers in this section). Programming and musical experience have no significant effect.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ppig.org&#x2F;sites&#x2F;default&#x2F;files&#x2F;2015-PPIG-26th-Stegeman.pdf&quot;&gt;Understanding code quality for introductory courses&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;How to teach students about quality of code. Not much here yet, all looking forward to future work.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Vive experiments</title>
                <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/vive-experiments/</link>
                <guid>http%3A//scattered-thoughts.net/writing/vive-experiments/</guid>
                <description>&lt;p&gt;I bought a &lt;a href=&quot;https:&#x2F;&#x2F;www.vive.com&#x2F;de&#x2F;&quot;&gt;HTC Vive&lt;&#x2F;a&gt; during the summer and made some simple toys. These are all a few months old, but I didn&#x27;t get around to writing anything down until today.&lt;&#x2F;p&gt;
&lt;p&gt;This is the first time I&#x27;ve found a VR experience convincing. I&#x27;m very susceptible to motion sickness in general, and every previous VR system I&#x27;ve tried has made me unhappy, sometimes for hours afterwards. The Vive is mostly fine, with the exception of a few games that break the published guidelines on acceleration.&lt;&#x2F;p&gt;
&lt;p&gt;I found most of the games pretty disappointing. The vast majority just slap a VR headset on top of an existing game genre without paying any attention to the limitations or new opportunities of the platform. The hand controllers create an incredible feeling of presence and control, but most of the games are shoot-em-ups that use this incredible interface to replicate the point-and-grunt interaction of a mouse. A notable exception was &lt;a href=&quot;http:&#x2F;&#x2F;fantasticcontraption.com&#x2F;&quot;&gt;Fantastic Contraption&lt;&#x2F;a&gt;, which has a ton of clever interface ideas, from the basic grab-and-manipulate building interaction to the summonable cat-toolbox, the menu room contained inside a space helmet and the miniaturized levels in the load&#x2F;save box.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;experiments&quot;&gt;Experiments&lt;&#x2F;h3&gt;
&lt;p&gt;I really want to see experiences that could only make sense in VR, not just slightly more immersive versions of the same old games.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing I tried myself was messing with the mapping from the real to the virtual world, to see if I could produce something similar to the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pinocchio_illusion&quot;&gt;Pinocchio illusion&lt;&#x2F;a&gt;. Messing with the mapping of my hands just made me feel like the controllers were mounted on invisible sticks. Messing with the mapping of my head produced instant nausea and disorientation, no matter what what kind of changes I made.&lt;&#x2F;p&gt;
&lt;p&gt;I made a &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=K6oz2mlV-Wk&quot;&gt;monkey ball&lt;&#x2F;a&gt;-like toy where the goal is to stay close to several moving spheres without being touched by them. It&#x27;s fun in real life, but in VR the headset feels like it&#x27;s about to fall off. I later noticed this in other games and in videos of other people playing - anything that involves tilting the headset past 45 or so degrees feels dangerous.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;cS3SJiBNJxE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;There are buzzing noises in that video. I added simple 3D sound to each ball to see if I could locate them with my eyes closed. I could only tell left side vs right side, nothing more specific. That&#x27;s only a very basic sound engine though, I haven&#x27;t tried with one of the fancy ones that simulates the effects of eg ear shape on the perceived sound.&lt;&#x2F;p&gt;
&lt;p&gt;The next toy used the hands instead of the head, and involved catching trails of bubbles before they pop. This is oddly satisfying - I would just play with it for fairly long stretches of time.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;9wVkoYc9_Cc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Sometimes my arms would end up tangled and I would want to spin my whole body to untangle them, but then the headset would get tangled or move around.&lt;&#x2F;p&gt;
&lt;p&gt;Full-body movements in general seem to run afoul of the headset and it&#x27;s tether. It&#x27;s not unworkable, but it&#x27;s a constant minor annoyance in any game that requires moving quickly or unexpectedly.&lt;&#x2F;p&gt;
&lt;p&gt;Large-scale movement around the virtual world is also tricky. Any acceleration in-game tends to produce motion sickness. One &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5k-T_s9L2I8&quot;&gt;grappling-hook -based game&lt;&#x2F;a&gt; pretty reliably caused myself and everyone else I tested it on to stumble and wobble. The other games I played all either limited the player to a small space or had some kind of teleportation.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t find either of these very satisfying so I tried to find other movement mechanics that wouldn&#x27;t cause motion sickness. I noticed that the Unreal Engine editor controls, where one grabs the world and moves it, didn&#x27;t give me any problems, so I tried something similar in a zero-gravity setting.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;R_lIMubTdos&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Here the player can grab hold of beams and use them to pull and push themselves around. I really liked the result - free movement and totally nausea free. I want to play some kind of &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JIsQRvRAFk4&quot;&gt;racing &#x2F; obstacle-avoidance game&lt;&#x2F;a&gt; using this mechanic.&lt;&#x2F;p&gt;
&lt;p&gt;Some recent games have a similar &#x27;skiing&#x27; mechanic where the player walks around by grabbing the air and pulling, alternating each hand. It&#x27;s not as much fun as flying in zero-gravity though.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s an interesting design problem when it comes to using both hands. If each hand grabs the same beam and then the player moves their hands apart, what happens? In the real world their hands simply wouldn&#x27;t move, but we don&#x27;t have that choice in VR. In the video above, whichever hand grabs last wins, but I later had the much more fun idea of making the player smaller to fit in the same space.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;4R-hkq2ApgQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;I also allowed the player to rotate themselves in a similar way. This turned out to be a really bad idea. The first time I tested it I immediately had to take off the headset and sit down. It&#x27;s really interesting that the linear motion and zooming are totally fine, but rotation is instantly bad.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;kU92H76c4TM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Another direction I thought about was strategy games. There are very few good 3D strategy games on the desktop because it&#x27;s incredibly hard to understand and control a 3D scene with 2D input and display.&lt;&#x2F;p&gt;
&lt;p&gt;I played around with a control scheme for a real-time game where the player grabs spaceships and drags to set their desired velocity vector, and then the ship accelerates until it&#x27;s velocity matches.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;uG8pKvmbVa8&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;I&#x27;d like to go back and explore that more at some point.&lt;&#x2F;p&gt;
&lt;p&gt;I built a couple more toys exploring simple interfaces to &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;SuperCollider&quot;&gt;SuperCollider&lt;&#x2F;a&gt; but I lost the recordings. I mapped positions in space to synth inputs, drew shapes with the controllers and had a wave looping around a space that would send inputs to SC as it passed. This created a simple language for drawing compositions in 3D.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;&#x2F;h3&gt;
&lt;p&gt;All the above experiments were developed in Unity. I also tried Unreal Engine and Stingray. I really disliked all three.&lt;&#x2F;p&gt;
&lt;p&gt;All three editors are really heavily oriented towards hand-built environments. The interfaces revolve around the level editor and the unit editor, neither of which are helpful if you want to randomly generate content, or start with an empty scene.&lt;&#x2F;p&gt;
&lt;p&gt;Unity&#x27;s hot-code loading should be a win for iteration time, but it&#x27;s totally broken. The serialization breaks shared pointers. The VR library doesn&#x27;t reinitialize properly. It was completely unusable for me.&lt;&#x2F;p&gt;
&lt;p&gt;Unity&#x27;s Entity Component System sounds nice in theory, but the OO-esque implementation in terms of mixins and callback methods means that practice it degenerates into the same dispatch soup that bad OO programming does. Worse, you&#x27;re forced to write in that style because most of the subsystems only expose data by calling events on specific entities.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a specific example. The collisions system runs and produces a list of collisions. Rather than returning that list, it calls the OnCollide callback on each of the components on each of the entities that collided. Since I can&#x27;t do anything about the collision until the Update callback gets run later in the frame, I have to just store the collision object and set a flag. Effectively I&#x27;m forced to write code to take the list of collisions and turn it into a list of collisions. Except that the second list is spread out across a hundred objects.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s another example. You are encouraged to put most of the gameplay logic into the Update callback which runs once a frame. Unfortunately, the order in which the callbacks are run across entities is not specified, so logic that relies on reading the state of other entities is now subject to non-deterministic bugs. I want to take the current list of positions of each entity, run some logic and generate a list of new positions, but doing within Update requires either mutating positions in place before other logic runs, or delaying movement to the start of the next frame. Worse, the positions of the VR controllers updates whenever they receive data from the hardware - not at any specific point in the frame. If you want to store the previous positions, there is no callback that you can implement that will reliably do so. For the movement experiments above I ended up circumventing the entire system, using a single god object with a callback that runs once per frame and schedules all the rest of the work itself, including calling into my patched version of the VR library to apply position updates at known points in time.&lt;&#x2F;p&gt;
&lt;p&gt;I spent far more time trying to get stuff working in Unity then I spent on the actual experiments themselves. I just want to put a couple of arrays in a 20 line script and hit a run button. Where is the &lt;a href=&quot;https:&#x2F;&#x2F;love2d.org&#x2F;&quot;&gt;LÖVE&lt;&#x2F;a&gt; of the VR world?&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>A practical relational query compiler in 500 lines of code</title>
                <pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/a-practical-relational-query-compiler-in-500-lines/</link>
                <guid>http%3A//scattered-thoughts.net/writing/a-practical-relational-query-compiler-in-500-lines/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;&quot;&gt;Imp&lt;&#x2F;a&gt; needed a relational database that is simple enough to experiment with but fast enough to power real applications.&lt;&#x2F;p&gt;
&lt;p&gt;Relational databases are usually complicated beasts. Even SQLite, a relatively lightweight database, is &lt;a href=&quot;https:&#x2F;&#x2F;www.sqlite.org&#x2F;testing.html&quot;&gt;116,000 lines of code&lt;&#x2F;a&gt;. Its &lt;a href=&quot;http:&#x2F;&#x2F;www.sqlite.org&#x2F;src&#x2F;artifact&#x2F;7a45743fb947c89b&quot;&gt;btree implementation&lt;&#x2F;a&gt; alone is almost 10,000 lines, and the &lt;a href=&quot;http:&#x2F;&#x2F;www.sqlite.org&#x2F;src&#x2F;artifact&#x2F;f43aa96f2efe9bc8&quot;&gt;core of the query plan interpreter&lt;&#x2F;a&gt; is another 7000 lines. At 100 lines of correct code per day, that&#x27;s half a year of work just for those two files. I don&#x27;t have the time to build something like that.&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;a href=&quot;https:&#x2F;&#x2F;scala-lms.github.io&#x2F;&quot;&gt;Lightweight Modular Staging&lt;&#x2F;a&gt; it&#x27;s possible to build &lt;a href=&quot;https:&#x2F;&#x2F;www.cs.purdue.edu&#x2F;homes&#x2F;rompf&#x2F;papers&#x2F;rompf-icfp15.pdf&quot;&gt;a basic query compiler in 500 lines of code&lt;&#x2F;a&gt;. For a few 1000 lines more the &lt;a href=&quot;http:&#x2F;&#x2F;www.vldb.org&#x2F;pvldb&#x2F;vol7&#x2F;p853-klonatos.pdf&quot;&gt;LegoBase compiler&lt;&#x2F;a&gt; is able to outperform commercial in-memory systems. This is an exciting approach to &lt;em&gt;query compilation&lt;&#x2F;em&gt;, but neither of these systems have anything to say about &lt;em&gt;query planning&lt;&#x2F;em&gt; - LegoBase borrows the query planner from an existing database, while the smaller compiler doesn&#x27;t do any planning at all.&lt;&#x2F;p&gt;
&lt;p&gt;The system I built for Imp is not nearly as elegant as LegoBase, and likely not as fast either, but it is similarly concise at ~500 lines of essential code and it includes an unusual approach to query planning based on programmer hints. While the implementation here is written in &lt;a href=&quot;http:&#x2F;&#x2F;julialang.org&#x2F;&quot;&gt;Julia&lt;&#x2F;a&gt;, it could be easily ported to any language that has a macro system or preprocessor.&lt;&#x2F;p&gt;
&lt;p&gt;In the rest of this post I&#x27;ll walk through the underlying data-structures, the query compiler and the planning system, followed by a set of benchmarks against PostgreSQL on a real-world dataset.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;relations&quot;&gt;Relations&lt;&#x2F;h2&gt;
&lt;p&gt;There is a &lt;a href=&quot;http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.211.8649&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;fundamental tradeoff&lt;&#x2F;a&gt; between read and write speed in index data-structures. In Imp writes can usually be batched together so I optimize the indexes for read speed.&lt;&#x2F;p&gt;
&lt;p&gt;I store each column in a single array and then sort the entire index. Each relation might need to be sorted in many different orders, so relations contain a map from column orderings to sorted indexes.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Relation{T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# where T is a tuple of columns
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;columns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;indexes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Dict{Vector{Int},T}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{T}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Relation{T}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Vector{Int}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(relation.indexes, order) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;columns &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(((ix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;order) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;copy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(column) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{eltype(column)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (ix, column) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(relation.columns))...)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;sort!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((columns[ix] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;order)...))
    columns
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, &lt;code&gt;sort!&lt;&#x2F;code&gt; doesn&#x27;t know how to sort a tuple of columns. In an ideal world, I would just define the array interface on indexes as though they were an array of tuples and then existing array functions like &lt;code&gt;sort!&lt;&#x2F;code&gt; would come for free.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Index{T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
  columns&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;T
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index.columns[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;getindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;c[i], index.columns)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Base&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;setindex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;vals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (c, v) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index.columns, vals)
    c[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;v
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, until &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaLang&#x2F;julia&#x2F;pull&#x2F;18632&quot;&gt;Julia&#x27;s unboxing is improved&lt;&#x2F;a&gt; those tuples will sometimes be allocated on the heap, and this leads to pretty heavy performance penalties on large indexes. For the time being I&#x27;ve had to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;d27ab3fed056e6d551a58fa3525a8ed1a11c98c5&#x2F;src&#x2F;Data.jl#L7-L92&quot;&gt;inline the entire sort implementation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s all thats needed to support queries. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;d27ab3fed056e6d551a58fa3525a8ed1a11c98c5&#x2F;src&#x2F;Data.jl#L109-L253&quot;&gt;remaining 150 lines&lt;&#x2F;a&gt; define some useful but non-essential functions for creating, updating and diffing relations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queries-in-theory&quot;&gt;Queries (in theory)&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s take a simple SQL query.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; playlist, playlist_track, track, album, artist
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;WHERE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;playlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;Heavy Metal Classic&amp;#39;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;playlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;playlist_track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;playlist
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;playlist_track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;track
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;album
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;AND &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;artist
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here is the same query in Imp.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;playlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Heavy Metal Classic&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;playlist_track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_id, track_id)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(track_id, track_name, album_id)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(album_id, _, artist_id)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(artist_id, artist_name)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (track_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, artist_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Imp is aimed at highly-normalized schemas so it uses positional arguments instead of named columns. &lt;code&gt;playlist&lt;&#x2F;code&gt; and &lt;code&gt;playlist_track&lt;&#x2F;code&gt; etc are table names. &lt;code&gt;playlist_id&lt;&#x2F;code&gt; and &lt;code&gt;track_id&lt;&#x2F;code&gt; etc are variable names. Whenever the same variable is used in more than one field, it indicates a join on those fields.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than the traditional &lt;a href=&quot;http:&#x2F;&#x2F;www.neilconway.org&#x2F;talks&#x2F;optimizer&#x2F;optimizer.pdf&quot;&gt;tree of operators&lt;&#x2F;a&gt; used by most database query planners, Imp uses &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1210.0481&quot;&gt;Leapfrog Triejoin&lt;&#x2F;a&gt;, one of the recently developed &lt;a href=&quot;http:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1310.3314&quot;&gt;worst-case-optimal&lt;&#x2F;a&gt; join algorithms. This algorithm essentially performs a backtracking search over all the unknown variables in the query.&lt;&#x2F;p&gt;
&lt;p&gt;Given the query above and an order in which to explore the variables, the query compiler emits code that looks something like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;index_playlist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_playlist_track &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_track, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_track &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(track, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_album &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(album, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_artist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(artist, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
results_track_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{String}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
results_artist_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{String}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;playlist_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_playlist[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Heavy Metal Classic&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;], index_playlist_track)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;track_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_playlist_track[playlist_id], index_track)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;track_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_track[track_id])
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;album_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_track[track_id, track_name], index_album)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;artist_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_album[album_id], index_artist)
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;artist_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_artist[artist_id])
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(results_track_name, track_name)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(results_artist_name, artist_name)
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
        end
      end
    end
  end
end
return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((results_track_name, results_artist_name,))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s unpack that a little.&lt;&#x2F;p&gt;
&lt;p&gt;First, we find or build an index for each table whose columns are sorted in the same order that the query is exploring the variables.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the query explores &lt;code&gt;album_id&lt;&#x2F;code&gt; before &lt;code&gt;artist_id&lt;&#x2F;code&gt;, so the index for &lt;code&gt;album(album_id, _, artist_id)&lt;&#x2F;code&gt; needs to be sorted first by &lt;code&gt;album_id&lt;&#x2F;code&gt; and then by &lt;code&gt;artist_id&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;index_playlist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_playlist_track &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_track, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_track &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(track, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_album &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(album, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
index_artist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(artist, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also create some empty arrays to hold the results of the query.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;results_track_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{String}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
results_artist_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;{String}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we find all the playlist ids in &lt;code&gt;playlist&lt;&#x2F;code&gt; where the playlist name is &lt;code&gt;&amp;quot;Heavy Metal Classic&amp;quot;&lt;&#x2F;code&gt;, and all the playlist ids in &lt;code&gt;playlist_track&lt;&#x2F;code&gt;, and lazily iterate over the playlist ids that occur in both.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;playlist_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_playlist[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Heavy Metal Classic&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;], index_playlist_track)
  ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then for each playlist id, we find all the track ids in &lt;code&gt;playlist_track&lt;&#x2F;code&gt; that have a matching playlist id, and all the track ids in &lt;code&gt;track&lt;&#x2F;code&gt;, and lazily iterate over the track ids that occur in both.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;playlist_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_playlist[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Heavy Metal Classic&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;], index_playlist_track)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;track_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_playlist_track[playlist_id], index_track)
    ...
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And so on, until we have found a valid value for every variable, at which point we can emit a result row.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f07171;&quot;&gt;push!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(results_track_name, track_name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(results_artist_name, artist_name)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, the &lt;code&gt;Relation&lt;&#x2F;code&gt; constructor sorts the results columns and removes duplicate entries.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((results_track_name, results_artist_name,))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty simple so far. All of the magic happens in &lt;code&gt;intersect&lt;&#x2F;code&gt;. Here is a simplified version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;column_a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;column_b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  ix_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ix_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ix_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(column_a)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return
    end
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;column_a[ix_a]
    ix_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gallop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(column_b, ix_b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, value_a)
    value_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;column_b[ix_b]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value_b
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value_a
      ix_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gallop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(column_a, ix_a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, value_a)
      ix_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gallop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(column_b, ix_b, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, value_b)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ix_a, ix_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ix_b, ix_a
      column_a, column_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;column_b, column_a
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At each step, we take the current value in one column and search (using a variant of binary search) for the first equal-or-greater value in the other column. If we find an equal value, we yield that value and skip ahead in both columns. If we find a greater value, we swap the two columns and go back to the start of the loop.&lt;&#x2F;p&gt;
&lt;p&gt;This has the useful property of adapting to the distribution of the data, running in &lt;code&gt;O(min_length(columns) log max_length(columns))&lt;&#x2F;code&gt; time for any number of columns.&lt;&#x2F;p&gt;
&lt;p&gt;(There are &lt;a href=&quot;http:&#x2F;&#x2F;www.frankmcsherry.org&#x2F;dataflow&#x2F;relational&#x2F;join&#x2F;2015&#x2F;04&#x2F;11&#x2F;genericjoin.html&quot;&gt;simpler ways&lt;&#x2F;a&gt; to achieve this, but they require more complexity in the index - either removing duplicate keys in each column or adding extra metadata to count them.)&lt;&#x2F;p&gt;
&lt;p&gt;We can add user-defined functions and filters by inserting the quoted code into the appropriate place in the search.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(x)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(x)
  y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@when x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;quux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(y, z)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (x, y, z)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_foo, index_bar)
  y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(index_quux[y])
      ...
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  end
end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly, we can aggregate using normal Julia functions, and use nested queries to group results.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;playlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p, pn)
  tracks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;@query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;begin
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;playlist_track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(p, t)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(t, _, _, _, _, _, _, _, price)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Int64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, price&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Float64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(tracks[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (pn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Float64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All of this leads to a simple mental model for performance. The total amount of memory allocated by a query is proportional to the number of results (plus the size of the indexes, the first time they are built). The total runtime is, to a first approximation, proportional to the total number of times each loop is reached.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;queries-in-practice&quot;&gt;Queries (in practice)&lt;&#x2F;h2&gt;
&lt;p&gt;That&#x27;s the basic idea, but efficiently implementing this is a little more complicated in practice.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, in the example above, every loop begins by looking up values that were just found in the preceding loops. In the actual implementation, the intersect function returns not only the values but the ranges at which those values were found, so that we don&#x27;t have to repeat that work:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (playlist_id, range_playlist, range_playlist_track) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((playlist, platlist_track), (range_playlist, range_playlist_track))
  ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Secondly, in many queries it&#x27;s possible to skip some results. For example in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(...)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(...)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(...)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(results_x, x)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we find one valid set of values for &lt;code&gt;x,y,z&lt;&#x2F;code&gt;, finding other sets of values with the same &lt;code&gt;x&lt;&#x2F;code&gt; is just wasted work, so we might as well skip directly to finding the next &lt;code&gt;x&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;xs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(...)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(...)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;intersect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(...)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(results_x, x)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;continue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;xs
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
  end
end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lastly, while it&#x27;s possible to generate code more or less as presented, we again run afoul of the current unboxing limitations in Julia. Rather than generating elegant code and bearing the cache pressure of allocating on each loop iteration I instead generate, well, this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;jamii&#x2F;a23433c52265e975417b0a2eee4c7c8e&quot;&gt;&lt;img src=&quot;&#x2F;img&#x2F;imp-codegen.png&quot; alt=&quot;Generated code&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not even ashamed.&lt;&#x2F;p&gt;
&lt;p&gt;Essentially, this is what you get if you take the pretty code we had before and manually inline all the functions, data-structures and expensive control-flow. It&#x27;s not pretty, but it works and it was easy to implement. Hopefully it won&#x27;t be long before Julia improves to the point that I can write the pretty version without sacrificing performance.&lt;&#x2F;p&gt;
&lt;p&gt;However, even the the current version in all its grotesque splendor is only &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;d27ab3fed056e6d551a58fa3525a8ed1a11c98c5&#x2F;src&#x2F;Query.jl#L7-L357&quot;&gt;350 lines&lt;&#x2F;a&gt;, including parsing and planning.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;planning&quot;&gt;Planning&lt;&#x2F;h2&gt;
&lt;p&gt;Earlier we assumed the query compiler was given an order in which to explore the variables.&lt;&#x2F;p&gt;
&lt;p&gt;Different variable orderings can produce vastly different performance. The example query started at &lt;code&gt;playlist_id&lt;&#x2F;code&gt; and finished at &lt;code&gt;artist_name&lt;&#x2F;code&gt;. If it had instead started at &lt;code&gt;artist_name&lt;&#x2F;code&gt; and finished at &lt;code&gt;playlist_id&lt;&#x2F;code&gt; it would have enumerated every single artist-track-album-playlist combination before filtering the results down to the heavy metal playlist. That would be a disaster.&lt;&#x2F;p&gt;
&lt;p&gt;Traditional OLTP databases employ &lt;a href=&quot;http:&#x2F;&#x2F;www.neilconway.org&#x2F;talks&#x2F;optimizer&#x2F;optimizer.pdf&quot;&gt;complex heuristic query planners&lt;&#x2F;a&gt; which use statistical summaries of the database to estimate the costs of various possible query plans. Making these reliable requires many programmer-years of careful tuning and even then they still occasionally fumble an &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;cs286&#x2F;papers&#x2F;queryopt-sigmodblog2014.pdf&quot;&gt;order of magnitude or seven&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Even if I was capable of building such a planner by myself, I would have to sacrifice my goal of &lt;em&gt;predictable&lt;&#x2F;em&gt; performance.&lt;&#x2F;p&gt;
&lt;p&gt;So I have employed a cunning solution to the problem of automatic query planning - I don&#x27;t do it.&lt;&#x2F;p&gt;
&lt;p&gt;Using Leapfrog Triejoin (or any of its &lt;a href=&quot;https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1504.04044&quot;&gt;many&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;dl.acm.org&#x2F;citation.cfm?id=2764946&quot;&gt;cousins&lt;&#x2F;a&gt;) reduces the entire planning problem to choosing the variable ordering. This is a much simpler problem than the trees of operators used in most databases, which means that finding a reasonable solution by hand becomes feasible. (And &#x27;reasonable&#x27; is definitely the goal - I don&#x27;t mind not finding the best possible ordering and so long as I can avoid the 7-orders-of-magnitude disasters.)&lt;&#x2F;p&gt;
&lt;p&gt;So Imp simply searches the variables in the order they are first mentioned.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;playlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_id, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Heavy Metal Classic&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;playlist_track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_id, track_id)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(track_id, track_name, album_id)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(album_id, _, artist_id)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(artist_id, artist_name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (track_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, artist_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# becomes...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;constant_1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Heavy Metal Classic&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;playlist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_id, constant_1)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;playlist_track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(playlist_id, track_id)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;track&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(track_id, track_name, album_id)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(album_id, _, artist_id)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;artist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(artist_id, artist_name)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; (track_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, artist_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,)

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# which is ordered...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;constant_1
playlist_id
track_id
track_name
album_id
artist_id
artist_name
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The programmer can change the variable ordering by reordering the lines of the query. Reordering the lines can only change the performance of the query, not the results, so we still have a clean separation between the query logic and the execution plan, and it&#x27;s still much less work than writing out the imperative code by hand.&lt;&#x2F;p&gt;
&lt;p&gt;This preserves the simple mental model and doesn&#x27;t require much more work than writing the query in the first place. But how well does it work in practice?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;&#x2F;h2&gt;
&lt;p&gt;I translated 112 queries from the &lt;a href=&quot;http:&#x2F;&#x2F;www.vldb.org&#x2F;pvldb&#x2F;vol9&#x2F;p204-leis.pdf&quot;&gt;Join Order Benchmark&lt;&#x2F;a&gt; into Imp and benchmarked them against Postgres.&lt;&#x2F;p&gt;
&lt;p&gt;This is in no way intended to be a direct comparison to Postgres - the two systems are so wildly different on pretty much every axis. Instead, I&#x27;m using Postgres as the bar for &#x27;fast enough&#x27;. If Imp can keep up with Postgres on a real dataset then it&#x27;s fast enough to be interesting.&lt;&#x2F;p&gt;
&lt;p&gt;These queries in the benchark test complex joins with many constraints, but do not test aggregation or subqueries. They run against the &lt;a href=&quot;http:&#x2F;&#x2F;www.imdb.com&#x2F;interfaces&quot;&gt;IMDB dataset&lt;&#x2F;a&gt; which contains 3.7GB of data across 74m rows. As the paper demonstrates, planning queries on a real-world dataset like this one is much more challenging then the synthetic datasets used by &lt;a href=&quot;http:&#x2F;&#x2F;www.tpc.org&#x2F;&quot;&gt;TPC&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I wrote each Imp query based only on knowing the sizes of the two largest tables (cast_info at 36m rows and movie_info at 15m rows) and common-sense deductions based on the table names. The translation process was mostly mechanical - put a variable that looks like it has high selectivity near the top and walk through the joins from there. I only made one attempt at each query, so this is testing how well I choose variable orderings without feedback.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll spare you the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;master&#x2F;examples&#x2F;Job.md&quot;&gt;full protocol&lt;&#x2F;a&gt; (but please do read it &lt;em&gt;before&lt;&#x2F;em&gt; criticizing the results) and skip straight to the pretty pictures.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.google.com&#x2F;spreadsheets&#x2F;d&#x2F;1X3kBUYrTZSBfUPzJ2DLtdjp97rcPBE-AKner5KUzScc&#x2F;edit?usp=sharing&quot;&gt;&lt;img src=&quot;&#x2F;img&#x2F;job-graph.png&quot; alt=&quot;Bar chart of results&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The vast majority of queries are between 10x slower and 10x faster, putting Imp squarely in the &#x27;fast enough&#x27; range.&lt;&#x2F;p&gt;
&lt;p&gt;There are a few outliers where Imp is up to 867x faster. The worst of them is &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;jamii&#x2F;c36a0036503be18834a2127ba4e2e02c&quot;&gt;29a&lt;&#x2F;a&gt;, whose &lt;a href=&quot;https:&#x2F;&#x2F;explain.depesz.com&#x2F;s&#x2F;R628&quot;&gt;plan&lt;&#x2F;a&gt; underestimates the number of rows by 4890x. Despite their claims to innocence, it&#x27;s pretty clear the author deliberately crafted this query to confuse Postgres with cross-constraint correlations. While many of the queries contain correlations that might realistically come up (eg &lt;code&gt;company.country_code = &#x27;[jp]&#x27;&lt;&#x2F;code&gt; and &lt;code&gt;name.name like &#x27;%Yu%&#x27;&lt;&#x2F;code&gt;) but the worst outliers have silly redundant constraints (eg &lt;code&gt;title.title = &#x27;Shrek 2&#x27;&lt;&#x2F;code&gt; and &lt;code&gt;keyword.keyword = &#x27;computer-animation&#x27;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Memory usage for Imp during the benchmarks is around 16GB. The dataset is only 3.7GB on disk and overhead of the indexes doesn&#x27;t account for more than a few GB. I haven&#x27;t run a memory profiler yet, but I suspect it&#x27;s caused by string allocation overhead and memory fragmentation (Julia doesn&#x27;t have a compacting collector). The natural way to fix this would be to concatenate each column into a single string and store an array of indexes into that string, but boxing rears its ugly head again when we try to return substrings. A problem for another day.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s missing from this experiment is an understanding of how the different design choices contribute to the results. It seems likely that Imp has a large constant-factor performance advantage due to the lack of IO and concurrency overheads. It also seems likely that I&#x27;m undoing most of that advantage by choosing sub-optimal plans. But without a more controlled experiment it&#x27;s just speculation. A useful follow-up would be to extract variable orderings from &lt;a href=&quot;http:&#x2F;&#x2F;www.logicblox.com&#x2F;&quot;&gt;LogicBlox&lt;&#x2F;a&gt;, which uses the same join algorithm, and run them in Imp to see how much performance a commercial-quality planner buys.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;There are three things that I think are worth taking away from this experiment:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Julia is &lt;em&gt;almost&lt;&#x2F;em&gt; a fantastic language for &lt;a href=&quot;http:&#x2F;&#x2F;drops.dagstuhl.de&#x2F;opus&#x2F;volltexte&#x2F;2015&#x2F;5029&#x2F;pdf&#x2F;19.pdf&quot;&gt;generative programming&lt;&#x2F;a&gt;. The combination of a dynamic language, multiple dispatch, quasi-quoting, macros, eval and &lt;a href=&quot;http:&#x2F;&#x2F;docs.julialang.org&#x2F;en&#x2F;release-0.5&#x2F;manual&#x2F;metaprogramming&#x2F;#generated-functions&quot;&gt;generated functions&lt;&#x2F;a&gt; with &lt;em&gt;predictable&lt;&#x2F;em&gt; type-inference and specialization is killer. But in almost every part of Imp there was an elegant, efficient, extensible design that &lt;em&gt;would&lt;&#x2F;em&gt; work if the support for unboxing was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JuliaLang&#x2F;julia&#x2F;pull&#x2F;18632&quot;&gt;as complete as the Julia team wants it to be&lt;&#x2F;a&gt;. It&#x27;s so nearly there.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The recent wave of worst-case-optimal join algorithms are really easy to implement with code generation and this lowers the bar for writing a query compiler. LegoBase and co already demonstrated the power of staging, but if you don&#x27;t already have a fancy staging compiler for your favorite language you don&#x27;t have to wait - Imp&#x27;s query compiler could be directly translated into pretty much any language, either as a macro or as a preprocessor pass.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Automatic query planning might not be essential for every use-case. It certainly makes sense for interactive usage, and for cases where you are splicing user input into a query. But in cases where the queries are fixed and you have a rough idea of what the data looks like, it&#x27;s possible to gain many of the benefits of a query compiler without the opacity of a full query planner.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I have a plenty more ideas for the query compiler and language, but I think for the next month or two I&#x27;m going to switch focus to the other side of Imp - building interactive GUIs on top of relations and views.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Lindsey Kuper and Joe Edelman for comments, and to Michael Malis for advice on tuning Postgres.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rationally choosing a life: part II</title>
                <pubDate>Fri, 20 May 2016 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/rationally-choosing-a-life-part-ii/</link>
                <guid>http%3A//scattered-thoughts.net/writing/rationally-choosing-a-life-part-ii/</guid>
                <description>&lt;p&gt;Four months ago I &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;rationally-choosing-a-life&#x2F;&quot;&gt;wrote an article&lt;&#x2F;a&gt; on the process of deciding what to do with my life. I promised an update in two months and then lay back and listened to the famed whooshing noise the deadline made as it rushed past.&lt;&#x2F;p&gt;
&lt;p&gt;Amazingly, complete strangers have been emailing me every week since to ask where the update is. I&#x27;m not sure whether the ideas struck a chord, or whether I just pulled the blog equivalent of going into a bookstore and ripping the last pages out of all the detective novels.&lt;&#x2F;p&gt;
&lt;p&gt;Either way, here are some things that happened:&lt;&#x2F;p&gt;
&lt;p&gt;I spent two months in London. Much of that time was spent looking at various companies, labs, jobs and courses online. I bookmarked 49 companies and 13 schools and contacted none of them. I realize after the fact that I procrastinated on the next steps because deep down inside I&#x27;m some kind of feral man-ape that can&#x27;t even handle committing to a single country, let alone showing up at an office at the same time every morning. More on that later.&lt;&#x2F;p&gt;
&lt;p&gt;I did apply for &lt;a href=&quot;http:&#x2F;&#x2F;www.ucl.ac.uk&#x2F;pals&#x2F;study&#x2F;masters&#x2F;TMSPSYSCDS01&quot;&gt;Cognitive and Decision Sciences&lt;&#x2F;a&gt; at UCL. The rolling application process filled all the places before they even reached my application, but a few months later they looked at it and liked it enough to offer me a place in advance for fall 2017. I don&#x27;t have to make a decision until October, but I&#x27;m leaning towards saying no simply because the gap between the decision point and the actual start of the course is so long. I don&#x27;t want to commit to something and then sit around twiddling my thumbs for 12 months.&lt;&#x2F;p&gt;
&lt;p&gt;I was staying with a friend in Beijing when I wrote the last post and I spent my last week there mostly reading, climbing and eating ridiculous amounts of food. I read 9 books that week, and also started a habit of publishing notes. I&#x27;m surprised at how many people seem to find those notes valuable, far more so than the blog posts where I try to communicate ideas that &lt;em&gt;I&lt;&#x2F;em&gt; think are valuable and&#x2F;or novel. I&#x27;ve also ended up referring back to the notes myself multiple times, especially when trying to dig up citations.&lt;&#x2F;p&gt;
&lt;p&gt;I spent a week in Budapest with another friend where, thanks to forgetting to pack a phone charger, I was offline for the entire week. This was such a pleasant experience that I&#x27;ve since brutally cut down my online activity. (RescueTime confirms that I&#x27;ve consistently stuck to this for two months.) The biggest change was learning to recognize the feeling of craving distraction and closing my laptop&#x2F;phone in response.&lt;&#x2F;p&gt;
&lt;p&gt;I spent two weeks in NYC for the &#x27;Tools for Thought&#x27; workshop. I was really unsatisfied with the talk I gave but the workshop was otherwise fantastic and I got to meet some amazing people. I don&#x27;t like the city itself though, and I spent a lot of the time there fretting about how much money I was spending without any idea yet of where the next paycheck is going to come from.&lt;&#x2F;p&gt;
&lt;p&gt;I visited Berlin for a week. I met lots of interesting people and wandered into many interesting nooks and crannies, and decided to live here. The quality and cost of living are amazing for such a vibrant international city and the tech scene has more artists and anarchists than startup cultists.&lt;&#x2F;p&gt;
&lt;p&gt;I took an intensive German course in the first month. Contrary to literally every single thing I&#x27;ve heard about it, German is a delight. There are a lot of tables to memorize but it&#x27;s complicated, not hard, and after that you get to play with the non-linear grammar and compound words, which tickle my brain delightfully. My favorite word so far is &lt;a href=&quot;https:&#x2F;&#x2F;de.wikipedia.org&#x2F;wiki&#x2F;Betriebsblindheit&quot;&gt;Betriebsblindheit&lt;&#x2F;a&gt; - the state of being blinded by routine.&lt;&#x2F;p&gt;
&lt;p&gt;I also spent six weeks on a consulting contract that is not really working out, in part because of the aforementioned feral man-ape thing. Let&#x27;s talk about that some more.&lt;&#x2F;p&gt;
&lt;p&gt;I have a really strong visceral reaction to obligations, such as having to be in a specific country at 9am every morning. This affects me to the extent that being obliged to do something that I already wanted to do can be enough to make me revolt, flip the table over, sell everything I own and move to Germany.&lt;&#x2F;p&gt;
&lt;p&gt;People have a tendency to tell me that this is just the way the world works and I had better get used to it, to which I tend to reply that this is the way &lt;em&gt;your&lt;&#x2F;em&gt; world works and I didn&#x27;t vote for it.&lt;&#x2F;p&gt;
&lt;p&gt;I think there is a trick to dealing with this. There are essentially two ways to make money:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Hey, I want that thing you made, here is some money&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;&amp;quot;Hey, I want you to make this thing, here is some money&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Most of the things that bother me come about because of the second option. As soon as someone starts giving me money in advance I suddennly feel obliged to keep doing whatever it is that they wanted me to do, which means that I no longer want to do it.&lt;&#x2F;p&gt;
&lt;p&gt;The first option seems to be much better. There is still a degree of accountability, but it&#x27;s much more delayed. If I decide to dedicate all my time to adding cat pictures to my work, people may well stop giving me money. But they can&#x27;t insist that because they are giving me money I can&#x27;t decide to dedicate all my time to adding cat pictures to my work. The obligation is asserted through my bank account rather than through managerial permission and that somehow makes it better. If that doesn&#x27;t make sense, it&#x27;s probably because I&#x27;m a feral man-ape and you&#x27;re thinking in econ. I&#x27;m not supposed to make sense.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a brief empirical detour and look at things that made me happy in the last year. I noticed recently that all the highlights were holidays. That&#x27;s not surprising in itself, but what is surprising is that those same holidays were also much more productive that the surrounding time. What seems to happen is that most of the year I sit around at home in front of my laptop, refreshing hacker news and beating myself up about not being productive. When I&#x27;m on holiday, I give myself permission to do whatever I feel like doing, and occasionally I feel like reading a book or writing some code. And because I don&#x27;t &lt;em&gt;have&lt;&#x2F;em&gt; to do those things, and because there are plenty of guilt-free holiday alternatives, I don&#x27;t procrastinate at all.&lt;&#x2F;p&gt;
&lt;p&gt;So if I decide that I&#x27;m going to embark on a grand project to make a thing that people will give me money for, the most likely outcome is that I will sit around beating myself up about not doing that.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I&#x27;m going to take a long holiday. I transferred some of my savings to my freshly opened &lt;a href=&quot;https:&#x2F;&#x2F;number26.eu&#x2F;&quot;&gt;hi-tech German bank account&lt;&#x2F;a&gt; - enough to live on for 3-6 months, depending on how thrifty I am. During that time I&#x27;m going to wake up each morning and spend the day doing whatever I feel like doing.&lt;&#x2F;p&gt;
&lt;p&gt;The reason that this is a good plan is that when the money comes to an end and I look back at what I did with the summer, I&#x27;d be pretty happy if I spent the summer climbing, or reading, or coding, or learning to juggle, or pretty much anything except for:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Wasting time on the internet&lt;&#x2F;li&gt;
&lt;li&gt;Beating myself up about not being productive&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;But I seem to have got a handle on 1 lately, and 2 is not a problem because I&#x27;m on holiday. It may turn out that I do something interesting that leads to people giving me money, but I&#x27;m very explicitly not relying on or planning for that. I&#x27;m just going to do things I enjoy while I have money because that&#x27;s the whole point of having money in the first place, and it completely defies the point if I waste all my money on worrying about how to get more money.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Rationally choosing a life: part I</title>
                <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/rationally-choosing-a-life/</link>
                <guid>http%3A//scattered-thoughts.net/writing/rationally-choosing-a-life/</guid>
                <description>&lt;p&gt;Having made myself unemployed and uprooted, I now need to make some decisions about what to do next. Since I spent much of the last two years reading about bias and rationality, it makes sense to try to apply what I&#x27;ve learned to this decision.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m publishing this because I&#x27;ve seen very few concrete examples of in-the-wild rational decision making. I don&#x27;t particularly expect this to be a shining example of such, but it is at least &lt;em&gt;an&lt;&#x2F;em&gt; example :)&lt;&#x2F;p&gt;
&lt;p&gt;The inputs to a rational decision are terminal goals. Rationality has nothing to say about what those goals should be, only how to effectively pursue them. My goals are to be happy, excited and useful.&lt;&#x2F;p&gt;
&lt;p&gt;To make a good decision I have to explore the search space, make predictions about the outcome of each option, evaluate how well that outcome matches my goals and then pick the best outcome. So, the likely reasons for making poor decisions are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Over-narrow search space (eg took me a good while to realize that I don&#x27;t have to be a programmer forever)&lt;&#x2F;li&gt;
&lt;li&gt;Poor predictions of outcomes (eg imagining freedom of being a student but not imagining being poor, paper-submission grind, losing interest in the subject)&lt;&#x2F;li&gt;
&lt;li&gt;Poor evaluation of outcomes (eg &lt;a href=&quot;http:&#x2F;&#x2F;smile.amazon.com&#x2F;Stumbling-Happiness-Daniel-Gilbert&#x2F;dp&#x2F;1400077427&#x2F;&quot;&gt;poor understanding of happiness&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Stopping too early (eg because of desire for certainty, or being overwhelmed by choice)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How can I protect against these mistakes?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poor-evaluation-of-outcomes&quot;&gt;Poor evaluation of outcomes&lt;&#x2F;h2&gt;
&lt;p&gt;Specific reasons I can recall for making poor evaluations of outcomes are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Over-weighting unimportant concerns (eg was very resistant to moving to US because I dislike the politics, but this had barely any impact on my day-to-day life)&lt;&#x2F;li&gt;
&lt;li&gt;Under-weighting or forgetting important concerns (eg once took an exciting job that required living in a remote town with a two hour journey to meet friends)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To correct these, I need to figure out what concerns are important ahead of time.&lt;&#x2F;p&gt;
&lt;p&gt;Inside view: in what circumstances have I been happy in the past? This is easily distorted by individual strong memories, so I broke it down into roughly 6 month periods and for each period tried to recall several typical work days, several typical weekends and who I regularly spent time with. It&#x27;s pretty personal, so I won&#x27;t include the details here, but once I wrote it all down there were some clear patterns, some of which surprised me:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Excitement was predicted by &lt;a href=&quot;http:&#x2F;&#x2F;malcolmocean.com&#x2F;2015&#x2F;04&#x2F;decide-to-make-things-happen&#x2F;&quot;&gt;sense of agency&lt;&#x2F;a&gt;. Not clear why I have periods of high and low agency or in which direction the causality lies, but making choices that restrict my perceived agency (eg living on a visa) is probably risky.&lt;&#x2F;li&gt;
&lt;li&gt;Happiness was predicted by friendships with excited and agenty people. Occasionally those are people I work with, but more often not.&lt;&#x2F;li&gt;
&lt;li&gt;Skillful exercise seems to be important for happiness. I don&#x27;t have a good handle on how exactly to explain this - something like a physical equivalent of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Need_for_cognition&quot;&gt;need for cognition&lt;&#x2F;a&gt; - I need to move. Gyms and most sports do not satisfy this need. Climbing and parkour both do.&lt;&#x2F;li&gt;
&lt;li&gt;The reason I have left &lt;em&gt;every job&lt;&#x2F;em&gt; is frustration with &lt;a href=&quot;http:&#x2F;&#x2F;io9.gizmodo.com&#x2F;a-test-to-measure-how-rational-you-really-are-609412488&quot;&gt;instrumentally irrational&lt;&#x2F;a&gt; strategic decisions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Outside view. What does pysch research have to say?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Basic needs - healthy, no financial worries, low environmental stress (eg quiet enough to sleep well)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;smile.amazon.com&#x2F;Stumbling-Happiness-Daniel-Gilbert&#x2F;dp&#x2F;1400077427&#x2F;&quot;&gt;Quality of close social relationships is the best predictor of happiness once basic needs are met&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;smile.amazon.com&#x2F;Drive-Surprising-Truth-About-Motivates-ebook&#x2F;dp&#x2F;B004P1JDJO&quot;&gt;Motivation is determined largely by autonomy, mastery and purpose&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So far I had mostly been thinking about what kind of work I want to do, but this suggests that it is at least as important to figure out how to maximize my chances of making good friends and collaborators. I notice that almost all my close friends came from repeated meetings within some not-purely-social framework (eg work, climbing, RC alumni) so it&#x27;s worth focusing on those.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poor-predictions-of-outcomes&quot;&gt;Poor predictions of outcomes&lt;&#x2F;h2&gt;
&lt;p&gt;Specific reasons I can recall making poor predictions about similar situations in the past:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Believing self-reports (especially in interviews)&lt;&#x2F;li&gt;
&lt;li&gt;Focusing on the stereotypical outcome rather than the likely outcome (eg working in a game studio was mostly tedious debugging of stupid engine bugs)&lt;&#x2F;li&gt;
&lt;li&gt;Over-weighting inside view (eg this project is bound to succeed! ...even though vast majority of similar projects have failed in the past)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.ncbi.nlm.nih.gov&#x2F;pmc&#x2F;articles&#x2F;PMC4358847&#x2F;&quot;&gt;Making decisions while hot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The last can be avoided by pre-committing to not making a decision until some set point in time.&lt;&#x2F;p&gt;
&lt;p&gt;The first three, and many other mistakes like them, are examples of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Attribute_substitution&quot;&gt;attribute substitution&lt;&#x2F;a&gt;. One way to combat this is to follow an &lt;a href=&quot;https:&#x2F;&#x2F;woodlawnassociates.com&#x2F;superiority-of-algorithms-in-personnel-selection&#x2F;&quot;&gt;explicit, external process&lt;&#x2F;a&gt;. For each value that I&#x27;ve decided is important I&#x27;ve come up with a short list of questions.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Environment&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Is the city pleasant to be in?&lt;&#x2F;li&gt;
&lt;li&gt;Is there good public transport?&lt;&#x2F;li&gt;
&lt;li&gt;Is there easy access to nature?&lt;&#x2F;li&gt;
&lt;li&gt;Is the weather good? (impact of weather on happiness is &lt;a href=&quot;http:&#x2F;&#x2F;pss.sagepub.com&#x2F;content&#x2F;9&#x2F;5&#x2F;340.abstract&quot;&gt;probably over-weighted&lt;&#x2F;a&gt; in general, but bad weather is an obstacle to climbing and parkour)&lt;&#x2F;li&gt;
&lt;li&gt;Can I afford to live comfortably?&lt;&#x2F;li&gt;
&lt;li&gt;Will I have to commute? (impact of commutes on happiness is &lt;a href=&quot;http:&#x2F;&#x2F;www.timeout.com&#x2F;london&#x2F;blog&#x2F;a-short-commute-makes-londoners-happier-than-sex-081815&quot;&gt;heavily under-weighted&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Culture&lt;&#x2F;strong&gt; (specifically the density of the kinds of people I want to meet)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What kind of people&#x2F;lifestyles are accepted&#x2F;respected? (eg SF bipolar attitude to startups, HK weights high-status jobs)&lt;&#x2F;li&gt;
&lt;li&gt;What are the main industries?&lt;&#x2F;li&gt;
&lt;li&gt;Are there good universities &#x2F; research groups in the area?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Communities&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do I already know people in the area?&lt;&#x2F;li&gt;
&lt;li&gt;Is there an active climbing&#x2F;parkour&#x2F;rationality&#x2F;tech community?&lt;&#x2F;li&gt;
&lt;li&gt;Does it attract many RC alumni?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Mastery&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What opportunities would I have to learn new subjects outside of software?&lt;&#x2F;li&gt;
&lt;li&gt;Who would I be learning from? (eg is there any mentoring&#x2F;training?)&lt;&#x2F;li&gt;
&lt;li&gt;How masterful are the people I would be working with?&lt;&#x2F;li&gt;
&lt;li&gt;How much time would I be actively devoting to learning? (eg via experiments, classes or training vs just learning on the job)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Autonomy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How much choice would I have in what to work on? (eg do I need permission to switch projects, or to start a new project?)&lt;&#x2F;li&gt;
&lt;li&gt;How much power would I have to make important decisions?&lt;&#x2F;li&gt;
&lt;li&gt;How much would I be judged on results over process? (eg can I go home early if I&#x27;m not productive? can I take a walk in the park to think during work hours?)&lt;&#x2F;li&gt;
&lt;li&gt;How often would I be able to take time off to travel?&lt;&#x2F;li&gt;
&lt;li&gt;How much free time would I have for personal projects?&lt;&#x2F;li&gt;
&lt;li&gt;How flexible are the hours?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Purpose&lt;&#x2F;strong&gt; (and rationality)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What is the goal is this work?&lt;&#x2F;li&gt;
&lt;li&gt;What are the odds of success?&lt;&#x2F;li&gt;
&lt;li&gt;How is progress towards the goal being measured? (ie how do you know if this working?)&lt;&#x2F;li&gt;
&lt;li&gt;What is the process for making decisions towards that goal? (eg is it based on evidence? is there any attempt to avoid bias?)&lt;&#x2F;li&gt;
&lt;li&gt;Are there pressures towards &#x2F; risks of instrumentally irrational decisions? (eg publish-or-perish, pointy-haired boss)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When answering these, I want to focus on the &lt;a href=&quot;http:&#x2F;&#x2F;www.mckinsey.com&#x2F;insights&#x2F;strategy&#x2F;daniel_kahneman_beware_the_inside_view&quot;&gt;outside view&lt;&#x2F;a&gt; and limit the impact of &lt;a href=&quot;http:&#x2F;&#x2F;www.sciencebrainwaves.com&#x2F;the-dangers-of-self-report&#x2F;&quot;&gt;self-reporting&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.researchgate.net&#x2F;publication&#x2F;264332643&quot;&gt;motivated recall&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Reference_group&quot;&gt;reference group effects&lt;&#x2F;a&gt;. For example, rather than asking &#x27;do people get to choose their own projects&#x27; I could ask &#x27;of the people I met today, which of them are currently working on a project that they chose&#x27;. In theory this will lead to more accurate answers.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not going to attempt to make some kind of scoring system - I&#x27;m using this structure mainly to ensure that I actually pay attention to all of the important areas.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;over-narrow-search-space&quot;&gt;Over-narrow search space&lt;&#x2F;h2&gt;
&lt;p&gt;The search space has to be narrowed to be tractable, but I need to be careful not to make unnecessary assumptions.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I am insistent on doing something that I believe to be useful. It doesn&#x27;t have to be world-changing, just not taking part in a zero-sum game or being actively harmful. (I am willing to trade spending some of my time playing a zero-sum game (eg trading) if it helps with spending the remaining time usefully).&lt;&#x2F;li&gt;
&lt;li&gt;I need exposure to fresh ideas and problems. I could afford to live in a cheap country for years without working, but I wouldn&#x27;t do anything worthwhile in isolation.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve never managed to build a healthy social life when living in a non-english-speaking country, nor while living nomadically, so those are out.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m wary of the loss of agency and certainty that comes from living on a visa - I won&#x27;t rule it out entirely but I will focus my attention on options in the EU.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To avoid succumbing to inertia I need to actively investigate choices that are completely different from what I&#x27;ve done in the past.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I could get a full-time or part-time job, go to school, go back to consulting, start a business etc.&lt;&#x2F;li&gt;
&lt;li&gt;Learning to program is a sunk cost. The fact that I have that skill opens certain options and affects my chances of success in others, but I shouldn&#x27;t be biased towards choices that involve programming just to justify the time invested.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So the search space is something useful, in an english-speaking area, most likely in the EU. Now I need to generate ideas.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I will reach out to existing contacts for ideas, and also encourage anyone reading this to &lt;a href=&quot;mailto:jamie@scattered-thoughts.net&quot;&gt;contact me&lt;&#x2F;a&gt; with ideas.&lt;&#x2F;li&gt;
&lt;li&gt;For tech companies, I&#x27;ll talk to some of the more effective recruiters, especially &lt;a href=&quot;http:&#x2F;&#x2F;recurse.com&#x2F;&quot;&gt;RC&lt;&#x2F;a&gt;. I can also look at news, journals, conferences, meetups etc to make a list of companies worth investigating.&lt;&#x2F;li&gt;
&lt;li&gt;For jobs outside of tech, even programming jobs at non-tech-focused companies, I have much less idea how to proceed. Most job listing sites are awful and I don&#x27;t have a good idea of what kind of non-programming jobs I could work towards. &lt;a href=&quot;https:&#x2F;&#x2F;80000hours.org&#x2F;career-guide&#x2F;profiles&#x2F;&quot;&gt;80000 hours&lt;&#x2F;a&gt; doesn&#x27;t push me in any new directions.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ll list major US&#x2F;EU universities and skim the list of research groups in each. If any are particularly interesting I&#x27;ll try to contact someone already working there and find out more, and visit the department if possible.&lt;&#x2F;li&gt;
&lt;li&gt;Both consulting and starting a business alone are likely to be fairly isolating. Working with a small group could work. I&#x27;ll raise the idea with a few people and see if any promising ideas emerge.&lt;&#x2F;li&gt;
&lt;li&gt;I have some tentative ideas for research projects which might have a good effort-reward trade-off and don&#x27;t fit well into academia or industry. I will flesh out a couple of them to consider in combination with part-time work. I can also search for companies which do related work.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Having an &lt;a href=&quot;http:&#x2F;&#x2F;web.stanford.edu&#x2F;class&#x2F;cee320&#x2F;CEE320A&#x2F;POD.pdf&quot;&gt;explicit process for exploring options&lt;&#x2F;a&gt; prevents &lt;a href=&quot;http:&#x2F;&#x2F;lesswrong.com&#x2F;lw&#x2F;km&#x2F;motivated_stopping_and_motivated_continuation&#x2F;&quot;&gt;motivated stopping&lt;&#x2F;a&gt; and helps expose potential gaps, such as the fact that I don&#x27;t have a starting point for finding out what non-tech jobs are open to me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;stopping-too-early&quot;&gt;Stopping too early&lt;&#x2F;h2&gt;
&lt;p&gt;The easiest to solve - I will publicly pre-commit to not making a decision until March 26th at the earliest. During that time I will continue to actively generate ideas, meet new people and visit companies&#x2F;labs even if I already have a compelling option. (Some companies&#x2F;universities might demand a decision sooner, but given the wealth of choices I think the risk of making a hasty decision outweighs the risk of exploding an offer).&lt;&#x2F;p&gt;
&lt;p&gt;On March 26th I&#x27;ll post a condensed description of the process and any decision I may have reached.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>After Eve</title>
                <pubDate>Sun, 17 Jan 2016 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/after-eve/</link>
                <guid>http%3A//scattered-thoughts.net/writing/after-eve/</guid>
                <description>&lt;p&gt;I left &lt;a href=&quot;http:&#x2F;&#x2F;witheve.com&#x2F;&quot;&gt;Eve&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After being consumed for so long by a single project it&#x27;s hard to know what to do next. I&#x27;m sure that whatever thoughts I have right now are far too narrow and railroaded compared to the actual possibilities, so what follows is just thinking out loud.&lt;&#x2F;p&gt;
&lt;p&gt;Over the last two years I learned more than I ever expected to know about logic languages, relational databases and progressive systems, to the point of being able to do novel work in the field. Whether or not I use that knowledge again in future, it&#x27;s the first time I&#x27;ve reached that depth in any field. More importantly, it&#x27;s the first time I&#x27;ve properly come to grips with the idea that even relatively small investments of time&#x2F;effort&#x2F;organization can multiply into massive outcomes when steadily applied. One hour of reading per day for two years adds up to a lot of papers. I&#x27;m pretty excited to see what I could do with a more deliberate effort. (EDIT: My first deliberate effort is in progress &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;notes&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.)&lt;&#x2F;p&gt;
&lt;p&gt;I also learned a lot about managing research, mostly after being burned by my repeated mistakes. I&#x27;ve become much more reliant on empirical testing and on trying to falsify ideas early. I learned to keep a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;master&#x2F;diary.md&quot;&gt;project diary&lt;&#x2F;a&gt; to track what I&#x27;ve done, why I did it, how it turned out and how long I spent doing it. I learned to set concrete goals in advance and stop as soon as they are met rather than eagerly jump down every little rabbit hole.&lt;&#x2F;p&gt;
&lt;p&gt;On a parallel track, my programming has been heavily influenced &lt;a href=&quot;http:&#x2F;&#x2F;www.dataorienteddesign.com&#x2F;dodmain&#x2F;&quot;&gt;data-oriented&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;mollyrocket.com&#x2F;casey&#x2F;stream_0019.html&quot;&gt;compression-oriented&lt;&#x2F;a&gt; design and by a dawning &lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;forum&#x2F;#!forum&#x2F;mechanical-sympathy&quot;&gt;mechanical sympathy&lt;&#x2F;a&gt;, all of which place the emphasis on solving simply problems with machines, rather than &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;should-not&#x2F;&quot;&gt;allowing instrumental values to become terminal values&lt;&#x2F;a&gt;. I’ve also become much more willing and able to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;imp&#x2F;blob&#x2F;master&#x2F;diary.md#layout&quot;&gt;tear systems apart and read their entrails&lt;&#x2F;a&gt; rather than blindly trusting to hearsay or documentation.&lt;&#x2F;p&gt;
&lt;p&gt;Outside of work, I was surprised to notice how much I &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;jamii&#x2F;285f0c825cf2c70fe68d&quot;&gt;read&lt;&#x2F;a&gt; in the last year (largely due to buying a kindle) and how much of it revolved around rationality &#x2F; epistemology &#x2F; cognitive science. The combination of reading, experience and occasional exposure to some very effective people made me more epistemically cautious and more of a &lt;a href=&quot;http:&#x2F;&#x2F;longnow.org&#x2F;seminars&#x2F;02007&#x2F;jan&#x2F;26&#x2F;why-foxes-are-better-forecasters-than-hedgehogs&#x2F;&quot;&gt;fox&lt;&#x2F;a&gt;, which lead to some considerable frustration with the Silicon Valley culture.&lt;&#x2F;p&gt;
&lt;p&gt;The end result is that I&#x27;ve become much more confident in my ability to solve important problems, but much less convinced that I have any. Looking back at my career so far, I find that very little of the work I&#x27;ve done has created any lasting value (I hope Eve might be an exception, but it has a long way to go yet). Similarly, much of what I learned from being active in the tech community turned out to be noise, and the ideas that were useful and powerful largely came from &lt;a href=&quot;http:&#x2F;&#x2F;yosefk.com&#x2F;blog&#x2F;why-bad-scientific-code-beats-code-following-best-practices.html&quot;&gt;people who had real problems to solve&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;prog21.dadgum.com&#x2F;46.html&quot;&gt;only cared incidentally about the tech&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Inspired in part by Engelbart&#x27;s system of &lt;a href=&quot;http:&#x2F;&#x2F;www.almaden.ibm.com&#x2F;coevolution&#x2F;pdf&#x2F;engelbart_paper.pdf&quot;&gt;A) do the work B) improve the doing C) improve the improving&lt;&#x2F;a&gt;, I think the best way for me to pursue value is to switch fields entirely. I don&#x27;t even have an A right now - I need exposure to fresh problems.&lt;&#x2F;p&gt;
&lt;p&gt;My general interest is still in improving&#x2F;augmenting human intelligence. I saw and still see promise in the original Eve vision of tackling the &lt;a href=&quot;https:&#x2F;&#x2F;drive.google.com&#x2F;file&#x2F;d&#x2F;0Bxjbk6tMrOKQcXhKT1dIVkQ5ZVE&#x2F;view&quot;&gt;end-to-end ergonomics of programming&lt;&#x2F;a&gt;, but there are plenty of other avenues to pursue, technological and otherwise. Most of the improvements I&#x27;ve seen in my own effectiveness in the last few years have been from new mental tools rather than from software or biology.&lt;&#x2F;p&gt;
&lt;p&gt;The obvious choice of field is somewhere in the nexus around cognitive science &#x2F; decision science &#x2F; human error &#x2F; behavioral economics. In addition to being a fresh source of problems, it&#x27;s something that has captured my interest for years and also one of the more likely paths towards improving intelligence in it&#x27;s own right.&lt;&#x2F;p&gt;
&lt;p&gt;A reasonable attack would be to move back to London (quitting derailed my US visa) and pick up a part-time programming job to fund part-time study. Going back to school is not the only way to learn, but I think I would benefit from being surrounded by other students.&lt;&#x2F;p&gt;
&lt;p&gt;As for the job, part-time work is hard to find so I may not be able to be too picky. The ideal would be something that is producing immediate value rather than another moonshot. Being London, the most likely case is I end up in a hedge fund and content myself with &lt;a href=&quot;https:&#x2F;&#x2F;80000hours.org&#x2F;articles&#x2F;earning-to-give&#x2F;&quot;&gt;earning to give&lt;&#x2F;a&gt;. Being a programmer is pretty cushy.&lt;&#x2F;p&gt;
&lt;p&gt;This somewhat resembles a plan. As I said at the beginning though, I&#x27;m aware that there are probably good options that I haven&#x27;t even considered yet. If you have suggestions please don&#x27;t hesitate to &lt;a href=&quot;mailto:jamie@scattered-thoughts.net&quot;&gt;let me know&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Should not</title>
                <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/should-not/</link>
                <guid>http%3A//scattered-thoughts.net/writing/should-not/</guid>
                <description>&lt;blockquote&gt;
&lt;p&gt;modal verb (3rd sing. should)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Used to indicate obligation, duty, or correctness, typically when criticizing someone’s actions&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Should&lt;&#x2F;strong&gt; is a dangerous word. You should break up large functions. You should separate concerns. You should remove repetition. You should encapsulate your data. &lt;strong&gt;Should&lt;&#x2F;strong&gt; replaces the weighing of tradeoffs with a moral imperative. It insists on always doing the ‘right thing’, as if every question had a simple answer if you would only listen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Should&lt;&#x2F;strong&gt; is especially dangerous for beginners, who hear it from their elders with all the weight of a religious commandment, and pass it down the same way. This is how ideas mutate from rule of thumb to guideline to inviolable law to invisible custom, until even questioning them is a trigger for derision.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;lesswrong.com&#x2F;lw&#x2F;nu&#x2F;taboo_your_words&#x2F;&quot;&gt;Taboo the word&lt;&#x2F;a&gt;. Keeping asking why and don’t stop until you get to something you actually care about. Don’t confuse the means with the ends. You write code to solve a problem, to learn something new or to express yourself. Indirection, modularity, abstraction and tests are merely tools whose sole virtue is in whether they help you reach your goal.&lt;&#x2F;p&gt;
&lt;p&gt;Some long functions are &lt;a href=&quot;http:&#x2F;&#x2F;number-none.com&#x2F;blow&#x2F;john_carmack_on_inlined_code.html&quot;&gt;easier to read when left alone&lt;&#x2F;a&gt;. Some concerns &lt;a href=&quot;http:&#x2F;&#x2F;www.slideshare.net&#x2F;floydophone&#x2F;react-preso-v2#19&quot;&gt;cannot be cleanly separated&lt;&#x2F;a&gt;. Repetition is &lt;a href=&quot;http:&#x2F;&#x2F;mollyrocket.com&#x2F;casey&#x2F;stream_0020.html#Complexity&quot;&gt;sometimes the lesser evil&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?feature=player_detailpage&amp;amp;v=rI8tNMsozo0#t=1773&quot;&gt;encapsulation isn’t free&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Don’t blindly apply tools without stopping to question whether they fit the task at hand. And certainly don’t let the shame of ‘bad code’ prevent you from using your own best judgement about the problems you face.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Complexity budgets</title>
                <pubDate>Sun, 25 Oct 2015 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/complexity-budgets/</link>
                <guid>http%3A//scattered-thoughts.net/writing/complexity-budgets/</guid>
                <description>&lt;p&gt;I notice a tendency to make individual engineering decisions by maximising &#x27;goodness&#x27;. Patch X makes the code more complex, but it adds a new feature or increases performance or makes debugging easier. We add up the goodness points, subtract the badness points and if the result is more than zero it&#x27;s a good patch.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, complexity does not add up linearly. The total cost of a set of features is not just the sum of the cost of each feature. Complexity limits how much of the system can fit into the heads of the developers, and in doing so breeds more complexity. Every time you are forced to do something ugly in one place because of existing ugliness in another place you are feeling this cost.&lt;&#x2F;p&gt;
&lt;p&gt;Worse, there are cliffs in the cost. As soon as a particular subsystem cannot fit into the head of a single developer there are huge additional overheads for communication. Opportunities for improvements or simplification are missed because no one person can see all the parts of the problem. N engineers working on a system that they all understand will crush N engineers working on a system that they each understand part of.&lt;&#x2F;p&gt;
&lt;p&gt;Modularity, indirection and abstraction are not panaceas for this problem. In most cases they reduce local complexity at the cost of global complexity. This is a decision that should be consciously weighed in each case rather than assumed to be an unquestionable win. The failure mode here is huge codebases where every component is so simple that it barely does anything at all, and the process of just finding and piecing together the actual logic consumes all available mental resources.&lt;&#x2F;p&gt;
&lt;p&gt;For any given team, there is a point past which they can no longer collectively understand the system. This creates opportunity costs - spending complexity in one place means you cannot spend it elsewhere. Any new change must have it&#x27;s benefits weighed against the precious cognitive limits of the team. Try to spend your limited complexity budget in places that give &lt;a href=&quot;http:&#x2F;&#x2F;permalink.gmane.org&#x2F;gmane.culture.people.kragen.thinking&#x2F;202&quot;&gt;good value for money&lt;&#x2F;a&gt;. If you fritter away your budget you will have nothing left to spend when a big win comes along.&lt;&#x2F;p&gt;
&lt;p&gt;This is hard to do well, because complexity has so many ways to sneak in without being noticed. The trick is to carefully separate out &lt;a href=&quot;http:&#x2F;&#x2F;shaffner.us&#x2F;cs&#x2F;papers&#x2F;tarpit.pdf&quot;&gt;essential complexity&lt;&#x2F;a&gt; from the morass of assumptions, routines and path dependencies that make up our habitual solution space. Look at the information that must go into the system and the information that must come out. Figure out how fast that needs to happen and find out what your hardware is capable of. Don&#x27;t start coming up with solutions until you have actually &lt;a href=&quot;http:&#x2F;&#x2F;lesswrong.com&#x2F;lw&#x2F;ka&#x2F;hold_off_on_proposing_solutions&#x2F;&quot;&gt;thought about the problem&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After careful consideration you may well end up with a traditional solution and that&#x27;s fine. But if the first thing you do when given a problem is to pull out your favourite solution then you are throwing away your budget without a fight.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Motivating the monkey</title>
                <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/motivating-the-monkey/</link>
                <guid>http%3A//scattered-thoughts.net/writing/motivating-the-monkey/</guid>
                <description>&lt;p&gt;I struggle a lot with motivation. This is probably not an unfamiliar story - there is some exciting project I want to work on but every time I try to get started my mind just shies away and reaches for the reddit refresh button.&lt;&#x2F;p&gt;
&lt;p&gt;There is a lot of advice on the subject. Some of the advice is basic sanity maintenance like getting regular exercise, nurturing your social life, eating healthily and taking time out. This is sensible advice. Other advice revolves around shoring up motivation through blocking websites, setting timers, tracking goals etc. I find this kind of advice unhelpful.&lt;&#x2F;p&gt;
&lt;p&gt;The reason it&#x27;s unhelpful is that procrastination is fundamentally a &lt;a href=&quot;http:&#x2F;&#x2F;mindingourway.com&#x2F;not-yet-gods&#x2F;&quot;&gt;monkey-brain&lt;&#x2F;a&gt; problem and that these are all human-brain solutions - bandaids over a gaping wound.&lt;&#x2F;p&gt;
&lt;p&gt;Rather than wrestle with willpower I&#x27;ve found it much more useful to directly attack the underlying problems. The two main problems that I suffer from are lack of rewards and lack of a plan.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lack-of-rewards&quot;&gt;Lack of rewards&lt;&#x2F;h2&gt;
&lt;p&gt;Not big rewards, like a meaningful project or high status or good salary or lots of perks. The monkey-brain is not into complex cause-effect chains or long-term consequences. It only cares about here and now. If every time I look at an editor I feel stressed and tired and nothing pleasant happens &lt;em&gt;immediately afterwards&lt;&#x2F;em&gt; then the monkey-brain will just refuse to look at the editor anymore. Procrastination sets in.&lt;&#x2F;p&gt;
&lt;p&gt;Some projects are easy to sell to the monkey-brain. If I&#x27;m doing optimisation work then I get to run benchmarks. Sometimes I run a benchmark and the numbers have gotten bigger! Monkey-brain is really into frequent, unpredictable rewards so it lets me work on optimisation for hours on end without needing distraction.&lt;&#x2F;p&gt;
&lt;p&gt;Other projects just need better planning. A common trap I used to fall into was to start a project where the todo list looks like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do hard thing A&lt;&#x2F;li&gt;
&lt;li&gt;Do hard thing B&lt;&#x2F;li&gt;
&lt;li&gt;...&lt;&#x2F;li&gt;
&lt;li&gt;Do hard thing Y&lt;&#x2F;li&gt;
&lt;li&gt;Do hard thing Z&lt;&#x2F;li&gt;
&lt;li&gt;Shiny exciting results!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Usually I make it as far as hard thing C before the monkey-brain decides that this sucks and we should go eat icecream instead.&lt;&#x2F;p&gt;
&lt;p&gt;These days when I plan projects I try to front-load the shiny. For example, when working on Imp I could have broken up the work by subsystem: write the runtime, write the compiler, write the parser, write the repl. But the exciting, motivating part is getting to play with the repl and that wouldn&#x27;t have happened until right at the end. Instead I broke it up by feature: get inputs working, get joins working, get functions working etc so that every chunk of work results in a new toys to play with.&lt;&#x2F;p&gt;
&lt;p&gt;Some projects really are just a grind and the only way to avoid burnout is to mix in other rewards. If I have to spend weeks refactoring some gnarly legacy code, I will also take time out to work on little projects that I can finish easily, just to make sure that the monkey-brain doesn&#x27;t get the impression that programming sucks in general.&lt;&#x2F;p&gt;
&lt;p&gt;What actually constitutes a reward probably varies from person to person. For some people, the satisfaction of seeing clean code checked in or a suite of tests passing might be enough. For me, the only reliable rewards are numbers getting bigger or new toys to play with, so I have to make sure that those happen.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lack-of-a-plan&quot;&gt;Lack of a plan&lt;&#x2F;h2&gt;
&lt;p&gt;There are lot of ways my momentum can break down: I can&#x27;t figure out how to solve some problem, I can&#x27;t decide what to do, I don&#x27;t know where to start etc. What they all have in common is that nothing is happening, there is no clear next step and I just wallow in the quicksand of indecision. This can go on for weeks. The way I&#x27;ve learnt to deal with this is to have pre-planned procedures that get triggered when I notice one of those failure modes.&lt;&#x2F;p&gt;
&lt;p&gt;If I can&#x27;t figure out how to solve some problem:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Write down the problem in as much detail as possible.&lt;&#x2F;li&gt;
&lt;li&gt;Write down what exactly would constitute a solution.&lt;&#x2F;li&gt;
&lt;li&gt;Write down why I need to solve this problem and why I can&#x27;t just do something simpler.&lt;&#x2F;li&gt;
&lt;li&gt;Write down a list of examples and try to solve each one by hand.&lt;&#x2F;li&gt;
&lt;li&gt;Write down any problems other people have solved that seem related. See if the solutions can be adapted.&lt;&#x2F;li&gt;
&lt;li&gt;Write down problems that are similar but easier. Try to solve those.&lt;&#x2F;li&gt;
&lt;li&gt;Open up &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;How-Solve-It-Mathematical-Princeton&#x2F;dp&#x2F;069111966X&quot;&gt;How To Solve It&lt;&#x2F;a&gt; and try each of the heuristics.&lt;&#x2F;li&gt;
&lt;li&gt;Explain all of the above to someone else.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If I can&#x27;t decide what to do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Write down the problem.&lt;&#x2F;li&gt;
&lt;li&gt;Write down the criteria by which I should judge each option.&lt;&#x2F;li&gt;
&lt;li&gt;Write down all the options I can think of.&lt;&#x2F;li&gt;
&lt;li&gt;Write down the pros and cons of each.&lt;&#x2F;li&gt;
&lt;li&gt;If possible, go do something else instead.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, start a 30 minute timer and at the end pick the least bad option still on the list.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If I don&#x27;t know where to start:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;List all the things that need to happen, in time order.&lt;&#x2F;li&gt;
&lt;li&gt;If the first thing on the list is something I can do, do it.&lt;&#x2F;li&gt;
&lt;li&gt;Otherwise, take the first thing on the list and break it down into smaller steps.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The key thing about all of these is that they generate momentum. As long as I am systematically attacking a problem I will get somewhere. The failure mode to avoid is just circling around on the same thoughts again and again until the monkey-brain freaks out about the lack of progress and calls for icecream and cat videos.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Three months of Rust</title>
                <pubDate>Thu, 04 Jun 2015 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/three-months-of-rust/</link>
                <guid>http%3A//scattered-thoughts.net/writing/three-months-of-rust/</guid>
                <description>&lt;p&gt;I work on &lt;a href=&quot;http:&#x2F;&#x2F;incidentalcomplexity.com&#x2F;&quot;&gt;Eve&lt;&#x2F;a&gt;, a functional-relational programming language and environment. Since the Eve editor has to run in a browser we built the first few versions entirely in javascript. This has been pretty painful, so a little over three months ago we started looking at other options.&lt;&#x2F;p&gt;
&lt;p&gt;The only hard requirements for the runtime are a) we need control over memory layout and b) we need to safely execute untrusted Eve code. Preemptive threads and the ability to compile to efficient javascript would also be valuable.&lt;&#x2F;p&gt;
&lt;p&gt;Javascript &lt;em&gt;can&lt;&#x2F;em&gt; support manual memory layout but provides very little help in getting it right. Native objects have some &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=8793817&quot;&gt;necessary limitations&lt;&#x2F;a&gt; and asm.js is impractical to write by hand.&lt;&#x2F;p&gt;
&lt;p&gt;C can run in the browser via Emscripten but the available evidence suggests that writing secure C is not a thing that mortals are good at.&lt;&#x2F;p&gt;
&lt;p&gt;Rust is an unknown. It provides control over memory layout, has a community with a strong focus on safety and &lt;em&gt;may&lt;&#x2F;em&gt; support Emscripten in the future. It also promises a minimum of &lt;a href=&quot;http:&#x2F;&#x2F;www.urbandictionary.com&#x2F;define.php?term=footgun&amp;amp;defid=7493319&quot;&gt;footguns&lt;&#x2F;a&gt;, which is an attractive feature after many months of javascript and ArrayBuffers. Our initial experiments were promising, so we decided that in the next version of Eve we would write the query planner and runtime in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;(&amp;quot;You should look at language X!&amp;quot;. We did, and then we decided to use Rust. We can still be friends.)&lt;&#x2F;p&gt;
&lt;p&gt;There are a number of things that made this much less risky than it sounds. First, the query planner is on the way to being bootstrapped and the remaining runtime is only a few thousand lines of code. Most of the development time is spent experimenting with different language semantics and evaluation strategies, rather than building up a large codebase that would tie us to Rust. Second, we have two escape hatches if Rust doesn&#x27;t work out. We can use the FFI to gradually port components to C, or we can use the websocket interface to the editor to gradually port components to javascript.&lt;&#x2F;p&gt;
&lt;p&gt;So here is what I think after three months of working with Rust full-time. TLDR: mostly impressive, a few worrying quirks, probably the best option for us right now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;community&quot;&gt;Community&lt;&#x2F;h2&gt;
&lt;p&gt;The Rust community seems to be populated entirely by human beings. I have no idea how this was done. I suspect Graydon Hoare deserves a large share of the credit for leading by example but everyone I have interacted with in the community has been friendly and patient.&lt;&#x2F;p&gt;
&lt;p&gt;Despite my concerns over the size and complexity of the compiler and the LLVM toolchain, I haven&#x27;t encountered any compiler bugs and only a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;24557&quot;&gt;single bug&lt;&#x2F;a&gt; in the standard library. The community&#x27;s attitude towards reliability and safety is by far the strongest point in favour of us continuing to use Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tooling&quot;&gt;Tooling&lt;&#x2F;h2&gt;
&lt;p&gt;Compile times are brutal. For our 2400 loc it takes 20s for a dev build and 70s for a release build. Word is that compile time just hasn&#x27;t been a focus so far and will improve in future releases. Type checking occurs very early in that 20s so running &lt;code&gt;cargo build&lt;&#x2F;code&gt; in a loop gives reasonably fast feedback on type errors, but any time we want to add an extra print statement we pay the full price. Moving the Eve editor into Rust would simplify the overall architecture but the people writing the editor refuse to wait 20s for a page refresh.&lt;&#x2F;p&gt;
&lt;p&gt;Error messages are better than any other tool I have used. For most errors the compiler not only clearly explains the problem but also offers the correct solution. There is no secret sauce, it&#x27;s just the result of long hours from the compiler team and a culture of caring about usability.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;29&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;38&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; unresolved name &#96;before_op&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Did you mean &#96;before_opt&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;                             before_op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; befores&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;121&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;29&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;121&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; attempted to take value of method &#96;iter&#96; on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &#96;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Vec&amp;lt;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;String&amp;gt;&#96;
src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;121         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; ix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;my_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my_name[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; name)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                                                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^~~~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;relation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;121&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;29&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;121&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; help&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maybe a &#96;()&#96; to call it is missing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; If not&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; try an anonymous function
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cannot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; out of borrowed content
src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;14         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^~~~~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; note&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; attempting to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; value to here
src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;17             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;String(string) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(formatter)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                                          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^~~~~~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
src&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; help&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; to prevent the &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; string&#96; or &#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ref mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; string&#96; to capture value by reference
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cargo is solid. Building projects, versioning dependencies and running tests&#x2F;benchmarks are all easy. I would like to see &lt;code&gt;cargo bench&lt;&#x2F;code&gt; produce comparison graphs (like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;garybernhardt&#x2F;readygo&quot;&gt;readygo&lt;&#x2F;a&gt;). I&#x27;m also looking forward to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nrc&#x2F;rustfmt&quot;&gt;rustfmt&lt;&#x2F;a&gt; since most editors currently do a pretty poor job of auto-indenting.&lt;&#x2F;p&gt;
&lt;p&gt;Javascript profilers tend to tell me that the Eve runtime spends 100% of its time in &lt;code&gt;main&lt;&#x2F;code&gt; and calls no other functions. With Rust I get to use valgrind and perf which actually return useful information.&lt;&#x2F;p&gt;
&lt;p&gt;Debugging is less exciting - both GDB and LLDB work and there is a &lt;a href=&quot;https:&#x2F;&#x2F;michaelwoerister.github.io&#x2F;2015&#x2F;03&#x2F;27&#x2F;rust-xxdb.html&quot;&gt;macros package&lt;&#x2F;a&gt; that makes them more useful but the Chrome debugger is still far more useable (when it doesn&#x27;t crash).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ownership&quot;&gt;Ownership&lt;&#x2F;h2&gt;
&lt;p&gt;One of the unique features of Rust is that the type system tracks ownership of data. Shared mutability is the root of many bugs and vulnerabilities, especially in concurrent environments. Functional languages address this by removing or strictly controlling mutability. Rust addresses this by tracking and controlling sharing. See the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ownership.html&quot;&gt;documentation&lt;&#x2F;a&gt; for the gory details.&lt;&#x2F;p&gt;
&lt;p&gt;Most code I write now compiles without error. Most errors I see are clearly mistakes on my part and are easy to fix. About once a week, I hit an error that causes some headscratching. In most case I fume for a while before realising that I was trying to blow my foot off.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;src&#x2F;view.rs:205:70: 205:81 error: &#96;outer_items&#96; does not live long enough
src&#x2F;view.rs:205                     output_pairs.push((&amp;amp;aggregate.outer.fields[..], &amp;amp;outer_items[..]));

                                                                                     ^~~~~~~~~~~
note: in expansion of for loop expansion
src&#x2F;view.rs:172:17: 212:18 note: expansion site
src&#x2F;view.rs:203:47: 212:18 note: reference must be valid for the block suffix following statement 3 at 203:46...
src&#x2F;view.rs:203                         ).collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;();
src&#x2F;view.rs:204                     let outer_items = vec![outer_values];
src&#x2F;view.rs:205                     output_pairs.push((&amp;amp;aggregate.outer.fields[..], &amp;amp;outer_items[..]));
src&#x2F;view.rs:206                     if aggregate.selects_inner {
src&#x2F;view.rs:207                         output_pairs.push((&amp;amp;aggregate.inner.fields[..], group))
src&#x2F;view.rs:208                     }
                ...
src&#x2F;view.rs:204:58: 212:18 note: ...but borrowed value is only valid for the block suffix following statement 4 at 204:57
src&#x2F;view.rs:204                     let outer_items = vec![outer_values];
src&#x2F;view.rs:205                     output_pairs.push((&amp;amp;aggregate.outer.fields[..], &amp;amp;outer_items[..]));
src&#x2F;view.rs:206                     if aggregate.selects_inner {
src&#x2F;view.rs:207                         output_pairs.push((&amp;amp;aggregate.inner.fields[..], group))
src&#x2F;view.rs:208                     }
src&#x2F;view.rs:209                     let mut tuples = Vec::with_capacity(output_pairs.len());
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It took me a while to realise that this error is trying to tell me is that &lt;code&gt;output_pairs&lt;&#x2F;code&gt; is declared one line before &lt;code&gt;outer_items&lt;&#x2F;code&gt;. Declarations for a block are freed in reverse order, so &lt;code&gt;outer_items&lt;&#x2F;code&gt; will be freed first and there will be a dangling pointer when &lt;code&gt;output_pairs&lt;&#x2F;code&gt; is freed. All I have to do to fix it is declare &lt;code&gt;output_pairs&lt;&#x2F;code&gt; after &lt;code&gt;outer_items&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Most of my confusion looks like this. There is some pattern that I didn&#x27;t think about before and now that I understand it I won&#x27;t struggle with that kind of error again. As the language matures I expect that these patterns will be collected and documented.&lt;&#x2F;p&gt;
&lt;p&gt;There are also some patterns that the borrow checker can&#x27;t understand (or, more accurately, there is no matching pattern in the standard library). This is a heavily simplified version of a common pattern in the query engine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [String], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; String&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Vec&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
        results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; some complicated condition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some new thing&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;b&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;c&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;d&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which produces this error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;22&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &#96;s&#96; does not live long enough
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;         state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
                              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;^
&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;95&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; note&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; reference must be valid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; the lifetime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; defined on the block at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;94&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [String], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; String&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Vec&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;         results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;anon&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; some complicated condition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;         state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;anon&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;6         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; note&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;but borrowed value is only valid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; the block suffix following statement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;39
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;anon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;9         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some new thing&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;anon&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;         state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;anon&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;11         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;anon&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;         state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;anon&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;13     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The core problem is that I&#x27;m pushing a value &lt;code&gt;s&lt;&#x2F;code&gt; into a vector which lives longer than &lt;code&gt;s&lt;&#x2F;code&gt;. The borrow checker isn&#x27;t capable of proving that I remove the value again before it is freed. I could build a wrapper around the vector library that understands this pattern, or I could just promise the borrow checker that I know what I&#x27;m doing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some new thing&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; promise the borrow checker that we will pop s before we exit this scope
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;mem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;transmute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; String&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;s) }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I like this pragmatic approach to safety. When the type-system understands what I&#x27;m doing I get the full benefit. When it doesn&#x27;t I can escape and do my own reasoning. If a particular pattern appears frequently I can put that reasoning into a library (like &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;cell&#x2F;struct.RefCell.html&quot;&gt;RefCell&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;rc&#x2F;struct.Rc.html&quot;&gt;Rc&lt;&#x2F;a&gt;) and expose a safe interface that the type system understands. It feels like having an extensible type system that can learn to understand the way each project manages memory.&lt;&#x2F;p&gt;
&lt;p&gt;EDIT &lt;a href=&quot;http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;38ljzu&#x2F;three_months_of_rust&#x2F;crw6f9m&quot;&gt;quxxy&lt;&#x2F;a&gt; suggested a better solution, using the copy-on-write type to allow the vec to own some of the strings and borrow the others:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; [String], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Vec&amp;lt;Cow&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Vec&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
        results&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;| (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;s)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; some complicated condition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Borrowed(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;some new thing&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Cow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Owned(s))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;step&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;table[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; results)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;control&quot;&gt;Control&lt;&#x2F;h2&gt;
&lt;p&gt;Rust has &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Algebraic_data_type&quot;&gt;algebraic data-types&lt;&#x2F;a&gt; that layout data consecutively. Pointers are opt-in. Gaining a similar level of control in javascript &lt;em&gt;is&lt;&#x2F;em&gt; possible but it requires some mightily unpleasant gymnastics. Rust feels like a high-level language most of the time but manages to do it without vomiting all over the cache.&lt;&#x2F;p&gt;
&lt;p&gt;Rust doesn&#x27;t help at all with &lt;a href=&quot;http:&#x2F;&#x2F;bitsquid.blogspot.com&#x2F;2010&#x2F;02&#x2F;blob-and-i.html&quot;&gt;blobs&lt;&#x2F;a&gt; though. They have to be handled with &#x27;unsafe&#x27; code which subverts the normal Rust guarantees. The unsafe code could be wrapped in a library (like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frankmcsherry&#x2F;columnar&quot;&gt;columnar&lt;&#x2F;a&gt;) to ensure that clients use it correctly but the library code itself will still need very careful review. And speaking of review...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;unsafe&quot;&gt;Unsafe&lt;&#x2F;h2&gt;
&lt;p&gt;There is a very recent effort to define &lt;a href=&quot;http:&#x2F;&#x2F;cglab.ca&#x2F;%7Eabeinges&#x2F;blah&#x2F;rust-unsafe-intro&#x2F;&quot;&gt;exactly what unsafe code has to do&lt;&#x2F;a&gt; to not ruin all the guarantees that Rust works so hard to provide. The list of &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference.html#behavior-considered-undefined&quot;&gt;undefined behaviour&lt;&#x2F;a&gt; is long and scary. It looks like consensus and documentation is on the way but until then ... here be dragons.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zero-cost&quot;&gt;Zero cost&lt;&#x2F;h2&gt;
&lt;p&gt;Rust provides a lot of high-level abstractions which LLVM then optimises away. For example, large chains of iterator functions usually optimise into imperative loops. And the word &#x27;usually&#x27; is what makes me worry. So far Rust has behaved but I have been bitten badly by other &#x27;sufficiently smart&#x27; compilers.&lt;&#x2F;p&gt;
&lt;p&gt;Modern machines are a huge pile of opaque and unreliable heuristics and the current trend is to add more and more layers on top. The vast majority of systems are built this way and it is by all accounts a successful strategy. That doesn&#x27;t mean I have to like it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;&#x2F;h2&gt;
&lt;p&gt;Doesn&#x27;t matter that much. I got used to it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;namespaces&quot;&gt;Namespaces&lt;&#x2F;h2&gt;
&lt;p&gt;There are effectively three kinds of namespaces.&lt;&#x2F;p&gt;
&lt;p&gt;Modules behave like most static languages - you can call functions using their full path or you can import them under a short name eg&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo(bar)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo(bar)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;namespace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(bar)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is some funkiness around how modules are structured and how they are scoped relative to each other that I haven&#x27;t taken the trouble to understand. I only need one level of namespaces.&lt;&#x2F;p&gt;
&lt;p&gt;Types can also be namespaces. You can add a method to a type and access it either through the type or through the dot syntax.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  ...
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}

Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo(bar)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lastly, traits can attach methods to types. To prevent collisions, the methods are namespaced by the trait.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  ...
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo(bar)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; import foo for the dot syntax
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not unreasonable so far. It can sometimes be hard to track down where a particular method came from but the dispatch is at least direct. No inheritance or prototype chains to deal with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;traits&quot;&gt;Traits&lt;&#x2F;h2&gt;
&lt;p&gt;Haskell suffers from an excess of magic. Typeclass methods can dispatch on the type of any argument (or on the return type!) but the types are usually inferred. Reading haskell code that overuses typeclasses may require running the inference algorithms in your head, which is difficult and error-prone. This can also lead to bugs when an edit in one place changes a type, causing a different instance to be silently selected somewhere else (Don Stewart warned against this in his &lt;a href=&quot;http:&#x2F;&#x2F;code.haskell.org&#x2F;%7Edons&#x2F;talks&#x2F;padl-keynote-2012-01-24.pdf&quot;&gt;PADL keynote&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;OCaml leans entirely the other way. Code is very readable and maintainable because all the information needed to follow the dispatch is written down explicitly. On the other hand, printing a simple data-structure can require chaining together multiple lines of functors to get to the correct function.&lt;&#x2F;p&gt;
&lt;p&gt;Rust has very similar capabilities to haskell but (so far) abuses them less often. There are only a few cases so far where I felt lost in types - &lt;a href=&quot;http:&#x2F;&#x2F;cyderize.github.io&#x2F;rust-websocket&#x2F;doc&#x2F;websocket&#x2F;index.html&quot;&gt;rust-websocket&lt;&#x2F;a&gt; being the biggest offender.&lt;&#x2F;p&gt;
&lt;p&gt;EDIT The section here on constraints was completely wrong and has been removed - see the &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=9664017&quot;&gt;discussion&lt;&#x2F;a&gt; that corrected me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;auto-deref&quot;&gt;Auto-deref&lt;&#x2F;h2&gt;
&lt;p&gt;Method calls are not as simple as they look at first. Suppose we have:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If &lt;code&gt;x&lt;&#x2F;code&gt; implements &lt;code&gt;Foo&lt;&#x2F;code&gt; then life is simple. If &lt;code&gt;x&lt;&#x2F;code&gt; doesn&#x27;t implement &lt;code&gt;Foo&lt;&#x2F;code&gt; but does implement &lt;code&gt;Deref&lt;&#x2F;code&gt; then the compiler will change the call to &lt;code&gt;x.deref().foo()&lt;&#x2F;code&gt;. This continues with &lt;code&gt;x.deref().deref().foo()&lt;&#x2F;code&gt; and so on until compiler finds a type that doesn&#x27;t implement &lt;code&gt;Deref&lt;&#x2F;code&gt; or a type that does implement &lt;code&gt;Foo&lt;&#x2F;code&gt;. This is great ergonomically - it means you can call methods on a smart pointer as it were the pointed-at object. But it only works on the self argument - other arguments have to be manually deref-ed.&lt;&#x2F;p&gt;
&lt;p&gt;Similarly, if a method is declared to take &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; or &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; the compiler will insert the appropriate borrow before making the call. &lt;code&gt;foo.bar()&lt;&#x2F;code&gt; could desugar to &lt;code&gt;bar(foo)&lt;&#x2F;code&gt; or &lt;code&gt;bar(&amp;amp;foo)&lt;&#x2F;code&gt; or &lt;code&gt;bar(&amp;amp;mut foo)&lt;&#x2F;code&gt; depending on the type of &lt;code&gt;bar&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Auto-deref and auto-borrow can interact unpleasantly with traits and inference. Here is a real example that totally confused me:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print_type_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; prints String

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; xs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; xs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print_type_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; prints String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; xs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; xs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;print_type_of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; prints &amp;amp;str
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What&#x27;s going on? The standard library has the following implementations:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;impl ToOwned for str {
  type Owned = String
  ...
}

impl&amp;lt;T&amp;gt; ToOwned for T where T: Clone {
  type Owned = T
  ...
}

impl Clone for &amp;amp;T
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The type of &lt;code&gt;x&lt;&#x2F;code&gt; in the first two examples is &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; which auto-derefs to &lt;code&gt;str&lt;&#x2F;code&gt; and gets &lt;code&gt;Owned = String&lt;&#x2F;code&gt;. The type of &lt;code&gt;x&lt;&#x2F;code&gt; in the third example is &lt;code&gt;&amp;amp;&amp;amp;str&lt;&#x2F;code&gt; (because iter borrows elements of the vec). &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; implements &lt;code&gt;Clone&lt;&#x2F;code&gt; so &lt;code&gt;&amp;amp;&amp;amp;str&lt;&#x2F;code&gt; implements &lt;code&gt;ToOwned&lt;&#x2F;code&gt; directly and does not auto-deref to &lt;code&gt;str&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is a risk for traits in general, but auto-deref exacerbates it by creating multiple types that might choose an instance. In this case it caused a type error but you can imagine cases where adding a new trait implementation silently changes the selected instance of a seemingly unrelated call in far away code. Very difficult for code review to catch.&lt;&#x2F;p&gt;
&lt;p&gt;A similar mistake can happen if both the dereferenced type and the pointer type implement a method with the same name, but it looks like the standard library authors are aware of this and have stopped implementing methods directly on pointer types.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning-curve&quot;&gt;Learning curve&lt;&#x2F;h2&gt;
&lt;p&gt;The borrow checker was initially huge impediment to productivity but I reached the break-even point around the second month. Ownership and borrowing have become intuitive and I no longer have to contort designs around them.&lt;&#x2F;p&gt;
&lt;p&gt;Safety is an enormous productivity boon. I&#x27;ve checked in a total of 10k lines of Rust code and written many more experiments that didn&#x27;t make it to master, and in that time I haven&#x27;t had a single segfault, nor any bugs caused by accidental mutation, aliasing, type errors or null pointers. The vast majority of typing mistakes are also caught at compile time (the exceptions being interactions with dynamically typed Eve data).&lt;&#x2F;p&gt;
&lt;p&gt;Despite the restrictions of the type system, I am more productive in Rust than I am in either Javascript or Haskell. It manages somehow to hit a sweet spot between safety and ease of use.&lt;&#x2F;p&gt;
&lt;p&gt;By far, the feature I miss most is interactive development. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;murarth&#x2F;rusti&quot;&gt;repl&lt;&#x2F;a&gt; is only a thin layer over the compiler - it&#x27;s equally slow and nukes all state between every eval. Adding interactivity to a language that wasn&#x27;t designed for it is generally unsatisfying so this is not something that it likely to be fixed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;for-eve&quot;&gt;For Eve&lt;&#x2F;h2&gt;
&lt;p&gt;One of the core values of Eve is radical simplicity, in the same vein as the &lt;a href=&quot;http:&#x2F;&#x2F;www.vpri.org&#x2F;pdf&#x2F;tr2011004_steps11.pdf&quot;&gt;STEPS&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;boom.cs.berkeley.edu&#x2F;&quot;&gt;BOOM&lt;&#x2F;a&gt; projects. We have to make compromises if we want to ever ship, but sitting atop Rust, LLVM and possibly Emscripten feels like a pretty big compromise.&lt;&#x2F;p&gt;
&lt;p&gt;The complexity in Rust exists to create a general-purpose systems language with an array of features and zero-cost abstractions that are incredibly useful for building large projects. But we aren&#x27;t building a large project, by design, and we don&#x27;t &lt;em&gt;need&lt;&#x2F;em&gt; most of the features.&lt;&#x2F;p&gt;
&lt;p&gt;The only places where we absolutely need manual layout so far are for Eve data and indexes. Those are nicely self-contained - no pointers to the outside world - and have a well-defined life-cycle. I wonder how far we could get with an approach like &lt;a href=&quot;http:&#x2F;&#x2F;terralang.org&#x2F;&quot;&gt;Terra&lt;&#x2F;a&gt;, writing the core data-structures and algorithms in some scary unsafe language and interact with them safely from a managed language. With a staged approach we could build just the safety mechanisms that we need and avoid carrying around the complexity of the rest. Javascript seems to have all the features needed to make this kind of approach work but it doesn&#x27;t have the tools needed to make it bearable. Creating one programming language is hard enough - we probably shouldn&#x27;t start on another.&lt;&#x2F;p&gt;
&lt;p&gt;Regardless, Rust is an incredible language in general. Even if we end up using something else for Eve, I can see myself using Rust for other projects where I care about performance, safety or reliability.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Scaling down</title>
                <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/scaling-down/</link>
                <guid>http%3A//scattered-thoughts.net/writing/scaling-down/</guid>
                <description>&lt;p&gt;The programming world is obsessed with scaling up. How many million lines of code can we maintain? How many petabytes of data can we process? How deeply can I customise this editor? More code, more data, more people, more machines.&lt;&#x2F;p&gt;
&lt;p&gt;Nobody talks about scaling down.&lt;&#x2F;p&gt;
&lt;p&gt;The vast majority of programs are never written. Ideas die stillborn because the startup cost is too high to bear. When we focus entirely on the asymptotic cost of developing large systems we neglect the constant costs that make tedious grinds out of simple tasks.&lt;&#x2F;p&gt;
&lt;p&gt;There is a great deal to be gained from switching the focus from &lt;em&gt;what we can do&lt;&#x2F;em&gt; to &lt;em&gt;what we can get done&lt;&#x2F;em&gt;, from creating the most &lt;em&gt;expressive&lt;&#x2F;em&gt; tools to creating the most &lt;em&gt;efficient&lt;&#x2F;em&gt; tools. To do this we need to become conscious of the friction imposed by our tools. When we scale up, the concerns are performance, modularity, maintainability, expressiveness. A toolset optimised for small-scale programming must have different metrics:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to create a project? Creating a github repo, making a build file, editing the project template, opening editors, starting repls, launching dev servers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to get results on the screen? Compare to how long it takes to get bored and lose interest.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to leverage libraries? Figuring out which library to use, installing the correct version, understanding the documentation, making a successful api call.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How long does it take to deploy? Serving a website, uploading a package, emailing a self-contained script, installing a cron job.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How hard is it to see what is going on? Can you inspect variables, set breakpoints, trace messages, rewind time?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How quickly are bugs found and corrected? How much time passes between making a mistake, noticing the damage, reproducing the trigger, understanding what went wrong and applying the fix?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How much time do you spend on incidental tasks? Installing libraries, committing to version control, drawing module boundaries, constructing class hierarchies, writing build scripts. Anything that is supporting the process rather than directly solving the original problem.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How easy is it to collaborate with another person? What is the latency of sharing? Can you work together in real time? How long does it take before the other person is in a state to work on the code?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How quickly can you change the program when your goals change? Are you stuck with your architectural mistakes? Is everything tangled together? Do all the boundaries have to change?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The instinctive reaction is that the problems are overblown and everything would be fine if everybody would just use language &#x2F; tool &#x2F; methodology X.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s try it. Pick one of these programs and solve it however you think best. Record a video and afterwards break down your activity minute by minute.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fairly queue song choices in the office.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Display a notification whenever an email arrives from a specific address.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Record audio whenever some hardware button is held on your phone lock-screen and save in a browseable &#x2F; playable list.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fetch transaction records from your online bank, break down costs by regex categories and display a pie-chart for each month.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So much of what we actually do goes unnoticed after years of practice and routine. The reality may be quite different from what you imagine.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Humans should learn maths</title>
                <pubDate>Sat, 15 Nov 2014 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/humans-should-learn-maths/</link>
                <guid>http%3A//scattered-thoughts.net/writing/humans-should-learn-maths/</guid>
                <description>&lt;p&gt;In the history of humanity there have been three major inventions that have enabled people to think in entirely new ways. They allow us to learn more, think bigger thoughts and solve harder problems. They are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Writing: a means to store knowledge in a brain-independent form that can be easily replicated, transmitted and preserved&lt;&#x2F;li&gt;
&lt;li&gt;Mathematics: a methodology for constructing abstract systems, reasoning about them precisely and finding connections between them&lt;&#x2F;li&gt;
&lt;li&gt;Science: a methodology for finding abstract systems which map closely to the real world&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The reason why we teach these in schools to everyone everywhere is that they are part of your cultural inheritance as a human. It is your right to have these tools. Over the last few hundred years they have empowered us to eradicate diseases, light the dark and explore the stars.&lt;&#x2F;p&gt;
&lt;p&gt;Recently there has been a fourth major tool added to the list:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Computing: a way to arrange inanimate systems to simulate arbitrary abstract systems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Take a step back and think about what a remarkable idea it is a universal computer is even possible. We can take this inanimate system and arrange it so that it&#x27;s behaviour gives us information about another, completely unrelated system. We sit down and press buttons for a while and the machine churns and the screen glows and suddenly we know whether or not it will rain tomorrow. We discovered that the same system can be implemented using digital circuits or vacuum tubes or the atmosphere of a planet. Somehow the physical substrate doesn&#x27;t matter - the system has a life independent of it&#x27;s physical existence.&lt;&#x2F;p&gt;
&lt;p&gt;This idea of &lt;a href=&quot;http:&#x2F;&#x2F;yudkowsky.net&#x2F;rational&#x2F;the-simple-truth&quot;&gt;entangling&lt;&#x2F;a&gt; unrelated systems so that the heap of silicon you hold can tell you what the weather will be tomorrow or what just happened on the other side of the world is impossibly and wonderfully strange and yet hardly even noticed.&lt;&#x2F;p&gt;
&lt;p&gt;The process of entangling one of these miraculous devices is called programming. At some point the internet collectively decided to have a civilised debate about whether or not programming is maths. The implied subtext wavers between &amp;quot;if you don&#x27;t know category theory you are a bad programmer and should feel bad&amp;quot; and &amp;quot;maths ought to stay up in its ivory tower where it belongs and stop getting in the way of good honest engineering&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Aside from being nonsensical, the question is missing the point. For a start, it&#x27;s not clear that either side of the argument agrees on what math even is. Tragically, most people&#x27;s exposure to mathematics consists solely of memorising algorithms to solve numerical problems expressed in arcane syntax without reference to anything that they might ever care about. &lt;a href=&quot;https:&#x2F;&#x2F;www.maa.org&#x2F;external_archive&#x2F;devlin&#x2F;LockhartsLament.pdf&quot;&gt;Lockhart&lt;&#x2F;a&gt; has more and better to say on this topic than I can manage. Suffice to say that most of what you endured in school is the math equivalent of making you compile java into binary in your head for six years without ever showing you a computer or explaining why you might want to write a program in the first place.&lt;&#x2F;p&gt;
&lt;p&gt;But if you can get past the childhood trauma, the poor presentation and the awful syntax there is a whole world of important and beautiful ideas to explore. Mathematics is not about calculation and memorisation, but about building and studying different abstract systems and the connections between them.&lt;&#x2F;p&gt;
&lt;p&gt;Mathematics is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A set of methods for thinking correctly and precisely about abstract systems&lt;&#x2F;li&gt;
&lt;li&gt;A body of knowledge generated by those methods&lt;&#x2F;li&gt;
&lt;li&gt;A collection of conventions, notations and terminology for talking about that knowledge&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;worrydream.com&#x2F;oatmeal&#x2F;changing-minds.jpg&quot;&gt;&amp;quot;An average ninth-grade mathematics student plus a particular inscription system yields a material intelligence that surpasses Galileo&#x27;s intelligence&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Andy diSessa notes that Galileo&#x27;s proofs of the laws of uniform motion cover page after page to establish complicated relationships that young students today can express and remember simply as &#x27;d=vt&#x27;. Notation matters. Not the little details of what particular symbols we use or the arrangement of characters but the frameworks within which we hang our ideas. Galileo was one of the greatest minds of his century but his seminal work could today be performed trivially by anyone with a passing knowledge of algebra. This represents a massive increase in humanities collective intelligence.&lt;&#x2F;p&gt;
&lt;p&gt;If you are an experienced programmer, you have likely already developed a natural talent for proof and abstraction. But talent alone has limited use. Knowledge is leverage. For hundreds of years mathematicians have been creating tools for understanding the world; tools that are applicable to almost every human endeavour. Those tools belong to you.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-to-learn&quot;&gt;How to learn&lt;&#x2F;h1&gt;
&lt;p&gt;To gain access to these tools, you must first perform several rituals. These rituals don&#x27;t just give you access to the body of knowledge accumulated over hundreds of years, they also give you the tools to build your own. Even if the problem you are working on has never been studied before, you can approach it with a huge collection of tools and techniques as well as the experience and confidence to apply them correctly.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ritual 1: Learn to read and write proofs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A proof is just an argument which is sufficiently detailed to convince the listener. In most cases the listener is just a more suspicious and pessimistic version of yourself - suspicious because they have learned that humans are not good at reasoning precisely about abstract structures. As a programmer, you spend a great deal of time forming informal proofs about your code and the systems it interacts with. After all, you have to convince yourself that the code you have written actually does what you want it to do, all the time, on every input. Many of the established practices for writing good code - separation of concerns, clean interfaces, isolation of effects - boil down to making reasoning easier by reducing the amount of complexity you have to handle at once.&lt;&#x2F;p&gt;
&lt;p&gt;Anyone who was forced to study mathematics at a university level probably has unpleasant memories of being asked to prove some simple obvious fact in tedious detail. Every pedantic little mistake or ambiguity is picked out and criticised. For many people the whole experience is frustrating and seems pointless.&lt;&#x2F;p&gt;
&lt;p&gt;The goal of this exercise is to debug your thought process. It is surprising how many things are totally obvious and yet not true. How many times have you been convinced that a program is absolutely definitely correct this time only for blatant bugs to emerge within minutes? By becoming conscious of the reasoning process itself and by correcting it&#x27;s mistakes you can learn to reason correctly and precisely. These skills are initially practiced on the solid ground of trivial theorems so that they are second nature by the time you reach less sure footing.&lt;&#x2F;p&gt;
&lt;p&gt;As your skills develop you can return to more fast-and-loose reasoning most of the time. As &lt;a href=&quot;http:&#x2F;&#x2F;terrytao.wordpress.com&#x2F;career-advice&#x2F;there%E2%80%99s-more-to-mathematics-than-rigour-and-proofs&#x2F;&quot;&gt;Terence Tao explains&lt;&#x2F;a&gt;, the purpose of rigour is to develop and guide intuition. The working mathematician proceeds in rapid leaps and bounds when on familiar ground, only resorting to careful tiptoeing proofs when in unfamiliar territory. Through practice they develop a good sense of when a detailed proof is needed to catch mistakes and when they can get away with just a sketch and a wave, in the same way that a good programmer knows which code can be churned out in a moment and which needs careful thought, review and testing.&lt;&#x2F;p&gt;
&lt;p&gt;Intuition also guides proof. A student unfamiliar with a particular subject will stumble around trying to construct a proof by brute force but an experienced practitioner will find the correct proof just emerges fully formed in their head as if by magic. To paraphrase &lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&quot;&gt;Rich Hickey&lt;&#x2F;a&gt;: proofs are guard rails - they are essential for safety but you don&#x27;t drive by bouncing back and forth off the guard rails. Somehow the image of mathematics has become one of drudgery and endless formality when the reality is a balance between the intuitive leaps of understanding and the pillars of proof that prop them up afterwards.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ritual 2: Learn the language&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You need at least a passing familiarity with numbers, functions, sets, relations, vectors, matrices, graphs and predicates as well as the syntax used to describe them, their basic properties and how they relate to each other. The amount of knowledge may seem intimidating, but your average math undergraduate learns all this in their first year whilst mostly drunk. You are smarter than them and possibly more sober.&lt;&#x2F;p&gt;
&lt;p&gt;One of the huge benefits of the second ritual is that the knowledge starts to link together. Each fact slots into a huge web with many connections so that you have multiple pathways to remember and understand it. The more different ways you have to look at a subject, the more likely it is that one of them will click and make sense. Theorems and definitions are no longer handed down from on high to be memorized, but seem intuitive and natural because you understand &lt;em&gt;why&lt;&#x2F;em&gt; they are true.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ritual 3: Practice&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Mathematical theories are tools and only by applying them repeatedly in different contexts will you learn to wield them properly. Like any other skill, mathematical thinking becomes truly powerful when it is so practiced that it no longer requires conscious effort or awareness. It just becomes another lens through which you can see the world.&lt;&#x2F;p&gt;
&lt;p&gt;Read books. Expect this to be hard. Studying maths texts is less like reading a novel and more like trying to unravel a knot. If something doesn&#x27;t make sense, skip it and come back later. Study it again and again, in different orders. Don&#x27;t just read passively, &lt;a href=&quot;http:&#x2F;&#x2F;web.stonehill.edu&#x2F;compsci&#x2F;history_math&#x2F;math-read.htm&quot;&gt;fight back&lt;&#x2F;a&gt;. Can you find concrete examples of each theorem? Can you find counter-examples? Can you find alternate proofs of key theorems? Can you make the result of a theorem stronger by adding more conditions? If you take away conditions, can you prove a weaker version? Why prove this theorem at all - what does it mean and what problems can you use it to solve?&lt;&#x2F;p&gt;
&lt;p&gt;Find your own puzzles to solve. When walking to work, is it always fastest to take the first green light at an intersection? Does it depend on the timing of the lights? Is it possible to get to work earlier by leaving later to avoid rush hour traffic? If there were half as many cars but they were twice as long, would traffic be better or worse? Would adding more roads relieve traffic by reducing the density or increase traffic by adding more intersections? Write down the proof and send it to a friend. Tear holes in their proofs. Find ways to falsify your own proofs. The only way to know if your foundations are solid is to kick the shit out of them and see if they fall down.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;where-to-start&quot;&gt;Where to start&lt;&#x2F;h1&gt;
&lt;p&gt;The high school math syllabus across most of the western world was designed to create rocket scientists. Literally. Trigonometry, laws of motion and calculus gained pride of place during the space race over fears that Soviet schooling was producing superior rocket scientists. Rote calculation and memorisation were vital skills before the advent of computers. It&#x27;s little surprise that students don&#x27;t see maths as being relevant to their lives.&lt;&#x2F;p&gt;
&lt;p&gt;The programming world is little better. Any discussion of maths in programming quickly turns to lambda calculus, type theory or category theory. These topics may be interesting in their own right, but the ratio of time-invested to problem-solving-abilities-gained is less than compelling. Automata theory and complexity theory fare a little better but still don&#x27;t inspire much.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s easy to forget that programmers do more than program. The entire goal of programming is to solve problems in the real world and maths has been helping solve those problems for hundreds of years in every field. If you want to learn, study whatever you find interesting and apply it to whatever you enjoy doing.&lt;&#x2F;p&gt;
&lt;p&gt;Find a friend to study with. It&#x27;s easy to get stuck or misunderstand something but the chances of you both making the same mistake is much lower. Talking it over with someone else is often the quickest way to make sense of a problem.&lt;&#x2F;p&gt;
&lt;p&gt;The transition from high school memorise-and-calculate to real problem solving is legendarily jarring. Suddenly there is not a correct path laid out for you but a bewildering swamp which can only be navigated by skilled reasoning. Learning to think and communicate &lt;em&gt;precisely&lt;&#x2F;em&gt; is useful everywhere but is especially vital when reasoning about complex algorithms or concurrent&#x2F;distributed systems. &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;How-Solve-Mathematical-Princeton-Science-ebook&#x2F;dp&#x2F;B0073X0IOA&#x2F;&quot;&gt;How To Solve It&lt;&#x2F;a&gt; is a classic text on tactics for solving hard problems in general. &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;How-Prove-It-Structured-Approach-ebook&#x2F;dp&#x2F;B009XBOBL6&quot;&gt;How To Prove It&lt;&#x2F;a&gt; deals more specifically with finding and expressing proofs and also covers the core constructs of mathematics (logic, numbers, sets, relations, functions).&lt;&#x2F;p&gt;
&lt;p&gt;Depending on how long ago you broke up with maths, you may need to brush up on the foundations. If you need to consciously think about basic algebra and logic you won&#x27;t have enough brain power left over to handle more advanced material. Whenever you get stuck with something, head over to &lt;a href=&quot;https:&#x2F;&#x2F;www.khanacademy.org&#x2F;&quot;&gt;Khan Academy&lt;&#x2F;a&gt; and make sure that you are completely fluent in the prerequisites. &lt;a href=&quot;https:&#x2F;&#x2F;www.khanacademy.org&#x2F;math&#x2F;algebra&quot;&gt;Algebra I&lt;&#x2F;a&gt; is especially important. Khan Academy focuses more on developing concrete intuition than on abstraction and rigour so it&#x27;s a good complement to more theoretical sources.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;where-to-go&quot;&gt;Where to go&lt;&#x2F;h1&gt;
&lt;p&gt;You won&#x27;t live long enough to learn more than a tiny fraction of all there is to know. Ideas have costs in the time it takes to learn them, the amount of maintenance required to remember them and the amount of effort it takes to apply them. Prefer ideas that have a high power-to-cost ratio. Some of my personal favourites:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Randomised algorithms&lt;&#x2F;strong&gt; are often faster, simpler and easier to understand than the best deterministic algorithms. &lt;a href=&quot;http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;summary?doi=10.1.1.25.8277&quot;&gt;The Power of Two Random Choices&lt;&#x2F;a&gt; gives a laundry list of important applications for one simple idea. &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Probability-Computing-Randomized-Algorithms-Probabilistic&#x2F;dp&#x2F;0521835402&#x2F;&quot;&gt;Probability and Computing&lt;&#x2F;a&gt; covers the entire field from the absolute basics of probability to the most sophisticated modern applications.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Entropy&lt;&#x2F;strong&gt; is a very simple concept that governs compression and error-correcting codes, without which modern communications would be impossible. &lt;a href=&quot;http:&#x2F;&#x2F;cm.bell-labs.com&#x2F;cm&#x2F;ms&#x2F;what&#x2F;shannonday&#x2F;shannon1948.pdf&quot;&gt;A Mathematical Theory of Communication&lt;&#x2F;a&gt; managed to lay the foundations for an entire field whilst still being readable by anyone with a basic knowledge of probability.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The possible-worlds model&lt;&#x2F;strong&gt; is a powerful way to reason about distributed algorithms. &lt;a href=&quot;http:&#x2F;&#x2F;www.cs.cornell.edu&#x2F;home&#x2F;halpern&#x2F;papers&#x2F;usingrak.pdf&quot;&gt;Using Reasoning about Knowledge to Analyze Distributed Systems&lt;&#x2F;a&gt; introduces the model and shows how it simplifies reasoning about a variety of famous algorithms and impossibility proofs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Denotational design&lt;&#x2F;strong&gt; is a technique for designing composable abstractions. While it is commonly used, the only explicit description I have encountered is in &lt;a href=&quot;http:&#x2F;&#x2F;conal.net&#x2F;papers&#x2F;type-class-morphisms&#x2F;&quot;&gt;Denotational design with type class morphisms&lt;&#x2F;a&gt;. For a real world example see &lt;a href=&quot;http:&#x2F;&#x2F;www.gecode.org&#x2F;papers&#x2F;Tack_PhD_2009.pdf&quot;&gt;Constraint Propagation - Models, Techniques, Implementation&lt;&#x2F;a&gt; which smoothly transitions from a simple mathematical model of finite-domain constraints to one of the faster constraint solvers in the world.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Surf wikipedia. Get a sense the major areas of study in mathematics and what kinds of problems they deal with. That way, when you encounter a new and scary problem you at least know where to look for the solution.&lt;&#x2F;p&gt;
&lt;p&gt;Keep reading. Read textbooks. Read papers. Read &lt;a href=&quot;http:&#x2F;&#x2F;terrytao.wordpress.com&#x2F;career-advice&#x2F;&quot;&gt;blogs&lt;&#x2F;a&gt;. Read &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;s&#x2F;ref=nb_sb_noss_1?url=search-alias%3Daps&amp;amp;field-keywords=martin+gardner&quot;&gt;puzzle books&lt;&#x2F;a&gt;. Watch &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;Vihart&quot;&gt;videos&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Play around. Don&#x27;t limit yourself to learning &#x27;official&#x27; theory - discover and invent new ideas for yourself.&lt;&#x2F;p&gt;
&lt;p&gt;Teach somebody. The best way to really understand something is to try and explain it to someone else.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy yourself. Life is too short not to.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Imperative thinking and the making of sandwiches</title>
                <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/imperative-thinking-and-the-making-of-sandwiches/</link>
                <guid>http%3A//scattered-thoughts.net/writing/imperative-thinking-and-the-making-of-sandwiches/</guid>
                <description>&lt;p&gt;People regularly tell me that imperative programming is the natural form of programming because &#x27;people think imperatively&#x27;. I can see where they are coming from. Why, just the other day I found myself saying, &amp;quot;Hey Chris, I&#x27;m hungry. I need you to walk into the kitchen, open the cupboard, take out a bag of bread, open the bag, remove a slice of bread, place it on a plate...&amp;quot; Unfortunately, I hadn&#x27;t specified where to find the plate so at this point Chris threw a null pointer exception and died.&lt;&#x2F;p&gt;
&lt;p&gt;The truth is that people think in a variety of different ways in different situations. Most people resort to detailed imperative instructions only when describing complicated or unfamiliar tasks (or when explaining how to interact with a machine, which is itself indicative of how pervasive this mindset is in programming). Even then, the resulting communication is unlikely to resemble a perfectly sequential program and will be full of ambiguity, missing steps and contextual assumptions. Anyone who has ever tried to assemble Ikea furniture knows that clearly communicating or precisely following a series of instructions is actually quite difficult. Indeed, one of the hardest things that beginner programmers have to learn is how to break down a task into a series of simple instructions with no ambiguity. It takes years of practice before the process becomes natural, and meanwhile programming courses have a high failure rate.&lt;&#x2F;p&gt;
&lt;p&gt;If we are going to base the design of our tools on poorly thought-out metaphorical comparisons to making lunch then let&#x27;s at least be realistic about it. &#x27;Make me a ham sandwich, there is bread in the cupboard&#x27; will indeed cause Chris to look in the cupboard. But if there is in fact no bread there, instead of exploding he will probably look elsewhere or ask for clarification. Rather than providing detailed instructions, I provide a goal (sandwich) and hints on how to execute it (try looking for bread in the cupboard). Further constraints are inferred from context and general knowledge (the sandwich should be less than one foot long, there should not be mayo all over the counter afterwards). Chris calculates a series of actions that will produce the desired result and modifies that plan as new information and constraints come to light (no bread in the cupboard).&lt;&#x2F;p&gt;
&lt;p&gt;The reason for communicating in this way is that &lt;em&gt;I don&#x27;t care&lt;&#x2F;em&gt; exactly how the sandwich is made, so long as it is done neatly and quickly. Communicating my exact intent makes the resulting &#x27;program&#x27; simpler and more flexible. I may give additional hints and restrictions when they necessary to speed up the process and Chris may ask for clarification if at any point he is unable to plan a path to the goal, but I never have to resort to a full imperative description of the problem.&lt;&#x2F;p&gt;
&lt;p&gt;Today&#x27;s computers don&#x27;t have enough contextual knowledge to make me a sandwich but there are lots of domains where this approach excels. The classic example is SQL databases. Rather than specifying exact data-structures and operations, the user specifies a high-level schema and sends descriptions of queries. It is the responsibility of the database to choose storage types, manage concurrent changes and generate query plans. It makes these decisions based on cost models, runtime information and constrained search (e.g., postgres uses a genetic search algorithm to choose efficient plans for large queries). If the database makes bad decisions, the user can help it out by adding size hints, specifying indexes and overriding query plans. So long as the process of turning intent into plans is transparent and interactive there is no need to invoke a &lt;a href=&quot;http:&#x2F;&#x2F;c2.com&#x2F;cgi&#x2F;wiki?SufficientlySmartCompiler&quot;&gt;sufficiently smart compiler&lt;&#x2F;a&gt;. A dumb compiler can do the easy but tedious legwork and the human can supervise and correct mistakes. This saves programmer time, makes the intent of the resulting program easier to understand (because it is not cluttered with irrelevant details) and makes it easier to change parts of the system independently (eg adding an index does not require rewriting all of your queries). There is a reason why SQL databases became a standard storage mechanism - this model of programming works incredibly well in this domain.&lt;&#x2F;p&gt;
&lt;p&gt;Indeed, the most painful part of using an SQL database is the interface back to purely imperative programming. The &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Object-relational_impedance_mismatch&quot;&gt;Object-Relational mismatch&lt;&#x2F;a&gt; is often seen as a failure of SQL databases. But consider the relative strengths and learning curves of the two technologies. SQL is often still used for its original goal: enabling non-programmers to mine data. The database handles choice of serialization protocol, data structures for storage and indexing, query algorithms and manages concurrency. For the majority of applications it makes good enough decisions that the user never needs to provide any hints beyond index choice. Imperative programming, on the other hand, requires the user to handle all of these decisions and requires years of practice before the user can reliably build the same kinds of applications. In that light, it is interesting that the popular trend is towards making databases more like imperative languages (NoSQL, object databases) rather than making programming look more like SQL.&lt;&#x2F;p&gt;
&lt;p&gt;To be clear, SQL is a mess. I claim that it is successful &lt;em&gt;despite&lt;&#x2F;em&gt; its many flaws because of the power of the core ideas:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;separate goals from plans&lt;&#x2F;li&gt;
&lt;li&gt;separate logical data models from physical data-structures&lt;&#x2F;li&gt;
&lt;li&gt;automatically handle the translation from goals to plans and from logical to physical models&lt;&#x2F;li&gt;
&lt;li&gt;make the translation transparent and allow the user to provide hints or override sections&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These ideas allow the programming environment to capture the correct level of detail (&#x27;make me a sandwich&#x27; rather than &#x27;go to the kitchen, open the cupboard...&#x27;). This separates meaning from optimisation giving both the user and the compiler more leeway to change the operational details of the program without modifying the specification. The transparency allows us to build this without requiring a SufficientlySmartCompiler™.&lt;&#x2F;p&gt;
&lt;p&gt;This model is well understood in the database world and is the subject of decades of research. Unfortunately the database world and the programming language world rarely interact and so the results are mostly confined to data management systems and rarely extend to general purpose programming, with the possible exception of the &lt;a href=&quot;http:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Datalog&quot;&gt;recent revival of the datalog family&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;So what would a general purpose language look like if it took these ideas to heart? Our current prototype takes inspiration from &lt;a href=&quot;http:&#x2F;&#x2F;shaffner.us&#x2F;cs&#x2F;papers&#x2F;tarpit.pdf&quot;&gt;Out of the Tar Pit&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;www.vpri.org&#x2F;pdf&#x2F;m2009001_prog_as.pdf&quot;&gt;Programming as Planning&lt;&#x2F;a&gt;, using a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Temporal_logic&quot;&gt;temporal logic&lt;&#x2F;a&gt; language to write specifications and a variety of extensible constraint solvers to execute plans. That may sound complicated, but the interface for most users looks like a cross between &lt;a href=&quot;https:&#x2F;&#x2F;ifttt.com&#x2F;&quot;&gt;IFTTT&lt;&#x2F;a&gt; and a simplified version of SQL. Like SQL, the compiler is able to make good decisions for simple programs so the user doesn&#x27;t need to think about data structures, algorithms or concurrency. We haven&#x27;t yet begun to work on surfacing and altering its decisions in the cases where it needs help, but I&#x27;m hopeful that by bootstrapping the compiler and by providing &lt;a href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CB0QFjAA&amp;amp;url=http%3A%2F%2Fdb.cis.upenn.edu%2FDL%2Fwhywhere.pdf&amp;amp;ei=spTJU5jPAcWTyATT8IHgBA&amp;amp;usg=AFQjCNHovRJYd3vBwhtxze_EuL2w6zIT_w&amp;amp;sig2=4oKCgSECEnZnCOB98Tk0Xw&amp;amp;bvm=bv.71198958,d.aWw&quot;&gt;data provenance&lt;&#x2F;a&gt; in the IDE we can go a long way towards easing the learning curve on that front too.&lt;&#x2F;p&gt;
&lt;p&gt;There is a lot of hard work still to go but we have finally have the basic core of our system nailed down and have enough working prototypes to be confident that this approach is compelling.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Pain we forgot</title>
                <pubDate>Sat, 17 May 2014 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/pain-we-forgot/</link>
                <guid>http%3A//scattered-thoughts.net/writing/pain-we-forgot/</guid>
                <description>&lt;p&gt;Much of the pain in programming is taken for granted. After years of repetition it fades into the background and is forgotten. The first step in making programming easier is to be concious of what makes it hard. So let&#x27;s put ourselves in the shoes of a smart but inexperienced end user trying to build, test and maintain a simple application.&lt;&#x2F;p&gt;
&lt;p&gt;Anon the intern is charged with managing lunch orders and quickly realises that their job could be done by a computer: Every day at 1000, send each employee an email with a link to a form where they can choose what they want for lunch. At 1200, gather up the replies and email the list to the catering company. At the end of every month, tally up what each person owes and send the list to accounting. While this a simple program, it covers all the basics: data input, validation, error handling, calculation, presentation, communication, reactivity, scheduling, deployment etc. There are probably dedicated apps that cover this particular example but we are more concerned with how an end-user would solve this kind of problem in general and the difficulties they will encounter along the way.&lt;&#x2F;p&gt;
&lt;p&gt;A lot of the problems we will encounter seem unavoidable - they are forced on us by outside constraints. Most of these constraints though are the product not of deliberate choices but of historical accident. We still program like it&#x27;s 1960 because there are powerful path dependencies that incentivise pretending your space age computing machine is actually an 80 character tty. We are trapped in a local maximum.&lt;&#x2F;p&gt;
&lt;p&gt;One might also argue that these tools are simple enough once you learn to use them. I would only point out that, emperically, that bar is too high. Despite the clear benefits, the vast majority of the world was chosen to remain illiterate. Even tools for which there is a clear need (eg version control) have largely failed to make a dent. Clearly there is a need for a less hostile programming environment.&lt;&#x2F;p&gt;
&lt;p&gt;It is tempting to believe that this is the best we can do and that programming is naturally this complex. But as we work through our lunch app, consider how little of the work we have to do actually relates to the problem of specifying the application.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;&#x2F;h2&gt;
&lt;p&gt;First we need to get a development environment running. Let&#x27;s try clojure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;lein&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; new lunch_app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lunch_app
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; resources
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;touch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; resources&#x2F;index.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;LightTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; resources&#x2F;index.html &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# insert script tag for web repl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;firefox resources&#x2F;index.html
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;LightTable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; clj&#x2F;lunch_app&#x2F;core.clj &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# server side, fire up compiler, connect to repl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;LightTable cljs&#x2F;lunch_app&#x2F;core.cljs &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;# client side, connect to web repl
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point you have already lost 99% of the population and we haven&#x27;t even touched on css or templates yet. Worse, none of this was discoverable. I happen to already know how to setup a simple client-server web app so all these steps seem obvious to me. But Anon the intern needs to be able to open up Programming™ and click &#x27;New Web Form&#x27;. Intellij does a reasonable job on this front - you can start a new web project, compile and open the result in a browser in a few button clicks. But in most environments you need a tutorial just to start a new project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-help&quot;&gt;Finding help&lt;&#x2F;h2&gt;
&lt;p&gt;So Anon is now staring at a blinking cursor on a blank editor page. What next? How does one go about making a web form, or send a email? For common tasks google will probably find you entire code samples or at the very least some javadocs. The samples will be missing lots of implicit information such as how to install the necessary libraries and how to deal with missing dependencies and version conflicts. Transcribing and modifying the examples may lead to bugs that suck up time. It&#x27;s not terrible, mostly thanks to sites like stackoverflow, but it&#x27;s still a lot of unnecessary distractions from the task at hand.&lt;&#x2F;p&gt;
&lt;p&gt;I want to just type &#x27;email&#x27; and see a list of functions and libraries relating to email. If I select a function from autocomplete, its dependencies should be automatically added to the project without any fuss. Missing dependencies or version conflicts should be presented alongside suggestions for resolution (click here to choose version A). &lt;a href=&quot;http:&#x2F;&#x2F;blogs.msdn.com&#x2F;b&#x2F;visualstudio&#x2F;archive&#x2F;2014&#x2F;02&#x2F;17&#x2F;introducing-bing-code-search-for-c.aspx&quot;&gt;Bing Code Search&lt;&#x2F;a&gt; takes this idea even further and autocompletes code for common tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-code&quot;&gt;Writing code&lt;&#x2F;h2&gt;
&lt;p&gt;Even for experts, programming is an exploratory process. We experiment with libraries, run through examples and iteratively build up features. One of the most painful lessons beginners have to learn is just how often everyone is wrong about everything. Tightening the feedback loop between writing code and seeing the results reduces the damage caused by wrong assumptions, lightens the cognitive load of tracking what should be happening and helps build accurate mental models of the system. The latter is especially important for beginners who often suffer from miscomprehensions about even the basic semantics of the language. Unfortunately, the most you are likely get is automatically refreshing your browser. Maybe a REPL if you are lucky.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine a spreadsheet where every time you change something you must open a terminal, run the compiler and scan through the cell &#x2F; value pairs in the printout to see the effects of your change. We wouldn&#x27;t put up with UX that appalling in any other tool but somehow that is still the state of the art for programming tools. I suspect a lot of the blame lies in our failure to find a model for GUI tools that is as flexible and composable as plain text. I see a lot of potential in Paul Chiusano&#x27;s ideas for &lt;a href=&quot;http:&#x2F;&#x2F;pchiusano.blogspot.com&#x2F;2013&#x2F;05&#x2F;the-future-of-software-end-of-apps-and.html&quot;&gt;killing the application&lt;&#x2F;a&gt; and in Eskil Steenburgs &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?feature=player_detailpage&amp;amp;v=f90R2taD1WQ#t=1837&quot;&gt;Verse&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Light Table at least gives you &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=gtXpOD6jFls&quot;&gt;inline eval&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=d8-b6QEN-rk&quot;&gt;watches&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=YY6B9EHbH24&quot;&gt;instarepl&lt;&#x2F;a&gt;. This type of interaction is taken further by ideas like &lt;a href=&quot;http:&#x2F;&#x2F;gbracha.blogspot.com&#x2F;2012&#x2F;11&#x2F;debug-mode-is-only-mode.html&quot;&gt;Debug Mode is the Only Mode&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;www.subtext-lang.org&#x2F;OOPSLA04.pdf&quot;&gt;Example Centric Programming&lt;&#x2F;a&gt;). Instead of having a separate editor, compiler, repl, debugger etc you develop everything by editing code in the debugger. It is a similar idea to JIT compilers - the IDE has more information available at runtime then at compile time so it can make better decisions and provide better feedback (eg by generating example inputs and outputs as you write a function).&lt;&#x2F;p&gt;
&lt;p&gt;Plain text is also very limiting. Language is very good for conveying meaning but not so great for displaying data. Being able to quickly throw up graphs and diagrams (like in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;rhizome&quot;&gt;rhizome&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;automat&quot;&gt;automat&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;lamina&#x2F;wiki&#x2F;Channels&quot;&gt;lamina&lt;&#x2F;a&gt;) is incredibly useful. Light Table&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;www.chris-granger.com&#x2F;images&#x2F;040&#x2F;ipygraphs.png&quot;&gt;inline graphs&lt;&#x2F;a&gt; are a start but we haven&#x27;t otherwise made much use of visualisation. First person to implement inline graphviz gets a cookie.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;running-code&quot;&gt;Running code&lt;&#x2F;h2&gt;
&lt;p&gt;Surprisingly, one of the most common difficulties we have heard from beginners is just running code. Even if we were to hand Anon the entire lunch_app source code they would likely still struggle to actually use it. They have to install dependencies, compile code, start servers and open ports. At each step the errors are difficult to diagnose and time-consuming to fix. The tools that are intended to fix this are often even worse themselves (every time I write a blog post in octopress I find rvm has somehow broken again). IDEs like Intellij and Visual Studio do a reasonable job of standardising the build process and capturing dependencies so that it is usually possible to import a project and just hit run, but that only goes as far as development. For deployment we have tools like Docker which make deployment highly repeatable but don&#x27;t help much with capturing the process in the first place. None of these really help Anon the intern deploy lunch_app.&lt;&#x2F;p&gt;
&lt;p&gt;The lunch app is going to need scheduling too, and error logging and monitoring. Anon needs to be alerted if the emails don&#x27;t go out or if there are no reponses. Setting up even the simplest logging, monitoring and restarting is a hassle even for professional programmers.&lt;&#x2F;p&gt;
&lt;p&gt;Wolfram&#x27;s Language &lt;a href=&quot;https:&#x2F;&#x2F;www.wolfram.com&#x2F;universal-deployment-system&#x2F;&quot;&gt;workflow&lt;&#x2F;a&gt; is pretty close to ideal. You work in a notebook where code runs and updates instantly with no manual compile step. Deploying to a cloud server is just a single function call which automatically collects code and dependencies and returns a url where your program is now running. No need to think about files or libraries, no project files, no build artefacts, no messing about setting up servers and opening ports.&lt;&#x2F;p&gt;
&lt;p&gt;From there it doesn&#x27;t take much imagination to add easy task scheduling and an error logger that emails Anon when something goes wrong. None of this requires giving up control either. You could just as easily replace &#x27;cloud server&#x27; with &#x27;departmental server&#x27; or &#x27;little black box that came with our internet&#x27;. The important point is that there are sensible defaults for deployment and that it is &#x27;batteries included&#x27; in the language or IDE.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what&quot;&gt;What?&lt;&#x2F;h2&gt;
&lt;p&gt;The simplest question we could ask about our application is &#x27;what is the current state&#x27;. Bizaarely, very few programming environments give you any help on this front. Many programmers get by with nothing but print statements. If you are lucky you may have a debugger or watches, but you still end up looking at your application through a keyhole. You have to actively insert instrumentation by hand to view the state of each tiny part of the application. If you want to modify that state you have to mentally work backwards and construct the correct piece of code to find and change the variable that you are looking at. It may not even have a name that is accessible from the repl (eg a variable in an anonymous closure). Viewing and modifying the state of the application should be a fundamental interaction and yet it&#x27;s made unreasonably difficult by our languages and tools.&lt;&#x2F;p&gt;
&lt;p&gt;Compare this to a tool like Excel or &lt;a href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=kvFDV1oM-ZA&quot;&gt;Django Admin&lt;&#x2F;a&gt; where &lt;em&gt;all&lt;&#x2F;em&gt; the data is laid out for easy browsing without any active effort from the user and can be &lt;em&gt;directly&lt;&#x2F;em&gt; modified just by clicking and typing. The tooling itself isn&#x27;t difficult but it requires rethinking the way we manage state in programming languages. All mainstream languages, regardless of paradigm, encourage &lt;a href=&quot;@writing&#x2F;2014-02-17-local-state-is-harmful.md&quot;&gt;anonymous local state&lt;&#x2F;a&gt; which can&#x27;t be easily observed and modified.&lt;&#x2F;p&gt;
&lt;p&gt;Once we have managed state, whether using a relational model like &lt;a href=&quot;http:&#x2F;&#x2F;bloom-lang.net&#x2F;&quot;&gt;Bloom&lt;&#x2F;a&gt; or more traditional functional data-structures like &lt;a href=&quot;http:&#x2F;&#x2F;infoscience.epfl.ch&#x2F;record&#x2F;136776&quot;&gt;Opis&lt;&#x2F;a&gt;, we can easily record history too. Tools like &lt;a href=&quot;http:&#x2F;&#x2F;chrononsystems.com&#x2F;products&#x2F;chronon-time-travelling-debugger&quot;&gt;time travelling debuggers&lt;&#x2F;a&gt; that require huge engineering effort in traditional languages become trivial when you can cheaply record or reconstruct the past. Reproducing bugs is easier when you can just snapshot your history and mail it to the developer. Bloom and Opis are also both able to determine dataflow topologies from source code so when stepping into an unfamiliar project you can quickly get a visual overview of how the various components communicate (examples are buried &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;papers&#x2F;cidr11-bloom.pdf&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;infoscience.epfl.ch&#x2F;record&#x2F;136776&#x2F;files&#x2F;DagandETAL09Opis.pdf&quot;&gt;here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h2&gt;
&lt;p&gt;Traditional debuggers focus entirely on the &lt;em&gt;what&lt;&#x2F;em&gt; - walking through a narrow slice of state on step at a time. But when debugging the question one usually starts with is &lt;em&gt;why&lt;&#x2F;em&gt;? Why are the lunch options in the wrong order? Why didn&#x27;t the lunch email go out? Why is everyones bill for the month zero? These questions typically involve reasoning backwards from effect to cause whereas debuggers walk you forward from cause to effect. The result is that debugging consists mostly not of finding the problem but manually walking backwards along the chain of causes by setting up isolated test cases and repeatedly rerunning them under the debugger.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.brackets.io&#x2F;2013&#x2F;08&#x2F;28&#x2F;theseus-javascript-debugger-for-chrome-and-nodejs&#x2F;&quot;&gt;Theseus&lt;&#x2F;a&gt; improves on this slightly by capturing arguments at the entrace to each event callback, so that you don&#x27;t have to repeatedly rerun. Ko and Myer&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;repository.cmu.edu&#x2F;cgi&#x2F;viewcontent.cgi?article=1165&amp;amp;context=hcii&quot;&gt;causal debugger&lt;&#x2F;a&gt; explicitly answers the questions &lt;em&gt;why&lt;&#x2F;em&gt; and &lt;em&gt;why not&lt;&#x2F;em&gt; by tracing the tree of causes for each state change, so that the process of walking backwards from effect to cause is entirely automated and you can just focus on figuring out where things went wrong.&lt;&#x2F;p&gt;
&lt;p&gt;The problem gets even worse with scale. Debugging by following control flow works poorly in large systems where what really matters is &lt;em&gt;data flow&lt;&#x2F;em&gt;. Answering questions like &#x27;why do orders sometimes get lost&#x27; requires tracing through an enourmous graph, one which is not even recorded in most systems and instead has to be inferred from logs, like piecing together ancient civilisations from broken pottery. &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;papers&#x2F;eurosys10-boom.pdf&quot;&gt;BOOM analytics&lt;&#x2F;a&gt; deals with this by reflecting all data, from error logs and persistent data to message queues and profiling data, into relational tables that are made available to overlog - the same distributed query language that runs the rest of the system. This means you can directly run queries over the causality graph, such as &#x27;for each order that was entered into the system but not completed, give me a list of every message was linked to that order by some chain of rules&#x27;. Since the recording of this data was itself governed by overlog rules you can switch on detailed logging at runtime for specific kinds of data eg &#x27;record all messages concerning order 197 originating from cluster C and forward them to me&#x27;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;change&quot;&gt;Change&lt;&#x2F;h2&gt;
&lt;p&gt;Outside of the software world, version control and collaboration software is limited to saving lunch_app.v07 and attaching it to an email. Collaborating on a single project is difficult and slow. The standard tools of the trade for programmers (git, mercurial etc) are vastly more powerful and solve a pressing problem but present an interface that &lt;a href=&quot;http:&#x2F;&#x2F;steveko.wordpress.com&#x2F;2012&#x2F;02&#x2F;24&#x2F;10-things-i-hate-about-git&#x2F;&quot;&gt;baffles and frustrates many users&lt;&#x2F;a&gt;. The underlying model is elegant and powerful but even the graphical interfaces require a significant investment of time and effort to understand.&lt;&#x2F;p&gt;
&lt;p&gt;What Anon needs is somewhere between &lt;a href=&quot;http:&#x2F;&#x2F;www.emacswiki.org&#x2F;emacs&#x2F;UndoTree&quot;&gt;undo-tree&lt;&#x2F;a&gt; (without the ascii art) and &lt;a href=&quot;http:&#x2F;&#x2F;etherpad.org&#x2F;&quot;&gt;etherpad&lt;&#x2F;a&gt;. Changes should be automatically recorded and (optionally) retroactively tagged with commit messages. Real-time collaboration should be as simple as clicking on a coworkers face. Undoing changes and checking out different versions should just be a matter of moving around on the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blog&#x2F;39-say-hello-to-the-network-graph-visualizer&quot;&gt;commit graph&lt;&#x2F;a&gt;. Dragging a piece of code out of the editor should produce a link to the VCS page for that code. If the editor understands the structure of the code we even can track semantic changes to individual units of code (eg rename function, reorder expressions) rather than diffing text in a file, making both automatic and manual merges easier since we have a better record of the intent of the change.&lt;&#x2F;p&gt;
&lt;p&gt;Similary, when Anon 2 the accountant wants to modify their client-side copy of the lunch form to remember their favourite lunches it should be a simple process. No hunting down and recompiling system binaries, no installing greasemonkey scripts from the filesystem. Just click to open the source, modify to your satisfaction, click to save. I&#x27;ve never seen anything come close to this basic interaction. The &lt;a href=&quot;http:&#x2F;&#x2F;blog.printf.net&#x2F;articles&#x2F;2006&#x2F;10&#x2F;29&#x2F;the-view-source-key&#x2F;&quot;&gt;OLPC view source button&lt;&#x2F;a&gt; promised exactly this experience but as far as I know it never materialised (it certainly didn&#x27;t work on mine).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;learning&quot;&gt;Learning&lt;&#x2F;h2&gt;
&lt;p&gt;Programming tools generally pay very little attention to producing helpful error messages (with &lt;a href=&quot;http:&#x2F;&#x2F;cs.brown.edu&#x2F;%7Esk&#x2F;Publications&#x2F;Papers&#x2F;Published&#x2F;mfk-measur-effect-error-msg-novice-sigcse&#x2F;paper.pdf&quot;&gt;one&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;research.microsoft.com&#x2F;pubs&#x2F;64590&#x2F;helium.pdf&quot;&gt;two&lt;&#x2F;a&gt; exceptions). There is a modest amount of &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Man-Who-Lied-His-Laptop-ebook&#x2F;dp&#x2F;B003YUC7BI&#x2F;ref=sr_1_1?ie=UTF8&amp;amp;qid=1400099030&amp;amp;sr=8-1&amp;amp;keywords=man+who+lied+to+his+laptop&quot;&gt;evidence&lt;&#x2F;a&gt; that people interact with computers as if they were people. Many of the results of this research are suprising and counter-intuitive eg &lt;a href=&quot;http:&#x2F;&#x2F;faculty.washington.edu&#x2F;ajko&#x2F;papers&#x2F;Lee2011Gidget.pdf&quot;&gt;personifying the compiler&lt;&#x2F;a&gt; can improve learning rates in students. Given that, do you really want to spend lots of time with the kind of person who just repeatedly shouts &#x27;cannot call method undefined of undefined!&#x27; in your face without so much as hinting how you might fix the problem or where you might start looking?&lt;&#x2F;p&gt;
&lt;p&gt;Our programming environments are absurdly hostile. Interfaces either &lt;a href=&quot;http:&#x2F;&#x2F;www.suggestsoft.com&#x2F;images&#x2F;quest-software&#x2F;comparerocket-for-visual-studio.gif&quot;&gt;overwhelm with detail&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;i.stack.imgur.com&#x2F;VqPMv.png&quot;&gt;hide everything&lt;&#x2F;a&gt;. Most actions cannot be undone (eg changing a variable, defining a function, installing a library). Runtimes default to exiting on uncaught exceptions, throwing away all the context that would be useful for solving the problem and forcing the user to try to recreate the crashing state. When any action can lead to confusing breakage and ruined work, inexperienced users suffer from fear and paralysis and an unwillingness to experiment. This cripples their ability to learn.&lt;&#x2F;p&gt;
&lt;p&gt;Error messages should at the very least identify what might have caused the error and preferably offer options for fixing it. Intellij, for example, will highlight spelling mistakes and offer to correct them (&amp;quot;did you mean...&amp;quot;). Good end user applications will link common errors to FAQs. Suggestions don&#x27;t need to be perfect, just accurate. Everyone hated Clippy because his advice was useless and repetitive and lacked context. The golden rule is if you don&#x27;t have something useful to say, don&#x27;t say nothing at all. One ambitious project (ref?) crowd-sourced examples of causes of and solutions to type-checking errors. Large-scale data collection and testing may end up being the best path to providing helpful feedback.&lt;&#x2F;p&gt;
&lt;p&gt;Environments also need to be more proactive. Uncaught errors should drop the user into the debugger where they can &lt;a href=&quot;http:&#x2F;&#x2F;www.gigamonkeys.com&#x2F;book&#x2F;beyond-exception-handling-conditions-and-restarts.html&quot;&gt;edit and continue&lt;&#x2F;a&gt;. Editors can spot common mistakes and suggest corrections (Intellij is pretty good at this, as is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jonase&#x2F;kibit&quot;&gt;kibit&lt;&#x2F;a&gt;, but many people are still working with editors that don&#x27;t even warn them of typos or shadowed variables). Profilers can heuristically explore bottlenecks and suggest solutions (eg if foo was indexed this query would run 10x faster). Rather than rely on users to create their own tests we can prompt them for examples and invariant properties and &lt;a href=&quot;http:&#x2F;&#x2F;www.scs.stanford.edu&#x2F;11au-cs240h&#x2F;notes&#x2F;testing-slides.html&quot;&gt;search for counter-examples&lt;&#x2F;a&gt;. &lt;a href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=3&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CD0QFjAC&amp;amp;url=http%3A%2F%2Finfoscience.epfl.ch%2Frecord%2F136776&amp;amp;ei=gNpzU7yeKMTesASLr4KoCA&amp;amp;usg=AFQjCNGyqXOAavdVfGxGuBFZbTzobRmXtQ&amp;amp;sig2=jvF_qeyNTyCOffdJkC-twA&amp;amp;bvm=bv.66917471,d.cWc&quot;&gt;Opis&lt;&#x2F;a&gt; comes equipped with a profiler that automatically estimates the asymptotic complexity of each function in the model and a finite-state model checker that can prove invariants always hold by efficiently and exhaustively checking every possible state. Bloom features a &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;papers&#x2F;dbtest12-bloom.pdf&quot;&gt;generative testing framework&lt;&#x2F;a&gt; that uses an SMT solver to efficiently explore the space of possible and a &lt;a href=&quot;http:&#x2F;&#x2F;www.bloom-lang.net&#x2F;calm&#x2F;&quot;&gt;static analysis pass&lt;&#x2F;a&gt; that warns of missed coordination points in distributed programs. Does your IDE even run your unit tests for you?&lt;&#x2F;p&gt;
&lt;p&gt;Finally, environments can&#x27;t be black boxes. Beginners need a simple experience but if they are to become experts they need to be able to shed the training wheels and open the hood. Many attempts at end-user programming failed because they assumed the user was stupid and so wrapped everything in cotton wool. Whenever we provide a simplified experience, there should be an easy way to crack it open and see how it works. Nothing should be magic forever. Ensure that the users curiousity is never frustrated and they won&#x27;t need teaching for long.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;plans&quot;&gt;Plans&lt;&#x2F;h2&gt;
&lt;p&gt;Some of the things I have described are just a matter of paying attention to the details. Others require doing things very differently. The key parts of our plan for Aurora are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;storing code in a networked database with version control and realtime sync&lt;&#x2F;li&gt;
&lt;li&gt;a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Structure_editor&quot;&gt;structured editor&lt;&#x2F;a&gt; to enable rich ASTs with unique UUIDs&lt;&#x2F;li&gt;
&lt;li&gt;managing environments declaratively so that evaluating code is always safe&lt;&#x2F;li&gt;
&lt;li&gt;a uniform (logical) data model where every piece of state is globally addressable&lt;&#x2F;li&gt;
&lt;li&gt;a model for change that tracks history and causality&lt;&#x2F;li&gt;
&lt;li&gt;a powerful query language that can be used for querying code, runtime state, causal graphs, profiling data etc&lt;&#x2F;li&gt;
&lt;li&gt;composable gui tools with transparent guts&lt;&#x2F;li&gt;
&lt;li&gt;a smooth interface to the old world so we don&#x27;t end up sharing a grave with smalltalk&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will dive into these in more detail in the coming months.&lt;&#x2F;p&gt;
&lt;p&gt;None of this will be at all easy, but it&#x27;s no harder than continuing what we are doing now and much of the groundwork has already been laid if you know where to look. If one thing is certain, it is that the future is not 80 characters wide.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Local state is harmful</title>
                <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/local-state-is-harmful/</link>
                <guid>http%3A//scattered-thoughts.net/writing/local-state-is-harmful/</guid>
                <description>&lt;p&gt;Don&#x27;t lynch me just yet :)&lt;&#x2F;p&gt;
&lt;p&gt;Picture a traditional webapp. We have a bunch of stateless workers connected to a stateful, relational database. This is a setup with a number of excellent properties:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All state can be queried using a uniform api - SQL. This enables flexible ad-hoc exploration of the application state as well as generic UIs like &lt;a href=&quot;https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;en&#x2F;dev&#x2F;ref&#x2F;contrib&#x2F;admin&#x2F;&quot;&gt;django admin&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Every item of state has a unique and predictable name by which it can be identified - a unique key in the table.&lt;&#x2F;li&gt;
&lt;li&gt;Access to state can be restricted and controlled. Transactions prevent different workers from interfering with each other. ACLs allow giving individual workers access to only the information they need to limit the scope of mistakes.&lt;&#x2F;li&gt;
&lt;li&gt;Changes to state can be monitored. Tailing the transaction log is an effective way to stream to a backup server or to debug errors that occurred in production. One can reconstuct the state of the database at any time.&lt;&#x2F;li&gt;
&lt;li&gt;State is separate from code. You can change client code, rename all your classes or restart workers on the fly and the state in the database will be unharmed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The database state is also pervasive, mutable and &lt;em&gt;global&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now let&#x27;s zoom in and look at our imperative, object-oriented workers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;State is encapuslated in objects and hidden behind an ad-hoc collection of methods.&lt;&#x2F;li&gt;
&lt;li&gt;Objects are effectively named only by their location in the (cyclic, directed) object graph or their position in memory.&lt;&#x2F;li&gt;
&lt;li&gt;Access to state can be restricted and controlled through encapsulation. Concurrent modifications are a constant source of bugs. Access control is adhoc and transitive - if you can walk the object graph to an object you can access it.&lt;&#x2F;li&gt;
&lt;li&gt;Changes to state are usually monitored via adhoc methods such as manually inserting debug statements. Approximating history by watching debug statements and reconstructing state in ones head is the normal method of debugging.&lt;&#x2F;li&gt;
&lt;li&gt;State is entangled with code. Portable serialization is difficult. Live-coding works to some extent but requires reasoning about the interaction of state and code (eg in js redefining a function does not modify old instances that may still be hanging around in data structures or in callbacks)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Functional programmers need not look so smug at this point. The Haskell&#x2F;OCaml family struggles to redefine types at runtime or handle live data migrations (the declaration of a nominal type is a side-effect in a live language). Clojure does better on these points but still gets burned by nominal types (eg extend a deftype&#x2F;defrecord and the reeval the definition) and more generally by treating the definition of new code as mutation of state (which has to be papered over by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;tools.namespace&#x2F;&quot;&gt;tools.namespace&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Why are these points important? We spend most of our time not writing code but &lt;em&gt;reasoning about code&lt;&#x2F;em&gt;, whether hunting for bugs, refactoring old code or trying to extend a module. We end up with questions like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When did this state change?&lt;&#x2F;li&gt;
&lt;li&gt;What caused it to change?&lt;&#x2F;li&gt;
&lt;li&gt;Did this invariant ever break?&lt;&#x2F;li&gt;
&lt;li&gt;How did this output get here?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How do we answer these questions?&lt;&#x2F;p&gt;
&lt;p&gt;In the database we have a transaction log containing for each transaction: the queries involved, the commit time, the client name etc. We can write code that specifies the condition we are interested in via an sql query, locates the relevant transactions by running through the log and then recreates the state of the database at that point. This works even if the error happened elsewhere - just have the user ship you their transaction log.&lt;&#x2F;p&gt;
&lt;p&gt;In the worker, we have two familiar workhorses:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Manually add print statements, recompile the code, try to recreate the conditions we are interested in and then reconstruct the causality by reading the printed statements&lt;&#x2F;li&gt;
&lt;li&gt;Add a breakpoint in the debugger, try to recreate the conditions we are interested in and then step through the code line by line&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;What these two have in common is that they are both achingly &lt;em&gt;manual&lt;&#x2F;em&gt;. There is no easy way to automate the process. There are no libraries full of debugging strategies that you can deploy. The questions we have are about time and causality but our current tools restrict us to looking at tiny slices of space (print statements) or time (debuggers) and offer no way to automate our actions.&lt;&#x2F;p&gt;
&lt;p&gt;I propose that if we were to manage state more like a database and less like a traditional imperative language then understanding and debugging programs would become easier. As is traditional, I aim to convince the reader by the use of an unrealistically simple example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;counting-sheep&quot;&gt;Counting sheep&lt;&#x2F;h2&gt;
&lt;p&gt;As everyone knows the main purpose of advanced technology has always been to help us &lt;a href=&quot;http:&#x2F;&#x2F;sl4.org&#x2F;wiki&#x2F;TheSimpleTruth&quot;&gt;count our sheep&lt;&#x2F;a&gt;. At the dawn of time this was very simple.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;dec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(open port)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(case (receive-message socket)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-in (inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-out (dec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))))

(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1081&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But as civilisation advanced so too did the demands on technology. With newfound riches came multiple pens of sheep. People soon realised that the trusty old global variable had a crucial flaw - it was not reentrant. Having been burned by mutable state they decided to keep it under lock and guard.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;make-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;dec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)}))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(open port)
        {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;dec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]} (make-counter)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(case (receive-message socket)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-in (inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-out (dec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))))

(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1081&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1082&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Later programmers were a more trusting bunch and left their data unprotected, but still hidden.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(open port)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(case (receive-message socket)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-in (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-out (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))))

(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1081&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1082&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It took thousands of years of progress before anyone asked the crucial question: &amp;quot;So how many sheep do we actually have?&amp;quot;. The guardian of the count was reluctant to give up this delicate information, having been lectured all its life about the importance of data hiding. The only solution was torture.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(open port)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(case (receive-message socket)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-in (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-out (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;how-many-sheep (send-message socket [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep])))))

(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1081&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1082&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In erlang they still hold to these cruel and brutal traditions.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try something different. We can separate state from code and allow uniform access to all application state. We just have to carefully control access to that state.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; in the code

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(open port)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(case (receive-message socket)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-in (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-out (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))))

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; in the repl

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;state
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-a (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-b (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)})

(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1081 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-a))
(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1082 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-b))

@(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-a) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; check the number of sheep

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1083 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-a)) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; share sheep with 1081
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a kind of pseudo-global state. We can easily examine any application state in the repl but functions can only modify state this is passed to them directly. All we need now is to monitor changes to the state.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;socket &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(open port)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(case (receive-message socket)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-in (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sheep-out (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;state
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}))

(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1081 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(subatom state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-a))
(run-counter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1082 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(subatom state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-b))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;subatom&lt;&#x2F;code&gt; is not a clojure function, but it shows up regularly in clojure libraries (eg my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;bigatom&quot;&gt;bigatom&lt;&#x2F;a&gt; is a simple, self-contained implementation). All it does is create a view on the original atom. This approximates a mutable tree while still allowing immutable snapshots.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}}))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(subatom x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bar))

@y &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; =&amp;gt; 0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; =&amp;gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
@x &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; =&amp;gt; {:foo {:bar 1}}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can record changes and explore them programatically. Suppose that sheep pen 1082 is actually inside sheep pen 1081. If everything is working correctly, we should have the invariant &lt;code&gt;(&amp;gt; (:count-a @state) (:count-b @state))&lt;&#x2F;code&gt;. Most of the time this is indeed the case, but once in a blue moon an unhappy customer reports that the invariant is broken.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, as modern programmers we can simply query the clients state history to find out what happened.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;history
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;state]]))

(add-watch state history (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_ _ new-state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;history &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;conj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) new-state])))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;drop-while
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;state&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-a state) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;count-b state)))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;history)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a trivial example, but this kind of ability to debug programmatically is potentially very valuable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;real-world-use&quot;&gt;Real world use&lt;&#x2F;h2&gt;
&lt;p&gt;Removing hidden state does not have to be a binary change. The more you move in that direction the more of the benefits you will gain.&lt;&#x2F;p&gt;
&lt;p&gt;The project that convinced me was a prototype betting exchange written in clojure. Although I relied on mutable collections (and thus lost the ablity to record history easily) I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;prismatic&#x2F;plumbing&quot;&gt;Graph&lt;&#x2F;a&gt; to wire components together.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;log
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stream (fnk [log-file] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;FileOutputStream. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;log-file))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;channel (fnk [stream] (.getChannel stream))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;writer (fnk [stream] (clojure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;writer stream))})

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;server
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;log log
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;queue (fnk [batch-size] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;ArrayBlockingQueue. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;batch-size))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;server (fnk [queue frame port] (network&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;receive-events queue frame port))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;state (fnk [init-state] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;init-state))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;persistor (fnk [state queue [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;log channel writer] handler batch-size]
                   (future-loop (persistence&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;handle-events state queue channel writer handler batch-size)))})

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defnk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;client [frame port]
  (lamina&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;wait-for-result (tcp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tcp-client {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;host &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;localhost&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;port port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;frame frame})))

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; wiring for throughput test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;load
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;client client
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;send-count (fnk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;recv-count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;recv-count
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;counter (fnk [recv-count] (future (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;counter-loop recv-count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;recv-count)))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;loader (fnk [client send-count recv-count rate-limit]
                (future (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;loader-loop client send-count recv-count rate-limit)))})

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; wiring for latency test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;measure
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;client client
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;measurer (fnk [client] (future (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;measurer-loop client)))})
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With explicit names for all state, dependency injection is easy. When I start a component I can swap out the network implementation for testing or compare different implementations of the event handler etc.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((graph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;eager-compile server)
          {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;19997
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;frame etf-frame
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;init-state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;init-state
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;handler exchange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;handle-event
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;log-file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;test-out&amp;quot;
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;batch-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Creating a component returns a nested map of all the state in all the subcomponenets. I can poke around inside the state whilst debugging. A little snippet I often used polls the queue size and prints to the console whenever it is full.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(future
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.size (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;queue s)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;batch-size s))
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Full at&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uniform access to all state makes it easy to write generic functions to eg view the entire object graph or shutdown every component.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defprotocol &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Poke
  (poke [this]))

(extend-protocol Poke
  java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Future
  (poke [this] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;deref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pending-future))
  clojure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Atom
  (poke [this] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;this))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;poke-all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(satisfies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Poke form)
    (walk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;identity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;poke-all (poke form))
    (walk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;identity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;poke-all form)))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defprotocol &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Kill
  (kill [this]))

(extend-protocol Kill
  clojure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Fn
  (kill [this] (this))
  java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Future
  (kill [this] (future-cancel this)))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;kill-all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (walk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(satisfies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Kill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (kill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) kill-all form))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The difference in productivity compared to the old actor-based version was incredible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;boom.cs.berkeley.edu&#x2F;&quot;&gt;Overlog&lt;&#x2F;a&gt; makes use of this idea by reflecting many runtime events into in-process tables. My favourite &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;papers&#x2F;eurosys10-boom.pdf&quot;&gt;paper&lt;&#x2F;a&gt; describes using streaming queries on these tables for programmable profiling, monitoring and even distributed debugging.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swannodette&#x2F;om&quot;&gt;Om&lt;&#x2F;a&gt; uses cursors similarly to the way I use subatoms here, to manage relative names within the state tree. David Nolen&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;swannodette.github.io&#x2F;&quot;&gt;blog&lt;&#x2F;a&gt; has some excellent examples of using this global state to enable application-wide undo and syncing state without modifying application code.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;facebook.github.io&#x2F;react&#x2F;blog&#x2F;2014&#x2F;01&#x2F;02&#x2F;react-chrome-developer-tools.html&quot;&gt;React devtools&lt;&#x2F;a&gt; allow you to click on an element on the page and display the state of the component that created that element.  A trivial extension in Om would be to display the past states and for each state change show the event and handler that caused that change. Together with the ability to programmatically access state and history this could lead to a beautiful debugging experience.&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;Why is this box here? Ah, it comes from component Foo. The state of component Foo is messed up. When did that happen? Ah, it was caused by event handler Bar firing with these arguments.&amp;quot; How long would that same chain of reasoning take you with println debugging? In a language with tighter tool integration it should be possible to just directly drop into the debugger at that point in history and replay the events.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Interaction with running programs (live coding, debugging, monitoring, hot code reloading etc) is greatly aided by several design principles:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;All state can be queried using some uniform api.&lt;&#x2F;li&gt;
&lt;li&gt;Every item of state has a unique and predictable name by which it can be identified.&lt;&#x2F;li&gt;
&lt;li&gt;Access to state can be restricted and controlled.&lt;&#x2F;li&gt;
&lt;li&gt;Changes to state can be monitored.&lt;&#x2F;li&gt;
&lt;li&gt;State is separate from code.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These principles are well understood in database systems and in ops in general.&lt;&#x2F;p&gt;
&lt;p&gt;The same principles are not applied in the small by most programmers and are not encouraged by most languages.&lt;&#x2F;p&gt;
&lt;p&gt;Several examples exist of using these principles to quickly produce simple, powerful programs.&lt;&#x2F;p&gt;
&lt;p&gt;Most of our questions about code are questions about time, state and causality. Our existing tools do not lend much support in answering those questions. Following these principles makes it easier to develop better tools.&lt;&#x2F;p&gt;
&lt;p&gt;I would also speculate that a large part of the &lt;a href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ayPD0U_FO4Y&quot;&gt;frustration&lt;&#x2F;a&gt; that people experience with computers is a result of opaque abstractions which prevent users from being able to connect cause and effect when the machine misbehaves.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>We&#x27;re not even trying</title>
                <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/were-not-even-trying/</link>
                <guid>http%3A//scattered-thoughts.net/writing/were-not-even-trying/</guid>
                <description>&lt;p&gt;Light Table has a feature called &lt;a href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=d8-b6QEN-rk&quot;&gt;watches&lt;&#x2F;a&gt;, where you select an expression to watch and behind the scenes the editor wraps that expression in some code that sends the results back to the editor every time the expression is executed. You can also write custom watches that wrap the selected expression however you like. For example, this watch displays the time the expression took to execute.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;alt-m&amp;quot; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;editor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;watch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;custom-watch-selection
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;(let [start (.getTime (js&#x2F;Date.))
                  res (do __SELECTION__)]
              __|(str (- (.getTime (js&#x2F;Date.)) start) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt; ms&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;)|__
              res)&amp;quot;
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;timed&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;verbatim &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;})]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly, you can write custom eval commands which wrap the selected expression before evaluating it. I have a whole pile of these for tasks from benchmarking an expression to displaying the bytecode for the resulting object.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;quot;alt-shift-b&amp;quot; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;custom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;(do (require &amp;#39;[criterium.core]) (with-out-str (criterium.core&#x2F;bench (do __SELECTION__))))&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;result-type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;verbatim &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;})]
&amp;quot;alt-d&amp;quot; [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;custom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;(do (require &amp;#39;[no.disassemble]) (no.disassemble&#x2F;disassemble (do __SELECTION__)))&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;result-type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;inline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;verbatim &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;})]
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has completely replaced print statement debugging for me. It probably saves me 10-20 minutes of typing per day, reduces context switching a little and prevents me accidentally checking in print statements. It doesn&#x27;t sound like much, but if you make three or four improvements like that it starts to add up.&lt;&#x2F;p&gt;
&lt;p&gt;But the point of this post is not Light Table is awesome (although it is). The point is that I spent four years as a professional programmer typing in print statements every day and I never once thought to automate that process. If I missed something so simple, what else am I missing?&lt;&#x2F;p&gt;
&lt;p&gt;I lose hours and hours every week to mistyped variables and function names. When using clojurescript in Light Table there are no warnings shown and the stack traces don&#x27;t identify which variable was mistyped. But the clojurescript compiler can emit warnings and webkit inspector can show which line the error occured at. All I have to do is take a few hours to improve the clojurescript plugin and I would never suffer from mistyped names again.&lt;&#x2F;p&gt;
&lt;p&gt;I spend even more hours painstakingly inserting watches and setting up test cases when all I really want to do is step through the call-stack. We have a debugger! The webkit inspector has an excellent debugger which uses the source maps that we so carefully emit to enable stepping though clojurescript code directly. But I haven&#x27;t gotten around to taking ten minutes to learn to use it, so I rely entirely on watches instead.&lt;&#x2F;p&gt;
&lt;p&gt;I know I&#x27;m not the only one. I&#x27;ve seen otherwise intelligent people go through a code file and manually rename every occurence of a function, as if they had never heard of find-and-replace. I know people who write code in notepad because they don&#x27;t need any &amp;quot;fancy IDE features&amp;quot; getting in the way.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;square1.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I see people tolerate waiting minutes to compile and endure restarting their program every time they make a change. I worked with one company whose build process so annoyed me that I started writing down the time I spent waiting and worked out it was costing them an hour of consulting time every day. They wouldn&#x27;t let me fix it. At another company, a new service made it into master despite the fact that it crashed on startup. Setting up a working mock environment was so painful that neither the original developer nor the reviewer had actually tried running the code.&lt;&#x2F;p&gt;
&lt;p&gt;How does this happen? What the hell went wrong?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-don-t-have-the-time-to-fix-the-problem&quot;&gt;I don&#x27;t have the time to fix the problem&lt;&#x2F;h2&gt;
&lt;p&gt;The correct response to this is to make a note of how much time I waste every day by not fixing the problem. That&#x27;s &lt;em&gt;why&lt;&#x2F;em&gt; I don&#x27;t have time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;square-time.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Just taking a few hours a week to fix the low-hanging fruit will pay for itself dozens of times over, and every time I add a feature to my editor or write a little command line tool I will learn things that will make it faster and easier next time. Productivity is multiplicative. Small improvements add up to remarkable changes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-didn-t-notice-there-was-a-problem&quot;&gt;I didn&#x27;t notice there was a problem&lt;&#x2F;h2&gt;
&lt;p&gt;This suprised me at first, but I realised that the reason I had never fixed the undefined variable problem was because I had never sat down and figured out how much it cost me in terms of lost time and focus. When I&#x27;m coding I&#x27;m not really conciously aware of the mechanical details of what I&#x27;m doing. My head is focused on data and algorithms, bugs and performance problems. I&#x27;m only vaguely aware that at the other end my hands are repeatedly mistyping println.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m trying now to maintain some sort of record. Whenever I lose focus or forget what I was doing I write down what distracted me. Whenever something annoys or frustrates me I write it down. Every time I take a break I make a quick note of what I spent the last hour or two doing. Whenever I fix a bug I write down the process that lead me to finding it, what the cause was and how it slipped through testing.&lt;&#x2F;p&gt;
&lt;p&gt;Something else I am considering trying is recording a few hours of video and going back to analyse in detail what worked and what didn&#x27;t. I suspect that I will spot a number of bad habits that are obvious in hindsight.&lt;&#x2F;p&gt;
&lt;p&gt;The advantage of recording all this evidence is that I can get an &lt;em&gt;accurate&lt;&#x2F;em&gt; picture of where my time is going and how my tools and processes could be improved. Going by my memory of what happened has proven to be less than useful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-have-a-vested-interest-in-there-not-being-a-problem&quot;&gt;I have a vested interest in there not being a problem&lt;&#x2F;h2&gt;
&lt;p&gt;My favourite language doesn&#x27;t have a debugger so clearly I don&#x27;t need one. Besides, real programmers don&#x27;t need a debugger. They just simulate the program directly in their head.&lt;&#x2F;p&gt;
&lt;p&gt;People &lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.co.uk&#x2F;Thinking-Fast-Slow-Daniel-Kahneman&#x2F;dp&#x2F;0141033576&#x2F;ref=sr_1_1?ie=UTF8&amp;amp;qid=1390773807&amp;amp;sr=8-1&amp;amp;keywords=thinking+fast+and+slow&quot;&gt;lie to themselves&lt;&#x2F;a&gt;. We all regularly defend on the grounds of technical merit when really the decision is governed by comfort zones, fashion, superficial impressions and random prejudices. It&#x27;s hard to make good decisions when you aren&#x27;t even aware of your own biases.&lt;&#x2F;p&gt;
&lt;p&gt;One idea for combatting this is to take the &lt;a href=&quot;http:&#x2F;&#x2F;wiki.lesswrong.com&#x2F;wiki&#x2F;Outside_view&quot;&gt;outside view&lt;&#x2F;a&gt;. I imagine &lt;em&gt;specific cases&lt;&#x2F;em&gt; where I have seen other developers trying to solve similar bugs and in each one of those cases I would have recommended that they learn to use the debugger rather than painstakingly engineering a test case out of print statements and watches.&lt;&#x2F;p&gt;
&lt;p&gt;Another idea I keep in mind is &lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;identity.html&quot;&gt;keeping my identity small&lt;&#x2F;a&gt;. If I persist in thinking of myself as a &#x27;real hardcore programmer&#x27; then I will forever be stuck peering at an 80 character ANSI terminal while other people get shit done.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I hope to be able to rely more on emperical results. If I am disciplined about collecting data then it will be easier to see what the correct answer is without malformed preconceptions getting in the way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-didn-t-realise-the-problem-could-be-fixed&quot;&gt;I didn&#x27;t realise the problem could be fixed&lt;&#x2F;h2&gt;
&lt;p&gt;The reason I never automated attaching watches is because it never occured to me that that was possible, let alone easy. My mental model of progamming involved me typing text into an editor and later running it. The editor might help me move text around but it couldn&#x27;t change the text on the way to the repl. I was a victim of first order thinking, seeing my programming environment as a fixed tool where text goes in one end and programs come out the other. The only solution is to tattoo &#x27;everything is data&#x27; across my forehead.&lt;&#x2F;p&gt;
&lt;p&gt;It is 2014. We have been programming for six decades. The software world has invested tens of thousands of man-years into building tools to help us write code (I&#x27;m told that the Visual Studio team alone is 2000 developers). How is it still the case that my fat fingers can mistype a function name and the first I hear about it is &amp;quot;Cannot call method &#x27;call&#x27; of undefined&amp;quot;. Is this really the best we can do? It feels like it takes a monumental amount of effort just to enable the simplest features.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;img&#x2F;square2.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Computers are not just a tool for writing code, they are a tool for thinking. We can &lt;a href=&quot;http:&#x2F;&#x2F;clojure.org&#x2F;macros&quot;&gt;extend the language&lt;&#x2F;a&gt;. We can &lt;a href=&quot;http:&#x2F;&#x2F;cascalog.org&#x2F;&quot;&gt;make new languages&lt;&#x2F;a&gt;. We can write code that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.typed&quot;&gt;analyses code&lt;&#x2F;a&gt;, code that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;technomancy&#x2F;slamhound&quot;&gt;rewrites code&lt;&#x2F;a&gt;, code that &lt;a href=&quot;http:&#x2F;&#x2F;trac.webkit.org&#x2F;wiki&#x2F;WebInspector&quot;&gt;inspects code&lt;&#x2F;a&gt;, code that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;plasma-umass&#x2F;causal&quot;&gt;finds slow code&lt;&#x2F;a&gt;, code that &lt;a href=&quot;http:&#x2F;&#x2F;www.st.cs.uni-saarland.de&#x2F;dd&#x2F;&quot;&gt;finds bugs&lt;&#x2F;a&gt;, code that &lt;a href=&quot;http:&#x2F;&#x2F;google-engtools.blogspot.co.uk&#x2F;2011&#x2F;12&#x2F;bug-prediction-at-google.html&quot;&gt;predicts bugs&lt;&#x2F;a&gt;, code that &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;papers&#x2F;hotdep10-fts-dts.pdf&quot;&gt;breaks code&lt;&#x2F;a&gt;, code that &lt;a href=&quot;http:&#x2F;&#x2F;worrydream.com&#x2F;MediaForThinkingTheUnthinkable&#x2F;&quot;&gt;visualises code execution&lt;&#x2F;a&gt;, code that &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;papers&#x2F;eurosys10-boom.pdf&quot;&gt;queries code execution&lt;&#x2F;a&gt;. We are barely scratching the surface. We have to stop thinking of code as text and start thinking of code as data.&lt;&#x2F;p&gt;
&lt;p&gt;And I have to go learn how to use the webkit debugger in Light Table.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>No more bullshit</title>
                <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/no-more-bullshit/</link>
                <guid>http%3A//scattered-thoughts.net/writing/no-more-bullshit/</guid>
                <description>&lt;p&gt;We are doing programming wrong. We all know it. Sure, if you sweat and scrub and shine and polish and pray to the gods of TDD you can get stuff done, but in the back of your mind you will always hear Zed Shaw&#x27;s voice whispering &lt;a href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=4qJMR_Dbxow&quot;&gt;&amp;quot;This is bullshit!&amp;quot;&lt;&#x2F;a&gt;. We cannot build the world on a foundation of bullshit.&lt;&#x2F;p&gt;
&lt;p&gt;There was a time when no-one learned to write. What was the point? Learning to write took decades of practice and was not useful for anything. If you did need to send a letter you could just get the village scribe to write it for you.&lt;&#x2F;p&gt;
&lt;p&gt;Today if you cannot write you cannot take part in modern society.&lt;&#x2F;p&gt;
&lt;p&gt;Like writing and mathematics, computers have the potential to make humanity more intelligent. &lt;a href=&quot;http:&#x2F;&#x2F;en.wikiquote.org&#x2F;wiki&#x2F;Alfred_North_Whitehead&quot;&gt;Civilization advances by extending the number of important operations which we can perform without thinking about them&lt;&#x2F;a&gt;. Computers are not a specialist tool for solving a particular problem, they are universal machines that can carry out any thought process you know how to express, leaving your brain free to concentrate on the problem at hand. The fact that programming is not useful to the average person today reflects only on our failure as a profession to create usable tools.&lt;&#x2F;p&gt;
&lt;p&gt;A few people &lt;a href=&quot;http:&#x2F;&#x2F;www.vpri.org&#x2F;html&#x2F;work&#x2F;ifnct.htm&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;boom.cs.berkeley.edu&#x2F;&quot;&gt;there&lt;&#x2F;a&gt; have proven that we can do better. After seeing the possiblities I can&#x27;t go back to burying my head in the sand and &lt;a href=&quot;&#x2F;img&#x2F;typing.gif&quot;&gt;writing scala&lt;&#x2F;a&gt; for the rest of my days.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m joining &lt;a href=&quot;http:&#x2F;&#x2F;www.lighttable.com&#x2F;&quot;&gt;Kodowa&lt;&#x2F;a&gt; and we are going to put a dent in this mountain of bullshit.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Hugo-a-go-go: optimisation</title>
                <pubDate>Sun, 24 Nov 2013 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/hugo-a-go-go-optimisation/</link>
                <guid>http%3A//scattered-thoughts.net/writing/hugo-a-go-go-optimisation/</guid>
                <description>&lt;p&gt;After a little optimisation work &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;hugo-a-go-go&#x2F;&quot;&gt;hugo&lt;&#x2F;a&gt; now manages to play out ~12k games per second on a 9x9 board. Besides fixing the two incorrect optimisations I made during the last minutes of the competition, the main wins were changing the board representation and carefully inspecting the compiler output to eliminate unneccesary work. A lot of the things I discovered are generally applicable to calculation-heavy, cpu-bound cljs code (with all the usual disclaimers about profiling and premature optimsation).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;layout&quot;&gt;Layout&lt;&#x2F;h2&gt;
&lt;p&gt;The board is now packed into a Uint8Array. With borders included, the board is an 11x11 grid.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;array-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;size))
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;max-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array-size array-size))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array-size (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first 121 entries in the array represent the colour of each cell on the board.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;black &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;white &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;grey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; for the border

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;set-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next 121 entries track which string is present on a cell. Strings are just represented by an integer id. The last entry in the array tracks the next id to be assigned.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;empty-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;grey-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;new-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;next-string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1023 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;next-string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
     next-string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos)))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;set-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;string))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next 121 entries track the number of non-empty neighbouring cells, which is useful for short-circuiting &lt;code&gt;suicide?&lt;&#x2F;code&gt; and &lt;code&gt;eyelike?&lt;&#x2F;code&gt; tests.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get-neighbours &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;freedom-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos)]
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board freedom-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;add-neighbours &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos amount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;freedom-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos)]
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board freedom-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board freedom-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;amount))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, the remaining cells map string ids to the number of pseudo-liberties belonging to that string.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get-liberties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos) (get-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos))]
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board string-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;add-liberties &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board pos amount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos) (get-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos))]
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board string-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board string-ix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;amount))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Packing the board this way gives two benefits. First, every field access is reduced to a few instructions. This isn&#x27;t as big a win as one might think, given that the structure of the old layout was predictable enough for the jit to replace hash lookups with struct access. More importantly, packing the board means that creating a copy is a single array copy. Cheap copying means we can cache boards all over the place and this leads to a lot of saved work in the UCT stage.&lt;&#x2F;p&gt;
&lt;p&gt;My implementation here is a little clumsy but in the future a cljs port of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;vertigo&quot;&gt;vertigo&lt;&#x2F;a&gt; would make this a lot cleaner. This is the kind of abstraction that would be difficult to implement in plain js.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;truth&quot;&gt;Truth&lt;&#x2F;h2&gt;
&lt;p&gt;In cljs, only &lt;code&gt;false&lt;&#x2F;code&gt; and &lt;code&gt;nil&lt;&#x2F;code&gt; are falsey. In generated code, if the cljs compiler cannot infer that the test in a branch is a boolean, it wraps it in &lt;code&gt;cljs.core.truth_&lt;&#x2F;code&gt; to test for cljs truthiness rather than js truthiness.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unfoo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo_QMARK_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_EQ_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cljs$core$IFn$_invoke$arity$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a)
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unfoo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;truth_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo_QMARK_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(a)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Normally this doesn&#x27;t matter but hugo is optimised enough already that profiling showed it spending ~15% of it&#x27;s time inside &lt;code&gt;cljs.core.truth_&lt;&#x2F;code&gt;. You can avoid it either by adding type hints...&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unfoo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo_QMARK_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_EQ_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cljs$core$IFn$_invoke$arity$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a)
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unfoo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo_QMARK_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;... or by wrapping the test in a function that is already hinted.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unfoo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo_QMARK_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_EQ_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cljs$core$IFn$_invoke$arity$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a)
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unfoo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo_QMARK_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(a) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;equality&quot;&gt;Equality&lt;&#x2F;h2&gt;
&lt;p&gt;Clojure defaults to structural equality where possible, rather than using javascript&#x27;s insane notion of equality.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;opposite-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour black) white black))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;opposite_colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_EQ_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cljs$core$IFn$_invoke$arity$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, this is something that normally doesn&#x27;t matter but hugo was spending ~20% of cpu time in &lt;code&gt;cljs.core.__EQ__&lt;&#x2F;code&gt;. Since we know we are comparing integers we can use &lt;code&gt;==&lt;&#x2F;code&gt; instead, which compiles down to &lt;code&gt;===&lt;&#x2F;code&gt; in js.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;opposite-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour black) white black))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;opposite_colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For other primitive types it seems that &lt;code&gt;identical?&lt;&#x2F;code&gt; will inline to &lt;code&gt;===&lt;&#x2F;code&gt;. For keywords you now have to use &lt;code&gt;keyword-identical?&lt;&#x2F;code&gt; which unfortunately does not inline.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;polyadic-calls&quot;&gt;Polyadic calls&lt;&#x2F;h2&gt;
&lt;p&gt;Clojure functions can dispatch on the number of arguments. Usually the cljs compiler does a good job of compiling away the extra indirection, but it struggles with local functions.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[]
  (letfn [(bar [x y] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x y))]
    (bar &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;bar)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;hugo_a_go_go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_EQ_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cljs$core$IFn$_invoke$arity$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;c)
  }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs$core$IFn$_invoke$arity$2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cljs$core$IFn$_invoke$arity$2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Keyword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1014005816&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Keyword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1014001541&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Keyword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;foo&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1014005816&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cljs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Keyword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;bar&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1014001541&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The important part to notice here is that it tests if &lt;code&gt;a.cljs$core$IFn$_invoke$arity$2&lt;&#x2F;code&gt; exists before calling it, despite the fact that that is statically known. We had some small (~5%) performance improvements in a few places (notably board&#x2F;flood-fill) by lifting all closures up to top-level functions so that the compiler can remove that check.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mutable-variables&quot;&gt;Mutable variables&lt;&#x2F;h2&gt;
&lt;p&gt;Sometimes you need a mutable variable. Using atoms incurs overhead for eg checking watches. According to &lt;a href=&quot;http:&#x2F;&#x2F;swannodette.github.io&#x2F;2013&#x2F;06&#x2F;10&#x2F;porting-notchs-minecraft-demo-to-clojurescript&#x2F;&quot;&gt;David Nolen&lt;&#x2F;a&gt;, the best option in cljs is creating a one-element array.&lt;&#x2F;p&gt;
&lt;p&gt;It would be nice to have safe access to mutable vars in the style of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;proteus&quot;&gt;proteus&lt;&#x2F;a&gt; instead.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;next&quot;&gt;Next&lt;&#x2F;h2&gt;
&lt;p&gt;While it meet seem annoying to have to work around the compiler sometimes to get decent performance, I far prefer to have sane semantics by default and just remember a few simple tricks for speeding up inner loops. Having access to macros also opens the door to a world of performant abstractions that would be extremely painful in plain js (eg &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.match&quot;&gt;core.match&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;vertigo&quot;&gt;vertigo&lt;&#x2F;a&gt;). Now that the core of hugo is just bashing on integers and byte arrays there is also the potential to compile sections of it to &lt;a href=&quot;http:&#x2F;&#x2F;asmjs.org&#x2F;&quot;&gt;asm.js&lt;&#x2F;a&gt; for even more performance.&lt;&#x2F;p&gt;
&lt;p&gt;Hugo now plays fairly sensibly but is still easy to defeat even for a novice player like me. I suspect that the UCT stage is still not entirely correct so the next step is to build a visualiser for the game tree so I can see the reasoning behind it&#x27;s moves.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Hugo-a-go-go</title>
                <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/hugo-a-go-go/</link>
                <guid>http%3A//scattered-thoughts.net/writing/hugo-a-go-go/</guid>
                <description>&lt;p&gt;For the &lt;a href=&quot;http:&#x2F;&#x2F;clojurecup.com&#x2F;&quot;&gt;2013 Clojure Cup&lt;&#x2F;a&gt; myself and &lt;a href=&quot;http:&#x2F;&#x2F;www.thattommyhall.com&#x2F;&quot;&gt;Tom Hall&lt;&#x2F;a&gt; wrote a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Go_%28game%29&quot;&gt;go&lt;&#x2F;a&gt; AI in clojurescript, inspired by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;pushkin&quot;&gt;pushkin&lt;&#x2F;a&gt;. The source is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;hugo-a-go-go&#x2F;&quot;&gt;here&lt;&#x2F;a&gt; and it can currently be played on the &lt;a href=&quot;http:&#x2F;&#x2F;hugoagogo.clojurecup.com&#x2F;&quot;&gt;clojure cup site&lt;&#x2F;a&gt; (only tested in chrome).&lt;&#x2F;p&gt;
&lt;p&gt;Before reading this post it would help to understand the rules of go. Hugo-a-go-go follows (an approximation of) the &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rules_of_Go#Chinese_rules&quot;&gt;chinese rules&lt;&#x2F;a&gt;. Due to the limited time we don&#x27;t yet check for &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rules_of_Go#Ko&quot;&gt;ko&lt;&#x2F;a&gt; and don&#x27;t even attempt to detect the end of the game. The code at the moment is incredibly messy and probably very buggy (the version we submitted seems to actually &lt;em&gt;try&lt;&#x2F;em&gt; to lose) so treat it with suspicion.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;board&quot;&gt;Board&lt;&#x2F;h2&gt;
&lt;p&gt;The best place to start is with the board representation. The most expensive operation for the AI is detecting suicide and death. To make this fast we track connected strings of pieces.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defrecord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;String [colour liberties])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;colour&lt;&#x2F;code&gt; is one of &lt;code&gt;:black&lt;&#x2F;code&gt;, &lt;code&gt;:white&lt;&#x2F;code&gt;, &lt;code&gt;:grey&lt;&#x2F;code&gt; (for the border) or &lt;code&gt;:empty&lt;&#x2F;code&gt;. &lt;code&gt;liberties&lt;&#x2F;code&gt; tracks the number of &lt;a href=&quot;https:&#x2F;&#x2F;groups.google.com&#x2F;forum&#x2F;#!msg&#x2F;computer-go-archive&#x2F;hs259RQQ5hI&#x2F;TOLFX2d5Y6UJ&quot;&gt;pseudo-liberties&lt;&#x2F;a&gt; the string has (for black or white strings; for empty or grey strings the &lt;code&gt;liberties&lt;&#x2F;code&gt; value is never read and exists just to avoid having to branch on the colour).&lt;&#x2F;p&gt;
&lt;p&gt;The board is represented by a 1d array of pointers to strings (this representation is inspired by &lt;a href=&quot;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gnugo&#x2F;&quot;&gt;gnugo&lt;&#x2F;a&gt; rather than pushkin) and a pointer to the empty string (which we use for fast &lt;code&gt;empty?&lt;&#x2F;code&gt; checks).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defrecord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Board [strings empty-string])

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f51818;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;array-size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;size))
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;max-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array-size array-size))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array-size (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create a board we just have to setup the empty-string and border-string.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;empty-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;border-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;grey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;strings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(object-array max-pos)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;dotimes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos]
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;strings i empty-string))
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;dotimes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array-size]
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;strings (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;pos (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) border-string)
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;strings (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;pos (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i) size) border-string)
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;strings (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i)) border-string)
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;strings (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;pos size (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;i)) border-string))
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;Board strings empty-string)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A given move is &lt;em&gt;not&lt;&#x2F;em&gt; suicide if, after the move is made, there is at least one neighbour which is either:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the same colour and has more than zero liberties&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;the opposite colour and has zero liberties (ie would die if the move was carried through)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;empty&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;suicide&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board colour pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;suicide &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;opposite-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(condp keyword-identical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black)]
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; decrement all the neighbours liberties
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(foreach-neighbour neighbour-pos pos
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) neighbour-pos)]
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties string) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties string)))))
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; check for suicide
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(foreach-neighbour neighbour-pos pos
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) neighbour-pos)]
        (condp keyword-identical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-colour string)
          colour (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties string) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
                   (reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;suicide &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
          opposite-colour (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties string) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
                            (reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;suicide &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;empty (reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;suicide &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;grey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; undo the decrement
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(foreach-neighbour neighbour-pos pos
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) neighbour-pos)]
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties string) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;inc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties string)))))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;suicide))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Actually making a move is similar but we have to clear out dead strings and join adjacent strings together. Proving that it&#x27;s safe to do all this in a single pass is straightforward, if tedious.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;defn set-colour [^Board board pos colour]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;String colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) pos string)
    (foreach-neighbour neighbour-pos pos
                       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;neighbour-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) neighbour-pos)
                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;neighbour-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-colour neighbour-string)]
                         (condp keyword-identical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;neighbour-colour
                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;empty
                           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) pos)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;inc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) pos))))

                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;grey
                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil

                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour
                           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties neighbour-string) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties neighbour-string)))
                             (join-strings board (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-strings board) pos) neighbour-string pos neighbour-pos))

                           &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; opposite colour
                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties neighbour-string) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;dec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties neighbour-string)))
                             (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-liberties neighbour-string))
                               (clear-string board neighbour-string neighbour-pos))))))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;monte-carlo&quot;&gt;Monte Carlo&lt;&#x2F;h2&gt;
&lt;p&gt;Go branches far too much to exhaustively check all possible futures. Instead we use a heuristic measure of the value of a move - the Monte Carlo estimate of the expected score when both players choose from the set of valid moves uniformly at random. To put it simply, we run large numbers of random games from this board position and take the mean score as our measure of how strong this board position is. Since we don&#x27;t have a test for the end of the game we just run until either 100 moves have been made or until both sides have no valid moves remaining.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;flood-fill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;filled &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(object-array max-pos)]
    (letfn [(flood-fill-around [pos]
              (foreach-neighbour pos pos
                  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aget &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;filled pos))
                             (keyword-identical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;empty (get-colour board pos)))
                    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;filled pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
                    (flood-fill-around pos))))]
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;dotimes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;size]
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;dotimes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;size]
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;pos x y)]
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(keyword-identical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour (get-colour board pos))
              (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;filled pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
              (flood-fill-around pos))))))
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter identity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;filled))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;white-flood &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(flood-fill board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;black-flood &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(flood-fill board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;size size)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;overlap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white-flood black-flood) total)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;white-score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white-flood overlap)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;black-score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black-flood overlap)]
    {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;white white-score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;black black-score}))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;random-move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;starting-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(random-int board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;starting-pos]
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;valid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board colour pos)
               (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;eyelike&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board colour pos)))
        pos
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;new-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(mod (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;inc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos) board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos)]
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;starting-pos new-pos)
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;recur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new-pos)))))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;with-random-moves &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board n starting-colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;doseq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;take &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;interleave &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;repeat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;starting-colour) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;repeat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opposite-colour starting-colour))))]
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;when-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(random-move board colour)]
        (board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;set-colour board move colour)))
  board)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You may notice that the above code actually only runs until one side has no moves - this is the first of many bugs.&lt;&#x2F;p&gt;
&lt;p&gt;The scoring and random-move code was a huge bottleneck so at the last minute I &#x27;optimised&#x27; it by changing it to:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; rough approximation of the final score if the board is tightly packed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;dotimes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max-pos]
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(keyword-identical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour (board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;get-colour board pos))
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;score))

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; massive speedup at the expense of never playing in killed spaces
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;with-random-moves-from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board n starting-colour moves&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;goog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;shuffle moves)
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;starting-colour]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;moves)]
      (board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;set-colour board move colour)
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;recur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opposite-colour colour))))
  board)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think it is these two changes that are largely responsible for the submitted version playing so poorly - it doesn&#x27;t check for eyes in the random playouts, doesn&#x27;t allow the other player to keep killing strings when the ai player has no moves and doesn&#x27;t count eyes in the final score. This explains why it likes to tightly pack pieces against the edge of the board.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uct&quot;&gt;UCT&lt;&#x2F;h2&gt;
&lt;p&gt;While the monte-carlo estimate gives us a reasonable heuristic for move strength it doesn&#x27;t re-use any information between passes. With such a large move space we need to explore more intelligently. The &lt;a href=&quot;http:&#x2F;&#x2F;teytaud.over-blog.com&#x2F;article-35709049.html&quot;&gt;UCT&lt;&#x2F;a&gt; algorithm treats move-selection like a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Multi-armed_bandit&quot;&gt;multi-armed bandit problem&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;dbvoPg51CqQ?feature=player_embedded&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;video&lt;&#x2F;iframe&gt;
&lt;p&gt;We build a tree of moves where each node in the tree tracks not just the estimated score for all its child nodes but also the upper bound of a confidence interval on that estimate.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defrecord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Node [parent colour pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sum nodes valids])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;colour&lt;&#x2F;code&gt; is the colour making the move at this node. &lt;code&gt;pos&lt;&#x2F;code&gt; is the position at which it is moving. &lt;code&gt;nodes&lt;&#x2F;code&gt; is a list of child nodes for which we have estimates. &lt;code&gt;valids&lt;&#x2F;code&gt; is a list of valid moves which have not yet been converted into nodes. &lt;code&gt;count&lt;&#x2F;code&gt; and &lt;code&gt;sum&lt;&#x2F;code&gt; track the mean score for all the children in &lt;code&gt;nodes&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On each iteration we pick a path through the tree, choosing some explore&#x2F;exploit tradeoff using the upper confidence bounds. Given the limited time we had, I decided to just copy a scoring function from a paper without stopping to understand it, so I don&#x27;t actually know what explore&#x2F;exploit tradeoff we are making :S&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;best-child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;best-score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;best-child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;doseq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-nodes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-sum child) (.-count child))
                     (js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;sqrt
                      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(js&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;log (.-count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
                         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-count child)))))]
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;score &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;best-score)
          (reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;best-score score)
          (reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;best-child child))))
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;best-child))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;expand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ai-colour&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; top node has pos 0 - probably a smell
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;set-colour board pos (.-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))))
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;valid-pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-valids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))]
    (.push (.-nodes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (expand-leaf board ai-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opposite-colour (.-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) valid-pos))
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-colour &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) ai-colour)
                     (worst-child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
                     (best-child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))]
      (expand board child ai-colour)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; no possible moves - pass
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On reaching a leaf we extend it by one more move, estimate the value of that move using monte-carlo simulations and then propagate the value back up the path to the top of tree.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;expand-leaf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board ai-colour parent colour pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;set-colour board pos colour)
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;valids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(valids board (board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opposite-colour colour))]
    (random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;with-random-moves-from board &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opposite-colour colour) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;aclone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;valids))
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(value board ai-colour)]
      (add-value parent value)
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;Node parent colour pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value (object-array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) valids))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;add-value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;set! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) value))
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;parent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.-parent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;recur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;parent value)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, the ai chooses its move by running a number of iterations of this algorithm and returning the value of &lt;code&gt;best-child&lt;&#x2F;code&gt; at the root (this is probably wrong - at this point we should just exploit, not explore).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;move-for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;board colour n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(hugo-a-go-go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;copy board) colour)]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;dotimes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n]
      (expand (board&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;copy board) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;colour))
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;when-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(best-child &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
      (.-pos child))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;postmortem&quot;&gt;Postmortem&lt;&#x2F;h2&gt;
&lt;p&gt;Together we spent around 20 man-hours on the competition. I spent the first two thirds of the competition just getting the board representation to work correctly. Part of the delay was that after moving to a cljs-only implementation the feedback loop was much slower. I wasted an hour or two tring to get brepl working without any success and after that had to rely on print statements and pre-compiled test cases. Finding errors in cljs also leaves a lot to be desired (eg a typo in a field name resulted in an &lt;code&gt;undefined&lt;&#x2F;code&gt; value which, several functions later, became a &lt;code&gt;NaN&lt;&#x2F;code&gt; which then behaves interestingly inside max&#x2F;min). I only started on the UCT code an hour or two before the deadline. Tom started on the user input around the same time. We played our first game against the ai about five minutes before the deadline and frantically submitted whatever code we had running.&lt;&#x2F;p&gt;
&lt;p&gt;If we were taking it more seriously we certainly could have done a lot more to prepare - being familiar with the cljs dev tools, actually learning the rules of go, sketching out the board representation and the UCT implementation before the weekend started, not walking a marathon on the same weekend. But winning was not the goal and instead we had a lot of fun and excitement seeing just how much we can hack together in such a short space of time.&lt;&#x2F;p&gt;
&lt;p&gt;Our AI is definitely not correct so it&#x27;s difficult to evaluate the project yet. The code is relatively short and simple (especially compared to eg &lt;a href=&quot;http:&#x2F;&#x2F;git.savannah.gnu.org&#x2F;cgit&#x2F;gnugo.git&#x2F;tree&#x2F;engine&quot;&gt;gnugo&lt;&#x2F;a&gt;) but that doesn&#x27;t mean much until it actually works. The performance is promising - the current version can simulate around 5k games per second in chrome. Fixing the monte-carlo step and the scoring will eat into that performance but I&#x27;ve already spotted plenty of inefficiencies in other places. We haven&#x27;t even started experimenting with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;vertigo&quot;&gt;vertigo&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;asmjs.org&#x2F;&quot;&gt;asm.js&lt;&#x2F;a&gt; yet so there is certainly lots of headroom.&lt;&#x2F;p&gt;
&lt;p&gt;I am definitely hoping to come back to this project. To echo &lt;a href=&quot;http:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=v5dYE0CMmHQ&quot;&gt;Zach Tellman&#x27;s motivation&lt;&#x2F;a&gt;, it will be really interesting to see if it is possible to write a competitive go AI in a high-level language. We&#x27;ve also thought about distributing the UCT step and have team games pitching the aggregated wisdom of a group of human players voting on their next move against the assembled computing power of their browsing machines.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>External memory</title>
                <pubDate>Tue, 21 May 2013 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/flowing-faster-external-memory/</link>
                <guid>http%3A//scattered-thoughts.net/writing/flowing-faster-external-memory/</guid>
                <description>&lt;p&gt;What work I do that is worthwhile happens in the few hours of flow I manage to achieve every week. A million different things break that flow every day. I suspect that a large part of achieving flow is keeping the current problem in working memory. To improve my chances I can improve my working memory, offload parts of the problem to the computer or prevent context switches. I&#x27;m on my own with the first option, but a better development environment can help with the latter two.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing that I want to fix in this series is offloading memory. There are basically two kinds of questions I regularly deal with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How did I solve this problem &#x2F; build this software &#x2F; configure this program X months ago?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What was I trying to remember to change X seconds ago?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve started using &lt;a href=&quot;http:&#x2F;&#x2F;jblevins.org&#x2F;projects&#x2F;deft&#x2F;&quot;&gt;deft&lt;&#x2F;a&gt; to answer both of these. Deft stores notes in a folder full of flat files and adds an incremental search buffer to emacs (searching &amp;gt; organising). This means that my notes are simple plain text which I can easily edit, backup, grep or serve on the web.&lt;&#x2F;p&gt;
&lt;p&gt;For long-term memory I create a new note every time I solve a problem or learn something useful. Within emacs M-&#x27; brings up the deft window, typing triggers the incremental search and hiting Enter opens the first matching note.&lt;&#x2F;p&gt;
&lt;p&gt;For short-term memory I have a single note called stack. Hitting C-&#x27; opens the stack note with the cursor on a new blank line for adding items to the stack. Hitting C-DEL deletes the previous line and C-q closes the stack. Hopefully this is sufficiently low-friction that the extra memory makes up for the context switch.&lt;&#x2F;p&gt;
&lt;p&gt;My config is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;emacs-live-packs&#x2F;blob&#x2F;master&#x2F;deft-pack&#x2F;init.el&quot;&gt;here&lt;&#x2F;a&gt;. I&#x27;m considering writing a gnome-shell extension which displays the last line of the stack in the status bar to remind me what I&#x27;m supposed to be doing when my mental stack gets rudely dumped. I also want to add the global key bindings to gnome-shell so I don&#x27;t have to navigate to emacs first.&lt;&#x2F;p&gt;
&lt;p&gt;This is a very simple tool, which is kind of the point. The more stucture and options added to a note-taking tool the more effort it takes to actually use it and the more likely it is that I lose my entire mental stack whilst doing so.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Search trees and core.logic</title>
                <pubDate>Wed, 19 Dec 2012 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/search-trees-and-core-dot-logic/</link>
                <guid>http%3A//scattered-thoughts.net/writing/search-trees-and-core-dot-logic/</guid>
                <description>&lt;p&gt;I mentioned in an &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;hacker-school&#x2F;&quot;&gt;earlier post&lt;&#x2F;a&gt; that I had spent some time working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;shackles&quot;&gt;shackles&lt;&#x2F;a&gt;, an extensible &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Constraint_programming&quot;&gt;constraint solver&lt;&#x2F;a&gt; based on &lt;a href=&quot;http:&#x2F;&#x2F;www.gecode.org&#x2F;&quot;&gt;gecode&lt;&#x2F;a&gt; with extensions for &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Logic_programming&quot;&gt;logic programming&lt;&#x2F;a&gt;. I eventually gave up working on shackles in favor of using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.logic&quot;&gt;core.logic&lt;&#x2F;a&gt; which is much more mature and has actual maintainers. Last week David Nolen (the author of core.logic) was visiting Hacker School so I decided to poke around inside core.logic and see what could be brought over from shackles. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.logic&#x2F;pull&#x2F;13&quot;&gt;first chunk of work&lt;&#x2F;a&gt; adds fair conjunction, user-configurable search and a parallel solver.&lt;&#x2F;p&gt;
&lt;p&gt;First, a little background. From a high-level point of view, a constraint solver does three things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;specifies a search space in the form of a set of constraints&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;turns that search space into a search tree&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;searches the resulting tree for non-failed leaves&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Currently core.logic (and cKanren before it) complects all three of these. My patch partly decomplects the latter from the first two, allowing different search algorithms to be specified independently of the problem specification.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at how core.logic works. I&#x27;m going to gloss over a lot of implementation details in order to make the core ideas clearer.&lt;&#x2F;p&gt;
&lt;p&gt;The search tree in core.logic is representated as a lazy stream of the non-failed leaves of the tree. This stream can be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nil&lt;&#x2F;code&gt; - the empty stream&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(Choice. head tail)&lt;&#x2F;code&gt; - a cons cell&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Disjunction of two goals produces a new goal which contains the search trees of the two goals as adjacent branches. In core.logic, this is implemented by combining their streams with &lt;code&gt;mplus&lt;&#x2F;code&gt;. A naive implementation might look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mplus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;stream1 stream2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cond
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stream1) stream2
    (choice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stream1) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Choice. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.head stream1) (mplus (.tail stream1) stream2))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This amounts to a depth-first search of the leaves of the tree. Unfortunately, search trees in core.logic can be infinitely deep so a depth-first search can get stuck. If the first branch has an infinite subtree we will never see results from the second branch.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; simple non-terminating goal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;forevero
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(fresh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;[]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;forevero))

(run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[q]
  (conde
    [forvero]
    [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;q &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]))

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; with depth-first search blocks immediately, returning (...)
;; with breadth-first search blocks after the first result, returning (1 ...)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can perform breadth-first search by adding a new stream type:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(fn [] stream)&lt;&#x2F;code&gt; - a thunk representing a branch in the search tree&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;And then interleaving results from each branch:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mplus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;stream1 stream2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cond
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;...
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stream1) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[] (mplus stream2 (stream1)))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is how core.logic implements fair disjunction (fair in the sense that all branches of &lt;code&gt;conde&lt;&#x2F;code&gt; will be explored equally). However, we still have a problem with fair conjunction. Conjunction is performed in core.logic by running the second goal starting at each of the leaves of the tree of the first goal. In terms of the stream representation, this looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;bind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;stream goal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cond
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stream) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; failure
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(choice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stream) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Choice. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(bind (.head stream) goal) (bind (.tail stream) goal))
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;stream) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[] (bind (stream) goal))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives rise to similar behaviour as the naive version of &lt;code&gt;mplus&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[q]
  (all
    forevero
    (!= q q)))

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; with unfair conjunction blocks immediately, returning (...)
;; with fair conjunction the second branch causes failure, returning ()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I suspect the reason that core.logic didn&#x27;t yet have fair conjunction is entirely due to this stream representation, which complects all three stages of constraint solving and hides the underlying search tree. Since shackles is based on gecode it has the advantage of a much clearer theoretical framework (I strongly recommend &lt;a href=&quot;http:&#x2F;&#x2F;www.gecode.org&#x2F;paper.html?id=Tack:PhD:2009&quot;&gt;this paper&lt;&#x2F;a&gt;, not just for the insight into gecode but as a shining example of how mathematical intuition can be used to guide software design).&lt;&#x2F;p&gt;
&lt;p&gt;The first step in introducing fair conjunction to core.logic is to explicitly represent the search tree. The types are similar:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;nil&lt;&#x2F;code&gt; - the empty tree&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(Result. state)&lt;&#x2F;code&gt; - a leaf&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(Choice. left right)&lt;&#x2F;code&gt; - a branch&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(Thunk. state goal)&lt;&#x2F;code&gt; - a thunk containing the current state and a sub-goal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Defining &lt;code&gt;mplus&lt;&#x2F;code&gt; is now trivial since it is no longer responsible for interleaving results:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;mplus &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tree1 tree2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Choice. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree1 tree2))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we now have two variants of bind:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;bind-unfair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tree goal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cond
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;goal) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; failure
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) (goal (.state tree)) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; success, start the second tree here
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(choice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Choice. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(bind-unfair (.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) goal) (bind-unfair (.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) goal))
    (thunk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Thunk. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.state tree) (bind-unfair ((.goal tree) state) goal))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;bind-fair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tree goal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cond
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;goal) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; failure
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) (goal (.state tree)) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; success, start the second tree here
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(choice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Choice. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(bind-fair (.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) goal) (bind-fair (.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) goal))
    (thunk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Thunk. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(.state tree) (bind-fair (goal state) (.goal tree))))) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; interleave!
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The crucial difference here is that bind-fair takes advantage of the continuation-like thunk to interleave both goals, allowing each to do one thunk&#x27;s worth of work before switching to the next.&lt;&#x2F;p&gt;
&lt;p&gt;(We keep bind-unfair around because it tends to be faster in practice - when you know what order your goals will be run in you can use domain knowledge to specify the most optimal order. However, making program evaluation dependent on goal ordering is less declarative and there are also some problems that cannot be specified without fair conjunction. It&#x27;s nice to have both.)&lt;&#x2F;p&gt;
&lt;p&gt;Now that we explicity represent the tree we can use different search algorithms. My patch defaults to lazy, breadth-first search (to maintain the previous semantics) but it also supplies a variety of others including a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;core.logic&#x2F;blob&#x2F;flexible-search&#x2F;src&#x2F;main&#x2F;clojure&#x2F;clojure&#x2F;core&#x2F;logic&#x2F;par.clj#L49&quot;&gt;parallel depth-first search&lt;&#x2F;a&gt; using &lt;a href=&quot;http:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;tutorial&#x2F;essential&#x2F;concurrency&#x2F;forkjoin.html&quot;&gt;fork-join&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I still need to write a few more tests and sign the clojure contributor agreement before this can be considered for merging. I also have a pesky performance regression in lazy searches - this branch sometimes does more work than the original when only finding the first solution. I&#x27;m not sure yet whether this is down to a lack of laziness somewhere or maybe just a result of a slightly different search order. Either way, it needs to be fixed.&lt;&#x2F;p&gt;
&lt;p&gt;After this change, core.logic still complects the specification of the search space and the generation of the search tree (eg we have to choose between bind-unfair and bind-fair in the problem specification). At some point I would like to either fix that in core.logic or finish work on shackles. For now though, I&#x27;m going back to working on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;droplet&quot;&gt;droplet&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Strucjure: motivation</title>
                <pubDate>Tue, 04 Dec 2012 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/strucjure-motivation/</link>
                <guid>http%3A//scattered-thoughts.net/writing/strucjure-motivation/</guid>
                <description>&lt;p&gt;I feel that the readme for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;strucjure&quot;&gt;strucjure&lt;&#x2F;a&gt; does a reasonable job of explaining how to use the library but not of explaining why you would want to. I want to do that here. I&#x27;m going to focus on the motivation behind strucjure and the use cases for it rather than the internals, so try not to worry too much about how this all works and just focus on the ideas (the implementation itself is &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Parsing_expression_grammar&quot;&gt;very simple&lt;&#x2F;a&gt; but liable to keep changing).&lt;&#x2F;p&gt;
&lt;p&gt;The core idea is that strucjure (and the &lt;a href=&quot;http:&#x2F;&#x2F;www.google.com&#x2F;url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=4&amp;amp;cad=rja&amp;amp;ved=0CFIQFjAD&amp;amp;url=http%3A%2F%2Flambda-the-ultimate.org%2Fnode%2F2477&amp;amp;ei=lQ69UJqrLK-WyAHC1IGIBg&amp;amp;usg=AFQjCNEJAMQULpZ62ASYefNHadlUWTlgKA&amp;amp;sig2=E1ePKzLJJNaFw5BfEG9rrA&quot;&gt;OMeta&lt;&#x2F;a&gt; library on which it is based) is not just yet-another-parser, but is instead a concise language for describing, manipulating and transforming data structures. The &lt;a href=&quot;http:&#x2F;&#x2F;www.vpri.org&#x2F;&quot;&gt;VPRI&lt;&#x2F;a&gt; folks have done some amazing things with OMeta. My goal with strucjure is to see how much further this idea can be taken.&lt;&#x2F;p&gt;
&lt;p&gt;(Note: For the purposes of this post I&#x27;ll use the terms pattern and view interchangeably. There &lt;em&gt;is&lt;&#x2F;em&gt; a difference, but the line between the two is not yet clear to me and will probably change in future implementations)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pattern-matching&quot;&gt;Pattern matching&lt;&#x2F;h2&gt;
&lt;p&gt;Pattern matching is a concept found in many functional languages. The basic idea is something like a switch statement, combined with a mini-language for describing patterns which the input should be tested against. The first pattern which matches has its corresponding branch executed.&lt;&#x2F;p&gt;
&lt;p&gt;As a very simple example, we can use strucjure to write fizzbuzz like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;doseq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;prn
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(match [(mod i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (mod i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;fizzbuzz&amp;quot;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;fizz&amp;quot;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;buzz&amp;quot;
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_      i)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a concise, readable description of the various cases and replaces a chain of if-statements.&lt;&#x2F;p&gt;
&lt;p&gt;If we stopped there, you could be forgiven for not caring. Simple examples don&#x27;t really demonstrate the power of pattern matching. Let&#x27;s instead look at a more complicated example - &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Red%E2%80%93black_tree&quot;&gt;red-black trees&lt;&#x2F;a&gt;. An important operation on red-black trees is re-establishing the balance invariants after inserting a new node. Here is a java implementation of the balance operation (from &lt;a href=&quot;http:&#x2F;&#x2F;algs4.cs.princeton.edu&#x2F;33balanced&#x2F;RedBlackBST.java.html&quot;&gt;this implementation&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; make a left-leaning link lean to the right
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;rotateRight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;RED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; make a right-leaning link lean to the left
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;rotateLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;RED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; flip the colors of a node and its two children
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;flipColors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; h must have opposite color of its two children
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right))
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; restore red-black tree invariant
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;balance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right))                      h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;rotateLeft&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left)) h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;rotateRight&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;isRed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right))     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;flipColors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;

        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;N &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;left) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;right) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This pile of if-statements obscures the intent of the code, which is to re-arrange the tree so that no red node has a red child. What we really want to see is &#x27;if the tree looks like foo, replace it with bar&#x27;. Using pattern matching we can express this directly (code based on &lt;a href=&quot;http:&#x2F;&#x2F;www.cs.cornell.edu&#x2F;courses&#x2F;cs3110&#x2F;2009sp&#x2F;lectures&#x2F;lec11.html&quot;&gt;this implementation&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defrecord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Leaf &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defrecord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Red [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defrecord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Black [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;balance
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; if it looks like one of these...
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Black. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?a ?x ?b) ?y ?c) ?z ?d)
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Black. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?a ?x (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?b ?y ?c)) ?z ?d)
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Black. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?a ?x (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?b ?y ?c) ?z ?d))
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Black. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?a ?x (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?b ?y (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?c ?z ?d))))
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; replace it with this...
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Black. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;a x b) y (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Black. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;c z d))

  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; otherwise, leave it alone
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?other
  other)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Note that this isn&#x27;t exactly the same operation as the code above, because the corresponding implementation has a slightly different insert algorithm too. Nevertheless, converting this operation to java would result in the same grotesque expansion of if-statements).&lt;&#x2F;p&gt;
&lt;p&gt;Strucjure is not very optimized yet, but if you use a more mature pattern-matching library then this code would be as fast as what you would write by hand. For complex patterns &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.match&quot;&gt;core.match&lt;&#x2F;a&gt; often does a better job of optimizing the decision tree than I can manage by hand, in much the same way that GCC does a better job of writing assembly code than I ever could.&lt;&#x2F;p&gt;
&lt;p&gt;Strucjure patterns are first-class values and can call other patterns or recursively call themselves, so they can express much more complex patterns than other pattern matchers. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;balanced-height
  Leaf
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Black. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_
         (balanced-height ?l)
         (balanced-height ?r))
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;l r))
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;l)

  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;Red. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_
         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Red) (balanced-height ?l))
         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Red) (balanced-height ?r)))
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;l r))
  l)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a pattern which only matches balanced red-black trees, by recursively matching against each branch and returning the number of black nodes per path (see property 5 &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Red%E2%80%93black_tree#Properties&quot;&gt;here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parsing&quot;&gt;Parsing&lt;&#x2F;h2&gt;
&lt;p&gt;Strucjure supports patterns which only consume part of the input and can chain these patterns together. Combine that with pattern matching and you can very easily write back-tracking recursive-descent parsers.&lt;&#x2F;p&gt;
&lt;p&gt;We can use this for traditional text parsing (you have to be feeling a little masochistic at the moment because strucjure can&#x27;t directly handle strings yet, only sequences of \c \h \a \r \s). For example, strucjure &lt;a href=&quot;http:&#x2F;&#x2F;scattered-thoughts.net&#x2F;writing&#x2F;strucjure-reading-the-readme&#x2F;&quot;&gt;parses its own readme&lt;&#x2F;a&gt; to ensure all the examples are correct.&lt;&#x2F;p&gt;
&lt;p&gt;Parsing doesn&#x27;t have to be limited to text. We can apply the same techniques to any sequential data structure.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;user&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defnview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;zero-or-more-prefix [elem]
        (prefix &amp;amp; (elem ?x) &amp;amp; ((zero-or-more-prefix elem) ?xs)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x xs)
        (prefix ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
#&amp;#39;user&#x2F;zero-or-more-prefix
user&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;self-counting
        (prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;one
        (prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;two
        (prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 3 3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;three)
#&amp;#39;user&#x2F;self-counting
user&amp;gt; (run (zero-or-more-prefix self-counting) [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 3 3 3 2 2 1 2 2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;])
(one three two one two)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we live in lisp land, code is data too. We can use strucjure to easily and &lt;em&gt;readably&lt;&#x2F;em&gt; (hopefully) operate over sexps.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; generic parser for (right-binding) infix operators with precedence

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;all form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not-any&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form) all))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;all current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ops &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;tighter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] current]
    (view
     (prefix &amp;amp; ((bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;all tighter) ?x) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ops &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) ?op) &amp;amp; ((bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;all current) ?y)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;y)
     (prefix &amp;amp; ((bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;all tighter) ?x)) x)
    (view
     (prefix [((bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;all all) ?x)]) x
     (prefix (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) ?x)) x)))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;bind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;binding-levels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;binding-levels binding-levels))

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; run &amp;#39;bind with basic arithmetic precedences
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (run (bind [#{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} #{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}]) args))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macroexpand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; (- 1 (+ 2 (- 3 4)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macroexpand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; (+ 1 (+ (* 2 7) (&#x2F; 1 2)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;macroexpand &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(math &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; (+ 1 (* 2 (&#x2F; (7 + 1) 2)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No more death-by-polish-notation!&lt;&#x2F;p&gt;
&lt;p&gt;(The operators above really ought to bind to the left but, unlike ometa, strucjure doesn&#x27;t yet support &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Left_recursion&quot;&gt;left-recursion&lt;&#x2F;a&gt; and I&#x27;m too lazy to manually transform the grammar. It&#x27;s a temporary limitation.)&lt;&#x2F;p&gt;
&lt;p&gt;Taking this to its logical conclusion, the syntax for patterns and views in strucjure is itself defined &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;strucjure&#x2F;blob&#x2F;master&#x2F;src&#x2F;strucjure&#x2F;parser.clj#L178&quot;&gt;using views&lt;&#x2F;a&gt;. This is a fairly complex DSL but with strucjure it&#x27;s was very easy to write, read and modify the parser.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generic-programming&quot;&gt;Generic programming&lt;&#x2F;h2&gt;
&lt;p&gt;Clojure has some great facilities for generic traversals in the form of clojure.walk:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;walk
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Traverses form, an arbitrary data structure.  inner and outer are
  functions.  Applies inner to each element of form, building up a
  data structure of the same type, then applies outer to the result.
  Recognizes all Clojure data structures. Consumes seqs as with doall.&amp;quot;

  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;added &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1.1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;}
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;inner outer form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cond
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form) (outer (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;inner form)))
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;clojure&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;IMapEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form) (outer (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;inner form)))
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form) (outer (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;doall &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;inner form)))
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;coll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form) (outer (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;into &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;inner form)))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;else (outer form)))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;postwalk
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Performs a depth-first, post-order traversal of form. Calls f on
each sub-form, uses f&amp;#39;s return value in place of the original.
Recognizes all Clojure data structures except sorted-map-by.
Consumes seqs as with doall.&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;added &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1.1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;}
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;f form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (walk (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;partial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;postwalk f) f form))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Essentially, all this is doing is specifying how to take apart clojure data structures and how to put them back together again. Strucjure supports passing optional :pre-view and :post-view functions to modify the input to or output from any named view encountered during parsing, so we can do something very similar:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;clojure
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((zero-or-more clojure) ?xs)) xs
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;clojure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;IMapEntry [?x ?y]) [x y]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((zero-or-more clojure) ?xs)) xs
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and coll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?coll ((zero-or-more clojure) ?xs)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;into &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;coll) xs)
  ?other other)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;postwalk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;form f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (run clojure form {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;post-view (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_ sub-form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] (f sub-form)}))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The problem with using this (or clojure.walk) for generic traversals is that it loses context. When a given sub-form is encountered, the function f is given no indication of where in the data structure that sub-form is or how it is being used. If we apply the above idea to domain-specific views we can do generic traversals &lt;em&gt;with context&lt;&#x2F;em&gt;. The motivating example for this was a simple game I was porting called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;l-seed&quot;&gt;l-seed&lt;&#x2F;a&gt; (I haven&#x27;t yet updated l-seed to use strucjure, but you can see a precursor to it in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;l-seed&#x2F;blob&#x2F;master&#x2F;src&#x2F;l_seed&#x2F;syntax.clj&quot;&gt;l-seed.syntax&lt;&#x2F;a&gt;). In l-seed, players submit programs defining the growth of their plant species and compete with other player&#x27;s plants for sunlight and nutrients. The plant language can be defined like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+name+
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+tag+
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+length+
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 %&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+direction+
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-360 % 360&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+relation+
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+property+
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;direction) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition+
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &amp;amp; ((zero-or-more +condition+) ?conditions)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;conditions)
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &amp;amp; ((zero-or-more +condition+) ?conditions)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;conditions)
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(+condition+ ?condition)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;condition)
  [(+relation+ ?relation) (+property+ ?property) ?value] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;relation property value))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition-head+
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(+condition+ ?condition)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;condition)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;whenever &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;whenever)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+action+
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;grow-by (+length+ ?length)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;grow-by length)
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;turn-by (+direction+ ?direction)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;turn-by direction)
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;turn-to (+direction+ ?direction)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;turn-to direction)
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tag (+tag+ ?tag)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tag tag)
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blossom (+tag+ ?tag)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;blossom tag)
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;branch &amp;amp; ((zero-or-more (zero-or-more +action+)) ?action-lists)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;branch action-lists))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+rule+
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rule (+name+ ?name) (+condition-head+ ?condition-head) &amp;amp; ((zero-or-more +action+) ?actions)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rule &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;condition-head actions))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+rules+
  [&amp;amp; ((zero-or-more +rule+) ?rules)] rules)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Note that we specify both how to take apart a data structure and how to put it together. Really, the latter should be derived from the former. I think strucjure will eventually feature reversible patterns for this purpose.)&lt;&#x2F;p&gt;
&lt;p&gt;We can then operate on these programs in a generic way. For example, deciding which rule to execute next:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+relation+ ?relation] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;resolve &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;relation)
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+property+ ?property] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;properties property)
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition+ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &amp;amp; ?conds]] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;every&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;conds)
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition+ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &amp;amp; ?conds]] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;some true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;conds)
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition+ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?cond]] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cond&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition+ [?relation ?property ?value]] (relation property value)
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition-head+ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;?condition]] condition
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+condition-head+ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;whenever]] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+rule+ [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rule _ ?condition &amp;amp; ?actions]] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;condition actions)
    [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;+rules+ [&amp;amp; ?rules]] (choose (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rules))
    [_ ?other] other))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rules properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Pick a valid rule and return its list of actions (or nil if no rules are valid)&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(utilpostwalk +rules+ rules (select&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;properties)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Writing code like this allows us to separate the shape of the data from the computation we perform over it.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re also not limited to just walking over data structures. We can perform more complex operations in the same generic fashion.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;map-reduce &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;strucjure form map-op reduce-op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Call map-op on every sub-form and reduce results with reduce-op&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(reduce-op))]
    (run strucjure form
           {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;post-view (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
                         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;reduce-op (map-op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form))
                         form)})
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;acc))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;collect &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;strucjure form filter-op&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Return all sub-forms satisfying filter-op&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;atom &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)]
    (run strucjure form
           {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;post-view (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
                         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(filter-op &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form)
                           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;swap! &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;acc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;conj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;result)))})
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;acc))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;types&quot;&gt;Types&lt;&#x2F;h2&gt;
&lt;p&gt;I originally learned to code in haskell. One of the things I miss about strong static typing is it that it automatically provides documentation about the data structures used in your program. Strucjure patterns can fulfill the same role. In l-seed, if you are confused about what a rule should look like you can just go look at the +rule+ pattern.&lt;&#x2F;p&gt;
&lt;p&gt;We can&#x27;t quite get static typing out of this, but we do get runtime checking for complex typedata-structures:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defgenotype &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; compile-time syntax check for the genotype language
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(run +rules+ rules)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def ~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;vec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;rules)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In theory, it should also be possible to generate random data structures satisfying a given pattern. This would be useful for providing examples and for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;test.generative&quot;&gt;generative testing&lt;&#x2F;a&gt;. In erlang, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;manopapad&#x2F;proper&quot;&gt;proper&lt;&#x2F;a&gt; allows using type-specs directly alongside hand-written generators. I haven&#x27;t yet implemented this in strucjure but I think it should be reasonably easy once reversible patterns are implemented.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;state-machines&quot;&gt;State machines&lt;&#x2F;h2&gt;
&lt;p&gt;One can think of parsers in general as state machines with look-ahead and backtracking. OMeta takes this idea and runs with it:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most  interesting  ideas  have  more  than  one  fruitful  way  to  view  them,  and  it  occurred  to  us  that,
abstractly,  one  could  think  of  TCP&#x2F;IP  as  a  kind  of  “non‐deterministic  parser  with  balancing
heuristics”,  in  that  it  takes  in  a  stream  of  things,  does  various  kinds  of  pattern‐matching  on  them,
deals with errors by backing up and taking other paths, and produces a transformation of the input in
a specified form as a result.&lt;&#x2F;p&gt;
&lt;p&gt;Since the language transformation techniques we use operate on arbitrary objects, not just strings (see
above), and include some abilities of both standard and logic programming, it seemed that this could
be used to make a very compact TCP&#x2F;IP. Our first attempt was about 160 lines of code that was robust
enough to run a website. We think this can be done even more compactly and clearly, and we plan to
take another pass at this next year.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I haven&#x27;t yet tried doing anything like this in strucjure, but all the machinery is there. It would make an interesting complement to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;droplet&quot;&gt;droplet&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;moving-forward&quot;&gt;Moving forward&lt;&#x2F;h2&gt;
&lt;p&gt;There are of lot of different directions for improvement and experimentation.&lt;&#x2F;p&gt;
&lt;p&gt;One of my top priorities is better error reporting. This sucks:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;clojure.lang.ExceptionInfo: throw+: #strucjure.view.PartialMatch{:view #strucjure.view.Or{:views [#strucjure.view.Match{:pattern #strucjure.pattern.Seq{:pattern #strucjure.pattern.Chain{:patterns [#strucjure.view.Import{:view-fun #&amp;lt;test$bind_STAR_$fn__2339 test$bind_STAR_$fn__2339@60a896b8&amp;gt;, :pattern #strucjure.pattern.Bind{:symbol x}} #strucjure.pattern.Head{:pattern #strucjure.pattern.And{:patterns [#strucjure.pattern.Guard{:fun #&amp;lt; clojure.lang.AFunction$1@5c3f3b9b&amp;gt;} #strucjure.pattern.Bind{:symbol op}]}} #strucjure.view.Import{:view-fun #&amp;lt;test$bind_STAR_$fn__2343 test$bind_STAR_$fn__2343@3b626c6d&amp;gt;, :pattern #strucjure.pattern.Bind{:symbol y}}]}}, :result-fun #&amp;lt; clojure.lang.AFunction$1@3abc8690&amp;gt;} #strucjure.view.Match{:pattern #strucjure.pattern.Seq{:pattern #strucjure.pattern.Chain{:patterns [#strucjure.view.Import{:view-fun #&amp;lt;test$bind_STAR_$fn__2347 test$bind_STAR_$fn__2347@2f267610&amp;gt;, :pattern #strucjure.pattern.Bind{:symbol x}}]}}, :result-fun #&amp;lt; clojure.lang.AFunction$1@6112c9f&amp;gt;}]}, :input (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), :remaining (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;), :output 1}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have some ideas about how to improve this but nothing totally concrete. I could, at the very least, return the bindings that existed at the point of failure along with some kind of failure stack. If I can figure out a reasonable way to implement &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cut_%28logic_programming%29&quot;&gt;cut&lt;&#x2F;a&gt; that will also help.&lt;&#x2F;p&gt;
&lt;p&gt;Another short-term priority is some form of &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tail_call#Tail_recursion_modulo_cons&quot;&gt;tail call elemination&lt;&#x2F;a&gt;. Many patterns and views are naturally implemented in a recursive fashion:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defnview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;zero-or-more [elem]
  (prefix (elem ?x) &amp;amp; ((zero-or-more elem) ?xs)) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;x xs)
  (prefix ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But in the current implementation of strucjure this will quickly overflow the stack. The current workaround is to define such views by hand:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defrecord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ZeroOrMore [view]
  View
  (run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[this input opts]
    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;when &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;input)
           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;instance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;clojure&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;Seqable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;input))
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;elems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;input)
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;outputs nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;elems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] elems]
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;remaining output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] (run view elem opts)]
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;remaining)
              (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;recur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;elems (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;output outputs))
              [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;elem elems) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;reverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;outputs)])
            [(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;elem elems) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;reverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;outputs)])
          [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;reverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;outputs)])))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;zero-or-more &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;ZeroOrMore)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is gross. I don&#x27;t have any ideas on how to overcome this.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve already briefly mentioned reversible patterns. At the beginning of this post I warned that I would use the terms view and pattern interchangeably. The line between them in strucjure is currently blurry but I think that the distinction should be that patterns must be reversible while views are allowed to destroy information.&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, there will eventually be a need for some level of optimization. Given the extra flexibility in strucjure I don&#x27;t expect to ever be as fast as core.match but there is certainly lots of room for improvement on the current code. Originally, strucjure patterns were compiled into efficient clojure code but the implementation was complicated and it was difficult to rapidly iterate around it. I will probably return to compilation once the semantics and interface settle down.&lt;&#x2F;p&gt;
&lt;p&gt;For now, I&#x27;m going to dogfood strucjure in various projects while ruminating on improvements. I&#x27;m already very happy with how much leverage can be had from such a simple idea, especially if I can fix the problems above. Hopefully the examples here might get other people thinking along the same lines.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Hacker School</title>
                <pubDate>Sun, 02 Dec 2012 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/hacker-school/</link>
                <guid>http%3A//scattered-thoughts.net/writing/hacker-school/</guid>
                <description>&lt;p&gt;I&#x27;ve spent the last ten weeks or so at &lt;a href=&quot;https:&#x2F;&#x2F;www.hackerschool.com&#x2F;&quot;&gt;Hacker School&lt;&#x2F;a&gt;. It&#x27;s something like a writer&#x27;s retreat for programmers. Unlike a traditional school there is very little structure and the focus is on project-based learning. In order to make the most of this environment, it&#x27;s important to be clear exactly what your goals are.&lt;&#x2F;p&gt;
&lt;p&gt;So here is my goal - to create better tools for the problems I regularly encounter. My focus is on building distributed systems and p2p networks but I suspect that these tools will be generally useful. When working as a freelancer I am necessarily constrained to using proven ideas and techniques because the risk assumed is not mine. Hacker School is a chance for me to explore some more far-out ideas. These ideas are drawn primarily from two places: the &lt;a href=&quot;http:&#x2F;&#x2F;vpri.org&#x2F;&quot;&gt;Viewpoint Research Institute&lt;&#x2F;a&gt; and the &lt;a href=&quot;http:&#x2F;&#x2F;boom.cs.berkeley.edu&#x2F;&quot;&gt;Berkeley Order Of Magnitude&lt;&#x2F;a&gt; project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;viewpoint-research-institute&quot;&gt;Viewpoint Research Institute&lt;&#x2F;h2&gt;
&lt;p&gt;Specifically, I&#x27;m interested in the &lt;a href=&quot;http:&#x2F;&#x2F;www.vpri.org&#x2F;pdf&#x2F;tr2011004_steps11.pdf&quot;&gt;Steps Towards Expressive Programming&lt;&#x2F;a&gt; project. Their goal is no less than the reinvention of programming. By way of proof of concept they aim to develop an entire computing system, from OS to compilers to applications, in less than 20k LOC. Such a system would be compact enough to be understood in its entirety by a single person, something that is unthinkable in todays world of multi-million LOC systems. Amazingly, their initial prototypes of various subsystems actually approach this goal.&lt;&#x2F;p&gt;
&lt;p&gt;Their approach relies heavily on the use of &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain-specific_language&quot;&gt;DSLs&lt;&#x2F;a&gt; to capture high-level, domain-specific expressions of intent which are then compiled into efficient code. By way of example, they describe their TCP-IP stack:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most  interesting  ideas  have  more  than  one  fruitful  way  to  view  them,  and  it  occurred  to  us  that,
abstractly,  one  could  think  of  TCP&#x2F;IP  as  a  kind  of  “non‐deterministic  parser  with  balancing
heuristics”,  in  that  it  takes  in  a  stream  of  things,  does  various  kinds  of  pattern‐matching  on  them,
deals with errors by backing up and taking other paths, and produces a transformation of the input in
a specified form as a result.&lt;&#x2F;p&gt;
&lt;p&gt;Since the language transformation techniques we use operate on arbitrary objects, not just strings (see
above), and include some abilities of both standard and logic programming, it seemed that this could
be used to make a very compact TCP&#x2F;IP. Our first attempt was about 160 lines of code that was robust
enough to run a website. We think this can be done even more compactly and clearly, and we plan to
take another pass at this next year.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &#x27;language transformation techniques&#x27; they refer to are embodied in &lt;a href=&quot;http:&#x2F;&#x2F;lambda-the-ultimate.org&#x2F;node&#x2F;2477&quot;&gt;OMeta&lt;&#x2F;a&gt;, a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PEG&quot;&gt;PEG&lt;&#x2F;a&gt;-based language for parsing and pattern-matching. OMeta provides an incredible amount of leverage for such a simple abstraction. For starters, it leads to very concise and readable descriptions of tokenisers, parsers and tree transformers which are all crucial for developing DSLs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;berkeley-order-of-magnitude&quot;&gt;Berkeley Order Of Magnitude&lt;&#x2F;h2&gt;
&lt;p&gt;The Berkeley Order Of Magnitude project has spent a number of years experimenting with using logic languages for distributed systems. Like the STEPS project, their goals are audaciously ambitious.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enter BOOM, an effort to explore implementing Cloud software using disorderly, data-centric languages. BOOM stands for the Berkeley Orders Of Magnitude project, because we seek to enable people to build systems that are OOM bigger than are building today, with OOM less effort than traditional programming methodologies.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Among their &lt;a href=&quot;boom.cs.berkeley.edu&#x2F;papers.html&quot;&gt;myriad publications&lt;&#x2F;a&gt; they describe an &lt;a href=&quot;http:&#x2F;&#x2F;www.srcf.ucam.org&#x2F;%7Ems705&#x2F;temp&#x2F;eurosys2010&#x2F;boom.pdf&quot;&gt;API-compliant reimplementation of Hadoop and HDFS&lt;&#x2F;a&gt; in ~1K lines of Overlog code, which they then extend with a variety of features (eg master-node failover via MultiPaxos) not yet found in Hadoop. Thanks to a number of high-level optimisations enabled by the simpler code-base their implementation is almost as fast as the original.&lt;&#x2F;p&gt;
&lt;p&gt;For me, the most interesting aspect is the amount of reflective power gained by treating everything as data:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;One key to our approach is that everything is data, i.e. rows in tables that can be queried and manipulated. This includes persistent data (e.g. filesystem metadata), runtime state (e.g. Hadoop scheduler bookkeeping), summary stats (e.g. for advanced straggler scheduling), in-flight msgs and system events, even parsed code. When everything in a system is data, it becomes easy to do things like parallelize computations on the state, make it fault tolerant, and express (and enforce) invariants on legal states of the system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The latest project from the BOOM group is the &lt;a href=&quot;http:&#x2F;&#x2F;www.bloom-lang.net&#x2F;&quot;&gt;Bloom language&lt;&#x2F;a&gt;. Bloom has a more solid theoretical foundation than their previous languages and also enables an amazing level of static analysis, even being able to guarantee that certain Bloom programs are eventually consistent.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;core-ideas&quot;&gt;Core Ideas&lt;&#x2F;h2&gt;
&lt;p&gt;What can I take away from these projects? Here are some vague ideas, which to my mind all seem related.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Higher-level reasoning&lt;&#x2F;strong&gt;. The STEPS notes talk about &#x27;separating meaning from tactics&#x27;. It&#x27;s often easier to specify what a correct solution to a problem looks like than it is to actually find it. In many domains, finding a solution is then just a matter of applying a suitable search algorithm. For example, constraint solvers such as &lt;a href=&quot;http:&#x2F;&#x2F;www.gecode.org&#x2F;&quot;&gt;gecode&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.logic&quot;&gt;core.logic&lt;&#x2F;a&gt; express a problem as a set of logical constraints on the possible solutions and then search through the space of variable assignments to find a solution. By automatically pruning parts of the search space which break one or more constraints and applying user-specified search heuristics, constraint solvers can often be faster than hand-coded solvers for complex problems whilst at the same time allowing a clear, concise, declarative specification of the problem.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Everything is data&lt;&#x2F;strong&gt;. Constraint solving is enabled by treating both the problem specification and the solution space as data, reducing the problem to search. In lisps, treating code as data enables macros and code rewriting. In Overlog, everything from persistent data to scheduler state to the language runtime is available as data and can be queried and manipulated using the same powerful abstractions. Tracing in Overlog is as simple as adding a rule that fires whenever a new fact is derived, because the derivation itself is stored alongside the fact. Whatever you are working on, making it accessible as plain data enables turning the full power and expressivity of your language directly onto the problem. This is where OO falls down, in trying to hide data behind custom interfaces. Rob Pike recently put it: &amp;quot;It has become clear that OO zealots are afraid of data&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Reflection&lt;&#x2F;strong&gt;. When you expose the internals of a system as data to that same system, amazing (and, yes, sometimes terrifying) things happen. The STEPS folks manage to stay withing their code budget by building highly dynamic, self-hosting, meta-circular, introspective languages. Many of the amazing results of the Overlog project, from the optimising compiler to declarative distributed tracing, resulted from exposing the language runtime and program source code to the same logic engine that it implements. Turning a system in on itself and allowing it to reason about its own behaviour is an incredibly powerful idea. Certainly it can be dangerous, and it&#x27;s all too easy to tangle oneself in knots, but the results speak for themselves. This is an idea that has been &lt;a href=&quot;http:&#x2F;&#x2F;steve-yegge.blogspot.com&#x2F;2007&#x2F;01&#x2F;pinocchio-problem.html&quot;&gt;expounded&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;G%C3%B6del,_Escher,_Bach&quot;&gt;many&lt;&#x2F;a&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.paulgraham.com&#x2F;diff.html&quot;&gt;times&lt;&#x2F;a&gt; before but I think there is still so much more to explore here.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;progress&quot;&gt;Progress&lt;&#x2F;h1&gt;
&lt;p&gt;My attempts to keep up with this have been focused on three projects.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;shackles&quot;&gt;Shackles&lt;&#x2F;a&gt; is a constraint solver supporting both finite-domain and logical constraints. It was originally an experiment to see what, if any, extra power could be gained from implementing a gecode-style solver using persistent data-structures (constraint solvers in traditional languages spend much of their time cloning program state to enable back-tracking). Fortunately, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clojure&#x2F;core.logic&quot;&gt;core.logic&lt;&#x2F;a&gt; now supports finite domain variables with constraint propagation and there has been noise about implementing user-specified search heuristcs, so that&#x27;s one less piece of code I need to write.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;strucjure&quot;&gt;Strucjure&lt;&#x2F;a&gt; is similar to OMeta but aims to be a good clojure citizen rather than a totally separate tool. As such, all of its core components are &lt;a href=&quot;http:&#x2F;&#x2F;clojure.org&#x2F;protocols&quot;&gt;protocols&lt;&#x2F;a&gt;, semantic actions are plain clojure code and the resulting patterns and views are just nested &lt;a href=&quot;http:&#x2F;&#x2F;clojure.org&#x2F;datatypes&quot;&gt;records&lt;&#x2F;a&gt; which can be manipulated by regular clojure code. Following the principles above, the syntax of strucjure patterns&#x2F;views is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;strucjure&#x2F;blob&#x2F;master&#x2F;src&#x2F;strucjure&#x2F;parser.clj#L94&quot;&gt;self-defined using views&lt;&#x2F;a&gt; and the test suite &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;strucjure&#x2F;blob&#x2F;master&#x2F;src&#x2F;strucjure&#x2F;test.clj#L1&quot;&gt;parses the documentation&lt;&#x2F;a&gt; to verify the correctness of the examples.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;droplet&quot;&gt;Droplet&lt;&#x2F;a&gt; is based on the Bloom^L language (an extension of the Bloom language that operates over arbitrary semi-lattices). Droplet is so far less developed than the other projects but the core interpreter is working as well as basic datalog-like rules. Again, droplet attempts to be a good clojure citizen. Rules are just clojure functions. The datalog syntax is implemented via a simple macro which produces a rule function. Individual droplets are held in &lt;a href=&quot;http:&#x2F;&#x2F;clojure.org&#x2F;agents&quot;&gt;agents&lt;&#x2F;a&gt; and communicate either via agent sends or over &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ztellman&#x2F;lamina&quot;&gt;lamina&lt;&#x2F;a&gt; queues. I&#x27;m currently working out a composable, extensible query language that is able to operate over arbitrary semi-lattices, rather than just sets. In its current (and largely imaginary) form, it looks something like &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;4171094&quot;&gt;this&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll go into more detail on the latter two projects soon but for now I&#x27;m content to just throw these ideas out into the world, without justification, and see what bounces back.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Strucjure: reading the readme</title>
                <pubDate>Thu, 25 Oct 2012 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/strucjure-reading-the-readme/</link>
                <guid>http%3A//scattered-thoughts.net/writing/strucjure-reading-the-readme/</guid>
                <description>&lt;p&gt;I just released &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;strucjure&quot;&gt;strucjure&lt;&#x2F;a&gt;, a clojure library and DSL for parsing and pattern matching based on &lt;a href=&quot;http:&#x2F;&#x2F;lambda-the-ultimate.org&#x2F;node&#x2F;2477&quot;&gt;Ometa&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The readme on github has detailed descriptions of the syntax etc which I won&#x27;t repeat here. What I do want to do is run through a realistic example.&lt;&#x2F;p&gt;
&lt;p&gt;The readme has a large number of examples and I want to be sure that these are all correct and up to date. As part of the test-suite for strucjure I parse the &lt;a href=&quot;https:&#x2F;&#x2F;raw.github.com&#x2F;jamii&#x2F;strucjure&#x2F;master&#x2F;README.md&quot;&gt;readme source&lt;&#x2F;a&gt;, pull out all the examples and make sure that they all run correctly and return the expected output.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#f29718;&quot;&gt;jamie@alien:&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#55b4d4;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;&#x2F;strucjure$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lein test strucjure.test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;WARNING:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; newline already refers to: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;#&amp;#39;clojure.core&#x2F;newline in namespace: strucjure.test, being replaced by: #&amp;#39;strucjure.test&#x2F;newline

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;lein&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; test strucjure.test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;Ran&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; 1 tests containing 166 assertions.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; failures, 0 errors.
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The readme parser is pretty simple. Since I control both the parser and the readme source so it doesn&#x27;t need to be bullet-proof, just the simplest thing that will get the job done. Strucjure is very bare-bones at the moment though so we have to create a lot of simple views that really belong in a library somewhere.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;space
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\space &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview newline
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\newline &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;not-newline
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\newline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;line
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;; have to consume at least one char
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(prefix &amp;amp; ((zero-or-more not-newline) ?line)
               &amp;amp; ((optional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;newline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) ?end)))
  line)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;indented-line
  (prefix &amp;amp; ((one-or-more space) _) &amp;amp; (line ?line))
  line)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We want a tokeniser for various parts of the readme. We could write it like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defnview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tokenise [sep]
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; empty input
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;[] &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; throw away separator, start a new token
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&amp;amp; (sep _) &amp;amp; ((tokenise sep) ?results)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;results)
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; add the current char to the first token
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[?char &amp;amp; ((tokenise sep) [?result &amp;amp; ?results])] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;result) results))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately in the current implementation of strucjure that recursive call goes on the stack, so this view will blow up on large inputs. For now we just have to implement this view by hand to get access to recur.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;tokenise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;&amp;gt;Raw
   (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;input opts&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
     (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;when-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;elems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;input)]
       (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;elems &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;elems
              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;token-acc nil
              tokens-acc nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;remaining _&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] (view&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;run sep elems opts)]
           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;recur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;remaining &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;reverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;token-acc) tokens-acc))
           (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if-let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;elems&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;] elems]
             (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;recur &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;elems (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;elem token-acc) tokens-acc)
             [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;reverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;reverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;token-acc) tokens-acc))])))))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The rest of the parser makes more sense reading in reverse order. We start by splitting up the readme by code delimiters (triple backticks). This gives us chunks of alternating text and code, so we parse every other chunk as a block of code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;code-delim
  (prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\&#96; \&#96; \&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;code-delim)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;readme
  ((tokenise code-delim) ?chunks)
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;concat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;partial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;run code-block) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;take-nth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;rest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;chunks)))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We only want to look at code blocks that are marked as clojure code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;code-block
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\c \l \o \j \u \r \e \newline&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &amp;amp; (code-block-inner ?result)]
  result)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A few of the code blocks don&#x27;t contain examples - we can detect these because they don&#x27;t start with a &amp;quot;user&amp;gt; &amp;quot; prompt. All the other blocks contain a list of examples separated by prompts.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;prompt
  (prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\u \s \e \r \&amp;gt; \space&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;prompt)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;code-block-inner
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(prompt _)
       ((tokenise prompt) ?chunks))
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;partial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;run example) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;filter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;not &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) chunks))

  _ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; not a block of examples
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An example consists of an input, which may be on multiple lines, zero or more lines of printed output and finally a result.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;example
  [&amp;amp; (line ?input-first)
   &amp;amp; ((zero-or-more-prefix indented-line) ?input-rest)
   &amp;amp; ((one-or-more-prefix line) ?output-lines)]
  {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;input (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;with-out-str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;doseq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;cons &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;input-first input-rest)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;line) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\space&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;prints (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;with-out-str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;doseq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;butlast &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;output-lines)] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;line))))
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;result (run result (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;last &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;output-lines))})
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The result is either a return value or an exception.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;;; #&amp;quot;[a-zA-Z\.]&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;exception-chars
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\.
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;defview &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;result
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\E \x \c \e \p \t \i \o \n \I \n \f \o \space
   \t \h \r \o \w \+ \: \space
   \#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; &amp;amp; ((one-or-more exception-chars) ?exception)
   &amp;amp; _]
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;throws (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;exception)]

  ?data
  [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;returns (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;data)])
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it - parsing done.&lt;&#x2F;p&gt;
&lt;p&gt;Now we just have to turn the results into unit tests. We have to be careful about comparing the results of the examples because they might contain closures, which look different every time.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;replace-fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;unread-form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (.replaceAll unread-form &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;#&amp;lt;[^&amp;gt;]*&amp;gt;&amp;quot; &amp;quot;#&amp;lt;fun&amp;gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;prints-as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;string form&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(replace-fun string) (replace-fun (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;with-out-str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;pr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;form)))))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running the examples is a little tricky because some of them create bindings or classes that are used by later examples. We end up needing to eval the code at runtime.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;example-test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;input prints result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  (match result
         [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;returns ?value]
         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(is (prints-as value (input)))
           (is (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;prints (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;with-out-str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(input)))))

         [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;throws ?exception]
         (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(is (try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(input)
                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;nil
                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;thrown
                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(prints-as exception (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;thrown)))))
           (is (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;prints (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;with-out-str
                           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(input)
                                 (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#ed9366;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;text-decoration:underline;color:#399ee6;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_ nil&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))))))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;insert-example-test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;:keys &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;input prints result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]}]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(example-test (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;strucjure) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;read-string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;input)))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;prints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;result))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;defmacro &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;insert-readme-test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
     ~@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;example &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(run readme (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;seq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;slurp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;eval &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;file))))]
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&#96;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(insert-example-test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;example))))

(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07171;&quot;&gt;deftest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;readme-test
  (insert-readme-test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;README.md&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is fun. Not only does strucjure parse its own syntax, it reads its own documentation!&lt;&#x2F;p&gt;
&lt;p&gt;Parts of this were a little painful. The next version of strucjure will definitely have improved string matching. I&#x27;m also looking at optimising&#x2F;compiling views, as well as memoisation. Previous versions of strucjure supported both but were hard to maintain. For now I&#x27;m going to be moving on to using strucjure to build other useful DSLs.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Causal ordering</title>
                <pubDate>Thu, 16 Aug 2012 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/causal-ordering/</link>
                <guid>http%3A//scattered-thoughts.net/writing/causal-ordering/</guid>
                <description>&lt;p&gt;Causal ordering is a vital tool for thinking about distributed systems. Once you understand it, many other concepts become much simpler.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll start with the fundamental property of distributed systems:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Messages sent between machines may arrive zero or more times at any point after they are sent&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is the sole reason that building distributed systems is hard.&lt;&#x2F;p&gt;
&lt;p&gt;For example, because of this property it is impossible for two computers communicating over a network to agree on the exact time. You can send me a message saying &amp;quot;it is now 10:00:00&amp;quot; but I don&#x27;t know how long it took for that message to arrive. We can send messages back and forth all day but we will never know for sure that we are synchronised.&lt;&#x2F;p&gt;
&lt;p&gt;If we can&#x27;t agree on the time then we can&#x27;t always agree on what order things happen in. Suppose I say &amp;quot;my user logged on at 10:00:00&amp;quot; and you say &amp;quot;my user logged on at 10:00:01&amp;quot;. Maybe mine was first or maybe my clock is just fast relative to yours. The only way to know for sure is if something connects those two events. For example, if my user logged on and then sent your user an email and if you received that email before your user logged on then we know for sure that mine was first.&lt;&#x2F;p&gt;
&lt;p&gt;This concept is called causal ordering and is written like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;A -&amp;gt; B (event A is causally ordered before event B)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s define it a little more formally. We model the world as follows: We have a number of machines on which we observe a series of events. These events are either specific to one machine (eg user input) or are communications between machines. We define the causal ordering of these events by three rules:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;If A and B happen on the same machine and A happens before B then A -&amp;gt; B

If I send you some message M and you receive it then (send M) -&amp;gt; (recv M)

If A -&amp;gt; B and B -&amp;gt; C then A -&amp;gt; C
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We are used to thinking of ordering by time which is a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Total_order&quot;&gt;total order&lt;&#x2F;a&gt; - every pair of events can be placed in some order. In contrast, causal ordering is only a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Partially_ordered_set&quot;&gt;partial order&lt;&#x2F;a&gt; - sometimes events happen with no possible causal relationship i.e. not (A -&amp;gt; B or B -&amp;gt; A).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;5&#x2F;55&#x2F;Vector_Clock.svg&quot;&gt;This image&lt;&#x2F;a&gt; shows a nice way to picture these relationships.&lt;&#x2F;p&gt;
&lt;p&gt;On a single machine causal ordering is exactly the same as time ordering (actually, on a multi-core machine the situation is &lt;a href=&quot;http:&#x2F;&#x2F;mechanical-sympathy.blogspot.com&#x2F;2011&#x2F;08&#x2F;inter-thread-latency.html&quot;&gt;more complicated&lt;&#x2F;a&gt;, but let&#x27;s forget about that for now). Between machines causal ordering is conveyed by messages. Since sending messages is the only way for machines to affect each other this gives rise to a nice property:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;If not(A -&amp;gt; B) then A cannot possibly have caused B
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we don&#x27;t have a single global time this is the only thing that allows us to reason about causality in a distributed system. This is really important so let&#x27;s say it again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;Communication bounds causality
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The lack of a total global order is not just an accidental property of computer systems, it is a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Light_cone&quot;&gt;fundamental property&lt;&#x2F;a&gt; of the laws of physics. I claimed that understanding causal order makes many other concepts much simpler. Let&#x27;s skim over some examples.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vector-clocks&quot;&gt;Vector Clocks&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Lamport_timestamps&quot;&gt;Lamport clocks&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Vector_clock&quot;&gt;Vector clocks&lt;&#x2F;a&gt; are data-structures which efficiently approximate the causal ordering and so can be used by programs to reason about causality.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;If A -&amp;gt; B then LC_A &amp;lt; LC_B

If VC_A &amp;lt; VC_B then A -&amp;gt; B
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Different types of vector clock trade-off compression vs accuracy by storing smaller or larger portions of the causal history of an event.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consistency&quot;&gt;Consistency&lt;&#x2F;h2&gt;
&lt;p&gt;When mutable state is distributed over multiple machines each machine can receive update events at different times and in different orders. If the final state is dependent on the order of updates then the system must choose a single serialisation of the events, imposing a global total order. A distributed system is consistent exactly when the outside world can never observe two different serialisations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;cap-theorem&quot;&gt;CAP Theorem&lt;&#x2F;h2&gt;
&lt;p&gt;The CAP (Consistency-Availability-Partition) theorem also boils down to causality. When a machine in a distributed system is asked to perform an action that depends on its current state it must decide that state by choosing a serialisation of the events it has seen. It has two options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Choose a serialisation of its current events immediately&lt;&#x2F;li&gt;
&lt;li&gt;Wait until it is sure it has seen all concurrent events before choosing a serialisation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first choice risks violating consistency if some other machine makes the same choice with a different set of events. The second violates availability by waiting for every other machine that could possibly have received a conflicting event before performing the requested action. There is no need for an actual network partition to happen - the trade-off between availability and consistency exists whenever communication between components is not instant. We can state this even more simply:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;Ordering requires waiting
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even your hardware &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Memory_barrier&quot;&gt;cannot escape&lt;&#x2F;a&gt; this law. It provides the illusion of synchronous access to memory at the cost of availabilty. If you want to write fast parallel programs then you need to understand the messaging model used by the underlying hardware.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;eventual-consistency&quot;&gt;Eventual Consistency&lt;&#x2F;h2&gt;
&lt;p&gt;A system is eventually consistent if the final state of each machine is the same regardless of how we choose to serialise update events. An eventually consistent system allows us to sacrifice consistency for availability without having the state of different machines diverge irreparably. It doesn&#x27;t save us from having the outside world see different serialisations of update events. It is also difficult to construct eventually consistent data structures and to reason about their composition.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hal.inria.fr&#x2F;inria-00397981&#x2F;en&#x2F;&quot;&gt;CRDTs&lt;&#x2F;a&gt; provide guidance on constructing eventually consistent data-structures.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.bloom-lang.net&#x2F;&quot;&gt;Bloom&lt;&#x2F;a&gt; is a logic-based DSL for writing distributed systems. The core observation is that there is a natural connection between monotonic logic programs (logic programs which do not have to retract output when given additional inputs) and available distributed systems (where individual machines do not have to wait until all possible inputs have been received before producing output). &lt;a href=&quot;http:&#x2F;&#x2F;db.cs.berkeley.edu&#x2F;papers&#x2F;UCB-lattice-tr.pdf&quot;&gt;Recent work&lt;&#x2F;a&gt; from the Bloom group shows how to merge their approach with the CRDT approach to get the best of both worlds.&lt;&#x2F;p&gt;
&lt;p&gt;Nathan Marz suggests &lt;a href=&quot;http:&#x2F;&#x2F;nathanmarz.com&#x2F;blog&#x2F;how-to-beat-the-cap-theorem.html&quot;&gt;an architecture for data processing systems&lt;&#x2F;a&gt; which avoids much of the pain caused by the CAP theorem. In short, combine a consistent batch-processing layer with an available, eventually consistent real-time layer so that the system as a whole is available but any errors in the (complicated, difficult to program) eventually consistent layer are transient and cannot corrupt the consistent data store.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Binmaps: compressed bitmaps</title>
                <pubDate>Tue, 03 Jan 2012 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/binmaps-compressed-bitmaps/</link>
                <guid>http%3A//scattered-thoughts.net/writing/binmaps-compressed-bitmaps/</guid>
                <description>&lt;p&gt;Lately I&#x27;ve been porting some code from c++. The code in question is a compressed bitmap used in &lt;a href=&quot;http:&#x2F;&#x2F;libswift.org&quot;&gt;swift&lt;&#x2F;a&gt; to track which parts of a download have already been retrieved. To reduce the memory usage the original uses lots of pointer tricks. Replicating these in ocaml is interesting.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the basic idea. Conceptually a binmap is a tree of bitmaps. In a leaf at the bottom of the tree each bit in the bitmap represents one bit. In a leaf one layer above the bottom each bit in the bitmap represents two bits. In a leaf two layers above the bottom each bit in the bitmap represents four bits etc.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;type t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ layers : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;tree : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;of int
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;of tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;tree
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s pretend for simplicity our bitmaps are only 1 bit wide. Then the string 00000000 would be represented as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;{ layers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And the string 00001100 would be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;{ layers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; tree &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Branch
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
      (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Branch
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
        (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) }
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The worst case for this data structure is the string 0101010101... In this case we use about 6.5x as much memory as needed by a plain bitmap (3 words for a Branch with two pointers, 4 words for a Bitmap with a pointer to a boxed Int32). The c++ version uses some simple tricks to reduce this overhead to just over 2x that of a plain bitmap. We can replicate these in ocaml by using a bigarray to simulate raw memory access.&lt;&#x2F;p&gt;
&lt;p&gt;Our data structure looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct
  include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bigarray.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Array1
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;geti &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bitmap.to_int (Bigarray.Array1.get &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;seti &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;i v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bigarray.Array1.set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i (Bitmap.of_int v)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end

type t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ length : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;layers : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array : (Bitmap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Bitmap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.bigarray_elt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, Bigarray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.c_layout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) Array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pointers : Widemap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;free : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;type node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Bitmap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Pointer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;of int

let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;get_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;binmap node_addr is_left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; node_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; is_left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Widemap.get binmap.pointers index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;with
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Array.get binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; index)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Pointer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Array.geti binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; index)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;set_node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;binmap node_addr is_left node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; node_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; is_left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;with
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;bitmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Widemap.set binmap.pointers index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.set binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; index bitmap
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Pointer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Widemap.set binmap.pointers index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.seti binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Each pair of cells in the array represents a branch. Leaves are hoisted into their parent branch, replacing the pointer. Widemap.t is an extensible bitmap which we use here to track whether a given cell in the array is a pointer or a bitmap. The length field is the number of bits represented by bitmap. The free field will be explained later.&lt;&#x2F;p&gt;
&lt;p&gt;Our previous example string 00001100 would now be represented like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(*
  0 -&amp;gt; Bitmap 0
  1 -&amp;gt; Pointer 2
  2 -&amp;gt; Bitmap 1
  3 -&amp;gt; Bitmap 0
*)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; layers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pointers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Widemap.of_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;0100&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the bitmap is changed we may have to add or delete pairs eg if the above example changed to 00001111 it would be represented as:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(*
  0 -&amp;gt; Bitmap 0
  1 -&amp;gt; Bitmap 1
  2 -&amp;gt; ?
  3 -&amp;gt; ?
*)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can grow and shrink the array as necessary, but since deleted pairs won&#x27;t necessarily be at the end of the used space the bigarray will become fragmented. To avoid wasting space we can write a linked list into the empty pairs to keep track of free space. 0 is always the root of the tree so we can use it as a list terminator. The free field marks the start of the list.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;del_pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;binmap node_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.seti binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; node_addr binmap.free&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  binmap.free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; node_addr

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(* double the size of a full array and then initialise the freelist *)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;grow_array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;binmap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(binmap.free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;old_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.dim binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array in
  assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(old_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(old_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; max_int)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; min max_int (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; old_len) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(new_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; create_array new_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.blit binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Array.sub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; old_len)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  binmap.free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; old_len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; old_len &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; new_len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
    if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.seti &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; i (i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.seti &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(new_len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;add_pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;binmap node_left node_right &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; binmap.free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; grow_array binmap)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;node_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; binmap.free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;free_next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.geti binmap.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; binmap.free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  binmap.free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; free_next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  set_node binmap node_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; node_left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  set_node binmap node_addr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; node_right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  node_addr
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I haven&#x27;t yet written any code to shrink the array but it should be fairly straightforward to recursively copy the tree into a new array and rewrite the pointers.&lt;&#x2F;p&gt;
&lt;p&gt;With the freelist our modified example now looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;{ length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; layers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;|]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pointers &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Widemap.of_string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;0100&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; free &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the representation sorted the rest of the code more or less writes itself.&lt;&#x2F;p&gt;
&lt;p&gt;The only difficulty lies in choosing the width of the bitmaps used. Using smaller bitmaps increases the granularity of the binmap allowing better compression by compacting more nodes. Using larger bitmaps increases the size of the pointers allowing larger bitmaps to be represented. I&#x27;ve written the binmap code to be width-agnostic; it can easily be made into a functor of the bitmap module.&lt;&#x2F;p&gt;
&lt;p&gt;The paper linked below suggests using a layered address scheme to expand the effective pointer size, where the first bit of the pointer is a flag indicating which layer the address is in. I would suggest rather than putting the flag in the pointer it would be simper to use information implicit in the structure of the tree eg is the current layer mod 8 = 0. Either way, this hugely increases the size of the address space at a the cost of a little extra complexity.&lt;&#x2F;p&gt;
&lt;p&gt;The original version is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gritzko&#x2F;swift&#x2F;blob&#x2F;master&#x2F;doc&#x2F;binmaps-alenex.pdf&quot;&gt;here&lt;&#x2F;a&gt; and my version is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;binmap&quot;&gt;here&lt;&#x2F;a&gt;. This is just an experiment so far, I certainly wouldn&#x27;t suggest using it without some serious testing.&lt;&#x2F;p&gt;
&lt;p&gt;Overall I&#x27;m not sure how useful this particular data structure is but this method of compacting tree-like types in ocaml is certainly interesting. I suspect it could be at least partially automated.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Optimising texsearch: memory usage</title>
                <pubDate>Sun, 19 Dec 2010 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/optimising-texsearch-memory-usage/</link>
                <guid>http%3A//scattered-thoughts.net/writing/optimising-texsearch-memory-usage/</guid>
                <description>&lt;p&gt;In my last post I discussed the new search algorithm behind texsearch. There is a significant speed improvement over previous versions but it now consumes a ridiculous amount of memory. The instance running &lt;a href=&quot;http:&#x2F;&#x2F;latexsearch.com&quot;&gt;latexsearch.com&lt;&#x2F;a&gt; wavers around 4.7 gb during normal operation and reaches 7-8 gb when updating the index. This pushes other services out of main memory and everything is horribly slow until they swap back in.&lt;&#x2F;p&gt;
&lt;p&gt;The main data structure looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &amp;#39;a t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ latexs : Latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opaques : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;deleted : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;next_id : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;id
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array : (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;unsorted : (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The array field is responsible for the vast majority of the memory usage. Each cell in the array contains a pointer to a tuple containing two integers for a total of 4 words per suffix. The types id and pos are both small integers so if we pack them into a single unboxed integer we can reduce this to 1 word per suffix. We have a new module suffix.ml with some simple bit-munging:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;type id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int
type pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int

type t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int

let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pack_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Sys.word_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pack_size

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Invalid_suffix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; of id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pos

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; max_size)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; max_size)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; raise (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Invalid_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id, pos))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pack_size)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unpack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lsr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pack_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;land &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(max_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id, pos)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how confusing infix functions are in ocaml.&lt;&#x2F;p&gt;
&lt;p&gt;The suffix array type becomes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &amp;#39;a t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ latexs : Latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opaques : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;deleted : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;next_id : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;id
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array : Suffix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t array
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;unsorted : (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this change the memory usage drops down to 1.4 gb. The mean search time also improves. It seems that having fewer cache misses makes up for the extra computation involved in unpacking the suffixes.&lt;&#x2F;p&gt;
&lt;p&gt;Now that the array field is a single block it is easy to move it out of the heap entirely so the gc never has to scan it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;ancientify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Ancient.follow (Ancient.mark sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Gc.full_major &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This eliminates the annoyingly noticeable gc pauses.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Optimising texsearch</title>
                <pubDate>Wed, 08 Dec 2010 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/optimising-texsearch/</link>
                <guid>http%3A//scattered-thoughts.net/writing/optimising-texsearch/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;texsearch&quot;&gt;Texsearch&lt;&#x2F;a&gt; is a search engine for LaTeX formulae. It forms part of the backend for &lt;a href=&quot;http:&#x2F;&#x2F;latexsearch.com&quot;&gt;latexsearch.com&lt;&#x2F;a&gt; which indexes the entire Springer corpus.&lt;&#x2F;p&gt;
&lt;p&gt;Texsearch has only a minimal understanding of LaTeX and no understanding of the structure of the formulae it searches in, but unlike it&#x27;s competitors (eg &lt;a href=&quot;http:&#x2F;&#x2F;uniquation.com&#x2F;en&#x2F;&quot;&gt;Uniquation&lt;&#x2F;a&gt;) it&#x27;s able to index the entire Springer corpus and answer queries quickly and cheaply. It&#x27;s a brute force solution that gave us an good-enough search engine search engine with minimal research risk.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parsing&quot;&gt;Parsing&lt;&#x2F;h2&gt;
&lt;p&gt;When searching within LaTeX content we want results that represent the same formulae as the search term. Unfortunately LaTeX presents plenty of opportunities for obfuscating content with macros, presentation commands and just plain weird lexing.&lt;&#x2F;p&gt;
&lt;p&gt;Texsearch uses &lt;a href=&quot;http:&#x2F;&#x2F;plastex.sourceforge.net&#x2F;&quot;&gt;PlasTeX&lt;&#x2F;a&gt; to parse LaTeX formulae and expand macros. The preprocessor then discards any LaTeX elements which relate to presentation rather than content (font, weight, colouring etc). The remaining LaTeX elements are each hashed into a 63 bit integer. This massively reduces the memory consumption, allowing the entire corpus and search index to be held in RAM. Collisions should be rare given that there are far less than 2^63 possible elements.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;indexing&quot;&gt;Indexing&lt;&#x2F;h2&gt;
&lt;p&gt;At the core of texsearch is a search algorithm which performs approximate searches over the search corpus. Specifically, given a search term S and a search radius R we want to return all corpus terms T such that the &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Levenshtein_distance&quot;&gt;Levenshtein distance&lt;&#x2F;a&gt; between S and some substring of T is less than R. This is a common problem in bioinformatics and NLP and there is a &lt;a href=&quot;http:&#x2F;&#x2F;citeseerx.ist.psu.edu&#x2F;viewdoc&#x2F;download?doi=10.1.1.96.7225&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;substantial amount of research&lt;&#x2F;a&gt; on how to solve this efficiently. I have been through a range of different algorithms in previous iterations of texsearch and have only recently achieved reasonable performance (mean search time is now ~300ms for a corpus of 1.5m documents). The code is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;texsearch&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We define the distance from latexL to latexR as the minimum Levenshtein distance between latexL and any substring of latexR. With this definition we can specify the results of the search algorithm more simply as returning all corpus terms with distance R of S.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;latexL latexR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxl, maxr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.length latexL, Array.length latexR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
  if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(* cache.(l).(r) is the distance between latexL[l to maxl] and latexR[r to maxr] *)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cache &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.make_matrix (maxl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (maxr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(* Must match everything on the left *)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;downto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    cache.(l).(maxr) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cache.(l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(maxr)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(* General matching *)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; l &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;downto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do
    for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;downto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
      cache.(l).(r) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
          minimum
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cache.(l).(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
            (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cache.(l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(r))
            ((abs (compare latexL.(l) latexR.(r))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cache.(l&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;done done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(* Non-matches on the right dont count until left starts matching *)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; maxr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;downto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
    cache.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(r) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
        minimum
          (cache.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
          (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cache.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(r))
          ((abs (compare latexL.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) latexR.(r))) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; cache.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  cache.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;).(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The search algorithm is built around a &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Suffix_array&quot;&gt;suffix array&lt;&#x2F;a&gt; presenting the following interface:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;type &amp;#39;a t

val create : unit -&amp;gt; &amp;#39;a t
val add : &amp;#39;a t -&amp;gt; (&amp;#39;a * Latex.t) list -&amp;gt; unit
val prepare : &amp;#39;a t -&amp;gt; unit

val delete : &amp;#39;a t -&amp;gt; (&amp;#39;a -&amp;gt; bool) -&amp;gt; unit

val find_exact : &amp;#39;a t -&amp;gt; Latex.t -&amp;gt; (int * &amp;#39;a) list
val find_approx : &amp;#39;a t -&amp;gt; float -&amp;gt; Latex.t -&amp;gt; (int * &amp;#39;a) list
val find_query : &amp;#39;a t -&amp;gt; float -&amp;gt; Query.t -&amp;gt; (int * &amp;#39;a) list
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The data structure is pretty straightforward. We store the LaTeX elements in a DynArray and represent suffixes by a pair of pointers - the first into the DynArray and the second into the LaTeX term itself. Each LaTeX term is matched to an opaque object which is used by the consumer of this module to id the terms.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;type id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int
type pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int

type &amp;#39;a t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ latexs : Latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opaques : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;next_id : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;id
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array : (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;mutable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;unsorted : (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;.t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;create &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{ latexs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.create &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; opaques &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.create &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;()
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; next_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.make &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; unsorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The suffix array is built in a completely naive way. We just throw all the suffixes into a list and sort it. There are much more efficient methods known but this is fast enough, especially since we do updates offline. The building is separated into two functions to make incremental updates easier.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa latexs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  sa.unsorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; latexs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sa.unsorted

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;insert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;opaque&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sa.next_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  sa.next_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.add sa.opaques opaque&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.add sa.latexs latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  id

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;prepare &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;List.map (insert sa) sa.unsorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;new_suffixes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Util.concat_map (suffixes sa) ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;cmp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; compare_suffix sa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.of_list (List.merge cmp (List.fast_sort cmp new_suffixes) (Array.to_list sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  sa.unsorted &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;exact-queries&quot;&gt;Exact queries&lt;&#x2F;h2&gt;
&lt;p&gt;So now we have a sorted array of suffixes of all our corpus terms. If we want to find all exact matches for a given search term we just do a binary search to find the first matching suffix and then scan through the array until the last matching suffix. For reasons that will make more sense later, we divide this into two stages. Most of the work is done in &lt;code&gt;gather_exact&lt;&#x2F;code&gt;, where we perform the search and dump the resulting LaTeX term ids into a HashSet. Then &lt;code&gt;find_exact&lt;&#x2F;code&gt; runs through the HashSet and looks up the matching opaques.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(* binary search *)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gather_exact &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;ids sa latex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;(* find beginning of region *)
  (* lo &amp;lt; latex *)
  (* hi &amp;gt;= latex *)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let rec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;narrow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;lo hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;mid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;((hi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;lo) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
    if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; lo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; mid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
    if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; leq sa latex sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.(mid)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; narrow lo mid
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; narrow mid hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Array.length sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array in
  let rec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;traverse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else
    let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id, pos) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;.(index) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
    if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; is_prefix sa latex (id, pos)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then
      begin
	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hashset.add ids id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
	traverse (index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
    else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  traverse (narrow (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) (n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;-1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;))

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;exact_match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, DynArray.get sa.opaques id)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;find_exact &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa latex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hashset.create &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  gather_exact ids sa latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;List.map (exact_match sa) (Hashset.to_list ids)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;approximate-queries&quot;&gt;Approximate queries&lt;&#x2F;h2&gt;
&lt;p&gt;Suppose the distance from our search term S to some corpus term T is strictly less than the search radius R. That means that if we split S into R pieces at least one of those pieces must match a substring of T exactly. So our approximate search algorithm is to perform exact searches for each of the R pieces and then calculate the distance to each of the results. Notice the similarity in structure to the previous algorithm. You can also see now that the exact search is split into two functions so that we can reuse &lt;code&gt;gather_exact&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gather_approx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa precision latex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Latex.cutoff precision latex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hashset.create &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;List.iter (gather_exact ids sa) (Latex.fragments latex k)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  ids

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;approx_match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa precision latexL id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;latexR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.get sa.latexs id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Latex.similar precision latexL latexR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;with
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Some &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;dist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opaque &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.get sa.opaques id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Some &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(dist, opaque)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;None

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;find_approx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa precision latex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; gather_approx sa precision latex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Util.filter_map (approx_match sa precision latex) (Hashset.to_list ids)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can also extend this to allow boolean queries.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let rec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;gather_query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa precision query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;with
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Latex &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;latex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; gather_approx sa precision latex
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;And &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;query1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;query2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hashset.inter (gather_query sa precision query1) (gather_query sa precision query2)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;query1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;query2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hashset.union (gather_query sa precision query1) (gather_query sa precision query2)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;query_match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa precision query id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;latexR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.get sa.latexs id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Query.similar precision query latexR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;with
  | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Some &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;dist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;opaque &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;DynArray.get sa.opaques id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Some &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(dist, opaque)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;None &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;None

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;find_query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa precision query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;ids &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; gather_query sa precision query &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Util.filter_map (query_match sa precision query) (Hashset.to_list ids)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a lot simpler than my previous approach, which required some uncomfortable reasoning about overlapping regions in quasi-metric spaces.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;memory-usage&quot;&gt;Memory usage&lt;&#x2F;h2&gt;
&lt;p&gt;This is a significant speed improvement over previous versions but it now consumes a ridiculous amount of memory. The instance running &lt;a href=&quot;http:&#x2F;&#x2F;latexsearch.com&quot;&gt;latexsearch.com&lt;&#x2F;a&gt; wavers around 4.7 gb during normal operation and reaches 7-8 gb when updating the index. This pushes other services out of main memory and everything is horribly slow until they swap back in.&lt;&#x2F;p&gt;
&lt;p&gt;The main data structure is a suffix array with type &lt;code&gt;(id * pos) array&lt;&#x2F;code&gt;, which is responsible for the vast majority of the memory usage. Each cell in the array contains a pointer to a tuple containing two integers, for a total of 4 words per suffix. The types id and pos are both small integers so if we pack them into a single unboxed integer we can reduce this to 1 word per suffix.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;module &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;struct

type id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int
type pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int

type t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int

let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pack_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Sys.word_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;max_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pack_size

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Invalid_suffix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; of id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pos

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;pack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;pos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; max_size)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; max_size)
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; raise (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;Invalid_suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id, pos))
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lsl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pack_size)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;unpack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;lsr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; pack_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; suffix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;land &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(max_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;in
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(id, pos)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The main data structure then becomes &lt;code&gt;Suffix.t array&lt;&#x2F;code&gt;. With this change the memory usage drops down to 1.4 gb. The mean search time also improves. It seems that having fewer cache misses makes up for the extra computation involved in unpacking the suffixes.&lt;&#x2F;p&gt;
&lt;p&gt;Now that the array field is a single block in memory it is easy to move it out of the heap entirely so the gc never has to scan it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#fa6e32;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;ancientify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;sa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;
  sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Ancient.follow (Ancient.mark sa.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Gc.full_major &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This eliminates gc pauses, and we finally have a usable system.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Design and analysis of a gossip algorithm</title>
                <pubDate>Sat, 04 Sep 2010 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/design-and-analysis-of-a-gossip-algorithm/</link>
                <guid>http%3A//scattered-thoughts.net/writing/design-and-analysis-of-a-gossip-algorithm/</guid>
                <description>&lt;p&gt;My MSc dissertation &#x27;Design and Analysis of a Gossip Algorithm&#x27;, in which I present an algorithm for forming a dynamic, unstructured overlay in which each node can generate a stream of independent, uniformly distributed samples of the overlay membership. Such peer sampling services form the basis for a number of gossip algorithms implementing distributed search&#x2F;recommendation, database replication, reputation management etc. As far as I am aware this is the first peer sampling service which provides any guarantees on the distribution of samples. The mathematical analysis is backed up by model checking in &lt;a href=&quot;http:&#x2F;&#x2F;www.prismmodelchecker.org&#x2F;&quot;&gt;PRISM&lt;&#x2F;a&gt; and test results for the reference implementation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;dissertation&#x2F;raw&#x2F;master&#x2F;writeup&#x2F;main.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;dissertation&quot;&gt;Source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Smarkets API documentation</title>
                <pubDate>Fri, 30 Jul 2010 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/smarkets-api-documentation/</link>
                <guid>http%3A//scattered-thoughts.net/writing/smarkets-api-documentation/</guid>
                <description>&lt;p&gt;I want to write a little about the documentation system I wrote for the smarkets API. The main concern I had with the documentation was that it would be incorrect or become out of sync with the code, especially since I didn&#x27;t really understand the system when I started documenting it. To prevent this I built a couple of documentation tools that have paid for themselves many times over.&lt;&#x2F;p&gt;
&lt;p&gt;We have our own home-grown and slightly crappy web framework which powers the public API. A typical resource declaration looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_aux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;emails&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_aux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_aux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;PUT&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;user_or_admin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;PUT&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(UserId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_Auth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Ctx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;verify_email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(UserId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hash) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;of
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;smarkets_rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;conflict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;smarkets_rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cfl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;not_found&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;smarkets_rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Ctx)
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
         end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To this I added a documentation field for each method:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_aux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;user_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;emails&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_aux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_aux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;PUT&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;rest_users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;user_or_admin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;PUT&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pu_doc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt; #&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;#39;doc.method&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;doc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Verify the specified email using the hash code sent to the user&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;responses &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;[{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Successful&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Specified user or email does not exist&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;409&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Incorrect hash code&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}]}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;pu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;fun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(UserId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;_Auth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Ctx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;verify_email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(UserId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;Hash) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;of
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;smarkets_rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;conflict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;smarkets_rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;cfl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Ctx)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;not_found&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;-&amp;gt;
                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#399ee6;&quot;&gt;smarkets_rest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;nf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;(Ctx)
             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;end
         end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From this the documentation system generates a json object which is stored in couchdb:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;{
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;users&#x2F;{user_id}&#x2F;emails&#x2F;{email}&#x2F;{hash}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;_rev&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1-0c4c3aad1227a62429ffb0c05a7059f1&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;doc.action&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;term&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;methods&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;PUT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;type&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;doc.method&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;term&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;headers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                   }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;opt_params&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                   }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;req_params&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                   }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;scope&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;private&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;role&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;rest_users.user_or_admin&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;auth&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;needs_user&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;responses&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;200&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Successful&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;404&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Specified user or email does not exist&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;409&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Incorrect hash code&amp;quot;
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;doc&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;Verify the specified email using the hash code sent to the user&amp;quot;
               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
           }
       }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;path&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;users&#x2F;{user_id}&#x2F;emails&#x2F;{email}&#x2F;{hash}&amp;quot;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This json object is used by a couple of different scripts. Both the &lt;a href=&quot;http:&#x2F;&#x2F;smarkets.com&#x2F;api&#x2F;documentation&#x2F;&quot;&gt;public api reference&lt;&#x2F;a&gt; and our own internal api reference are produced from these json objects. I also added a fuzzer which can read the json documentation and generate calls with both random data and records pulled from the development database. The fuzzer logs the results of these calls like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#fafafa;&quot;&gt;
&lt;span style=&quot;color:#61676c;&quot;&gt;{
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;_id&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;320f2a4bc956334c66c84a4d9f6160a0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;_rev&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;1-a109f7aa2906e2452e45a49d649674cb&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;body&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;{}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;code&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;403&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;path_spec&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;users&#x2F;{user_id}&#x2F;emails&#x2F;{email}&#x2F;{hash}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;method&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;PUT&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;headers&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;{
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;Content-type&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;application&#x2F;json&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;Authorization&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;UserLogin token=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;O3bHthtJ6wumlt0yjf0q8OrYURMBKiRbfNRmhfGLJNCXhcXkSrzyPVzm47MoWD_lt6UdOJlA8wf1AWY~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#4cbf99;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;path&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#86b300;&quot;&gt;&amp;quot;users&#x2F;54ad2cc2a1dd2871518c528a11a40f00&#x2F;emails&#x2F;jMt%40XPqKYLNx&#x2F;50584d82c756b2e4a53c8695553ae34a&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;response&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#55b4d4;&quot;&gt;&amp;quot;port&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;9000
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676c;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another set of scripts then combs through these tables looking for errors. Anything that returns &#x27;500 internal server error&#x27; is flagged. Calls which return &#x27;400 bad request&#x27; and are not tagged as being deliberately malformed are also flagged. Same goes for any response code which isn&#x27;t documented for that call and any documented response code which isn&#x27;t observed in the fuzzer table. One particularly useful script lists methods which are accessible via the public port.&lt;&#x2F;p&gt;
&lt;p&gt;This system has worked out quite well so far. The documentation is embedded directly next to the related code so its hard to forget to update it when changing the code. The fuzzer is worth its weight in gold and has uncovered countless bugs and weird corner cases. For such a crude fuzzer it generates suprisingly good code coverage. The next step is to combine the fuzzer with a smallcheck-style test system in order to better narrow down errors in long sequences of calls.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Examining scampy</title>
                <pubDate>Wed, 19 May 2010 00:00:00 +0000</pubDate>
                <link>http%3A//scattered-thoughts.net/writing/examining-scampy/</link>
                <guid>http%3A//scattered-thoughts.net/writing/examining-scampy/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;github.com&#x2F;jamii&#x2F;scampy&quot;&gt;Scampy&lt;&#x2F;a&gt; is a bot for engaging 419 scammers in pointless conversation and consuming time that could have been spent on real victims. It was originally intended to be a smart bot. I had visions of data mining conversations and inventing dsl&#x27;s for chat scripts. This all takes time however, so in order to get up and running quickly the prototype just selects responses at random from a prewritten list. This turns out to be depressingly effective.&lt;&#x2F;p&gt;
&lt;p&gt;It appears that the average scammer is about as gullible as their targets.  A typical conversation runs like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Good Day,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I am staff. Sgt. Ronnie Reeve, I found your contact particulars in an E-mail address guide they provide us here, as I desperately need an urgent help to do this deal. I am seeking your kind assistance to move the sum of $12m {Twelve Million U.S Dollars only} to you
in  your destination, as far as I can be assured that my share will be safe in your
care until I complete my service here ... etc&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am very excited to be partnered with you in this business dealing. Please be quick in supplying further details so that we can progress this more faster.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Sir,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks for your kind mail sir. We have suffered so much here in Iraq so I believe nothing can compensate us enough except for the love of God.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Saddam Hussein was a very wicked man so God is compensating his children  for what we suffered because of him.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;... etc&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, I will need the following information below so as to present you as the beneficiary to the security company where I kept the consigment for safety.
Below are the information needed:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Your full names&lt;&#x2F;li&gt;
&lt;li&gt;Your phone&#x2F;fax numbers&lt;&#x2F;li&gt;
&lt;li&gt;Your current contact address&lt;&#x2F;li&gt;
&lt;li&gt;Your age&lt;&#x2F;li&gt;
&lt;li&gt;Your occupation.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;... etc&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sir, this does not appear to be a reputable transaction and I cannot risk getting involved with things that are illegal.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is nothing to be afraid of here, I have worked out every modalities on how to get this done. I am an American who has his reputation at stake here, so for that reason I will not put myself in anything that will bring me trouble.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Just follow my instruction and you will see that we shall be happy together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Please once again I promise you there is nothing to put us trouble here.  I am not stupid to have myself in trouble with all the American strict laws.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope to hear from you as I have instructed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you tell me whether I should be expecting further contact from you on this matter?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Sir,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I am still waiting for your kind response.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ronnie&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This was an early bug. Ronnie doesn&#x27;t seem to twig though.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Sir,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I am worried why I have not heard from you? I hope there is no problem, pls free to share your opinion with me on this matter.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope to hear from you.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ronnie.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you needing my address? Should I send it to you?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear Friend,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As I said earlier there nothing to fear here. Please I will need following information from you so that we continue from there.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Full names&lt;&#x2F;li&gt;
&lt;li&gt;contact address&lt;&#x2F;li&gt;
&lt;li&gt;phone&#x2F;fax numbers&lt;&#x2F;li&gt;
&lt;li&gt;Maritus status&lt;&#x2F;li&gt;
&lt;li&gt;occupation.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I wait for your honest response.
Ronnie.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dear&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And again.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please if you are not interested just let me know and stop playing me. I have told you what to do and you keep asking me irrelivant questions. Pls dont play with me this is not a joke.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ronnie.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am thinking that you have the wrong person as this doesnt seem to be intended for me.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello,&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;I must confess that its amazing the way you treated this opportunity i made available for our mutual benefits just because you are not serious with it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Do you actaually think this is a kind of joke? I am really baffled at your attitude towards this once in a life time opportunity.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Just thought I should let you know that I still feel we do business together.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Ronnie.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you please explain this more clearly because I am not understanding you. Especially on the first point that you mentioned, I think that you may have written wrongly because it does not seem correct.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ronnie&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PLEASE JUST SEND ADDRESS OK?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Scampy&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Are you needing my address? Should I send it to you?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I never heard from him again.&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
